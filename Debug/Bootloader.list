
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000225c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08002368  08002368  00012368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800250c  0800250c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800250c  0800250c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800250c  0800250c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800250c  0800250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002510  08002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000070  08002584  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08002584  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000076df  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018cd  00000000  00000000  00027778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00029048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  000297c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b9d  00000000  00000000  00029e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009c56  00000000  00000000  00041a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c47  00000000  00000000  0004b673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce2ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002030  00000000  00000000  000ce30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002350 	.word	0x08002350

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002350 	.word	0x08002350

0800014c <BL_fetchHostCommand>:

/****************** Macros  ******************/

#define  TEST_BOOTLOADER     0x10

void BL_fetchHostCommand(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	uint8_t dataLenght = 0;
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
	memset(hostBuffer , 0 , MAX_HOST_COMMAND_LENGHT);
 8000156:	2264      	movs	r2, #100	; 0x64
 8000158:	2100      	movs	r1, #0
 800015a:	483c      	ldr	r0, [pc, #240]	; (800024c <BL_fetchHostCommand+0x100>)
 800015c:	f001 fc76 	bl	8001a4c <memset>
	HAL_UART_Receive(BL_hostCommunicationUART, hostBuffer, 1, HAL_MAX_DELAY);
 8000160:	f04f 33ff 	mov.w	r3, #4294967295
 8000164:	2201      	movs	r2, #1
 8000166:	4939      	ldr	r1, [pc, #228]	; (800024c <BL_fetchHostCommand+0x100>)
 8000168:	4839      	ldr	r0, [pc, #228]	; (8000250 <BL_fetchHostCommand+0x104>)
 800016a:	f001 fab6 	bl	80016da <HAL_UART_Receive>
	/*get length of the command*/
	dataLenght = hostBuffer[0];
 800016e:	4b37      	ldr	r3, [pc, #220]	; (800024c <BL_fetchHostCommand+0x100>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	71fb      	strb	r3, [r7, #7]
	/*fetch the command from the user*/
	HAL_UART_Receive(BL_hostCommunicationUART, &hostBuffer[1], dataLenght, HAL_MAX_DELAY);
 8000174:	79fb      	ldrb	r3, [r7, #7]
 8000176:	b29a      	uxth	r2, r3
 8000178:	f04f 33ff 	mov.w	r3, #4294967295
 800017c:	4935      	ldr	r1, [pc, #212]	; (8000254 <BL_fetchHostCommand+0x108>)
 800017e:	4834      	ldr	r0, [pc, #208]	; (8000250 <BL_fetchHostCommand+0x104>)
 8000180:	f001 faab 	bl	80016da <HAL_UART_Receive>
	switch(hostBuffer[1]){
 8000184:	4b31      	ldr	r3, [pc, #196]	; (800024c <BL_fetchHostCommand+0x100>)
 8000186:	785b      	ldrb	r3, [r3, #1]
 8000188:	3b10      	subs	r3, #16
 800018a:	2b11      	cmp	r3, #17
 800018c:	d856      	bhi.n	800023c <BL_fetchHostCommand+0xf0>
 800018e:	a201      	add	r2, pc, #4	; (adr r2, 8000194 <BL_fetchHostCommand+0x48>)
 8000190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000194:	080001dd 	.word	0x080001dd
 8000198:	080001e5 	.word	0x080001e5
 800019c:	080001ed 	.word	0x080001ed
 80001a0:	080001f5 	.word	0x080001f5
 80001a4:	080001fd 	.word	0x080001fd
 80001a8:	08000205 	.word	0x08000205
 80001ac:	0800020d 	.word	0x0800020d
 80001b0:	08000215 	.word	0x08000215
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	08000225 	.word	0x08000225
 80001bc:	0800023d 	.word	0x0800023d
 80001c0:	0800023d 	.word	0x0800023d
 80001c4:	0800023d 	.word	0x0800023d
 80001c8:	0800023d 	.word	0x0800023d
 80001cc:	0800023d 	.word	0x0800023d
 80001d0:	0800023d 	.word	0x0800023d
 80001d4:	0800022d 	.word	0x0800022d
 80001d8:	08000235 	.word	0x08000235
		case CBL_GET_VER_CMD:{
			BL_Print_Message("CBL_GET_VER_CMD \r\n");
 80001dc:	481e      	ldr	r0, [pc, #120]	; (8000258 <BL_fetchHostCommand+0x10c>)
 80001de:	f000 f855 	bl	800028c <BL_Print_Message>
			break;
 80001e2:	e02f      	b.n	8000244 <BL_fetchHostCommand+0xf8>
		}
		case CBL_GET_HELP_CMD:{
			BL_Print_Message("CBL_GET_HELP_CMD \r\n");
 80001e4:	481d      	ldr	r0, [pc, #116]	; (800025c <BL_fetchHostCommand+0x110>)
 80001e6:	f000 f851 	bl	800028c <BL_Print_Message>
			break;
 80001ea:	e02b      	b.n	8000244 <BL_fetchHostCommand+0xf8>
		}
		case CBL_GET_CID_CMD:{
			BL_Print_Message("CBL_GET_CID_CMD \r\n");
 80001ec:	481c      	ldr	r0, [pc, #112]	; (8000260 <BL_fetchHostCommand+0x114>)
 80001ee:	f000 f84d 	bl	800028c <BL_Print_Message>
			break;
 80001f2:	e027      	b.n	8000244 <BL_fetchHostCommand+0xf8>
		}
		case CBL_GET_RDP_STATUS_CMD:{
			BL_Print_Message("CBL_GET_RDP_STATUS_CMD \r\n");
 80001f4:	481b      	ldr	r0, [pc, #108]	; (8000264 <BL_fetchHostCommand+0x118>)
 80001f6:	f000 f849 	bl	800028c <BL_Print_Message>
			break;
 80001fa:	e023      	b.n	8000244 <BL_fetchHostCommand+0xf8>
		}
		case CBL_GO_TO_ADDR_CMD:{
			BL_Print_Message("CBL_GO_TO_ADDR_CMD \r\n");
 80001fc:	481a      	ldr	r0, [pc, #104]	; (8000268 <BL_fetchHostCommand+0x11c>)
 80001fe:	f000 f845 	bl	800028c <BL_Print_Message>
			break;
 8000202:	e01f      	b.n	8000244 <BL_fetchHostCommand+0xf8>
		}
		case CBL_FLASH_ERASE_CMD:{
			BL_Print_Message("CBL_FLASH_ERASE_CMD \r\n");
 8000204:	4819      	ldr	r0, [pc, #100]	; (800026c <BL_fetchHostCommand+0x120>)
 8000206:	f000 f841 	bl	800028c <BL_Print_Message>
			break;
 800020a:	e01b      	b.n	8000244 <BL_fetchHostCommand+0xf8>
		}
		case CBL_MEM_WRITE_CMD:{
			BL_Print_Message("CBL_MEM_WRITE_CMD \r\n");
 800020c:	4818      	ldr	r0, [pc, #96]	; (8000270 <BL_fetchHostCommand+0x124>)
 800020e:	f000 f83d 	bl	800028c <BL_Print_Message>
			break;
 8000212:	e017      	b.n	8000244 <BL_fetchHostCommand+0xf8>
		}
		case CBL_ED_W_PROTECT_CMD:{
			BL_Print_Message("CBL_ED_W_PROTECT_CMD \r\n");
 8000214:	4817      	ldr	r0, [pc, #92]	; (8000274 <BL_fetchHostCommand+0x128>)
 8000216:	f000 f839 	bl	800028c <BL_Print_Message>
			break;
 800021a:	e013      	b.n	8000244 <BL_fetchHostCommand+0xf8>
		}
		case CBL_MEM_READ_CMD:{
			BL_Print_Message("CBL_MEM_READ_CMD \r\n");
 800021c:	4816      	ldr	r0, [pc, #88]	; (8000278 <BL_fetchHostCommand+0x12c>)
 800021e:	f000 f835 	bl	800028c <BL_Print_Message>
			break;
 8000222:	e00f      	b.n	8000244 <BL_fetchHostCommand+0xf8>
		}
		case CBL_READ_SECTOR_STATUS_CMD:{
			BL_Print_Message("CBL_READ_SECTOR_STATUS_CMD \r\n");
 8000224:	4815      	ldr	r0, [pc, #84]	; (800027c <BL_fetchHostCommand+0x130>)
 8000226:	f000 f831 	bl	800028c <BL_Print_Message>
			break;
 800022a:	e00b      	b.n	8000244 <BL_fetchHostCommand+0xf8>
				}
		case CBL_OTP_READ_CMD:{
			BL_Print_Message("CBL_OTP_READ_CMD \r\n");
 800022c:	4814      	ldr	r0, [pc, #80]	; (8000280 <BL_fetchHostCommand+0x134>)
 800022e:	f000 f82d 	bl	800028c <BL_Print_Message>
			break;
 8000232:	e007      	b.n	8000244 <BL_fetchHostCommand+0xf8>
				}
		case CBL_CHANGE_ROP_Level_CMD:{
			BL_Print_Message("CBL_CHANGE_ROP_Level_CMD \r\n");
 8000234:	4813      	ldr	r0, [pc, #76]	; (8000284 <BL_fetchHostCommand+0x138>)
 8000236:	f000 f829 	bl	800028c <BL_Print_Message>
			break;
 800023a:	e003      	b.n	8000244 <BL_fetchHostCommand+0xf8>
		}
		default:{
			BL_Print_Message("Invalid Command\r\n");
 800023c:	4812      	ldr	r0, [pc, #72]	; (8000288 <BL_fetchHostCommand+0x13c>)
 800023e:	f000 f825 	bl	800028c <BL_Print_Message>
			break;
 8000242:	bf00      	nop
		}
	}
}
 8000244:	bf00      	nop
 8000246:	3708      	adds	r7, #8
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000008c 	.word	0x2000008c
 8000250:	200000fc 	.word	0x200000fc
 8000254:	2000008d 	.word	0x2000008d
 8000258:	08002368 	.word	0x08002368
 800025c:	0800237c 	.word	0x0800237c
 8000260:	08002390 	.word	0x08002390
 8000264:	080023a4 	.word	0x080023a4
 8000268:	080023c0 	.word	0x080023c0
 800026c:	080023d8 	.word	0x080023d8
 8000270:	080023f0 	.word	0x080023f0
 8000274:	08002408 	.word	0x08002408
 8000278:	08002420 	.word	0x08002420
 800027c:	08002434 	.word	0x08002434
 8000280:	08002454 	.word	0x08002454
 8000284:	08002468 	.word	0x08002468
 8000288:	08002484 	.word	0x08002484

0800028c <BL_Print_Message>:


void BL_Print_Message(char *format, ...){
 800028c:	b40f      	push	{r0, r1, r2, r3}
 800028e:	b580      	push	{r7, lr}
 8000290:	b09a      	sub	sp, #104	; 0x68
 8000292:	af00      	add	r7, sp, #0
	char Messsage[100] = {0};
 8000294:	2300      	movs	r3, #0
 8000296:	607b      	str	r3, [r7, #4]
 8000298:	f107 0308 	add.w	r3, r7, #8
 800029c:	2260      	movs	r2, #96	; 0x60
 800029e:	2100      	movs	r1, #0
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 fbd3 	bl	8001a4c <memset>
	va_list args;
	va_start(args, format);
 80002a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80002aa:	603b      	str	r3, [r7, #0]
	vsprintf(Messsage, format, args);
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	683a      	ldr	r2, [r7, #0]
 80002b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fbe8 	bl	8001a88 <vsiprintf>
	HAL_UART_Transmit(BL_hostCommunicationUART, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 80002b8:	1d39      	adds	r1, r7, #4
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	2264      	movs	r2, #100	; 0x64
 80002c0:	4804      	ldr	r0, [pc, #16]	; (80002d4 <BL_Print_Message+0x48>)
 80002c2:	f001 f987 	bl	80015d4 <HAL_UART_Transmit>
	va_end(args);
}
 80002c6:	bf00      	nop
 80002c8:	3768      	adds	r7, #104	; 0x68
 80002ca:	46bd      	mov	sp, r7
 80002cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr
 80002d4:	200000fc 	.word	0x200000fc

080002d8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80002dc:	4b06      	ldr	r3, [pc, #24]	; (80002f8 <MX_CRC_Init+0x20>)
 80002de:	4a07      	ldr	r2, [pc, #28]	; (80002fc <MX_CRC_Init+0x24>)
 80002e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80002e2:	4805      	ldr	r0, [pc, #20]	; (80002f8 <MX_CRC_Init+0x20>)
 80002e4:	f000 fb75 	bl	80009d2 <HAL_CRC_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80002ee:	f000 f8a2 	bl	8000436 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	200000f0 	.word	0x200000f0
 80002fc:	40023000 	.word	0x40023000

08000300 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000300:	b480      	push	{r7}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <HAL_CRC_MspInit+0x34>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d10b      	bne.n	800032a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_CRC_MspInit+0x38>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a08      	ldr	r2, [pc, #32]	; (8000338 <HAL_CRC_MspInit+0x38>)
 8000318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <HAL_CRC_MspInit+0x38>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40023000 	.word	0x40023000
 8000338:	40021000 	.word	0x40021000

0800033c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000342:	4b0e      	ldr	r3, [pc, #56]	; (800037c <MX_GPIO_Init+0x40>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a0d      	ldr	r2, [pc, #52]	; (800037c <MX_GPIO_Init+0x40>)
 8000348:	f043 0320 	orr.w	r3, r3, #32
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <MX_GPIO_Init+0x40>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0320 	and.w	r3, r3, #32
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b08      	ldr	r3, [pc, #32]	; (800037c <MX_GPIO_Init+0x40>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4a07      	ldr	r2, [pc, #28]	; (800037c <MX_GPIO_Init+0x40>)
 8000360:	f043 0304 	orr.w	r3, r3, #4
 8000364:	6193      	str	r3, [r2, #24]
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <MX_GPIO_Init+0x40>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f003 0304 	and.w	r3, r3, #4
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	683b      	ldr	r3, [r7, #0]

}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	40021000 	.word	0x40021000

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b5b0      	push	{r4, r5, r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000386:	f000 f9df 	bl	8000748 <HAL_Init>

  /* USER CODE BEGIN Init */

  //HAL_StatusTypeDef status = HAL_OK;
  char  start_message[] = "Enter command: \r\n";
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <main+0x3c>)
 800038c:	1d3c      	adds	r4, r7, #4
 800038e:	461d      	mov	r5, r3
 8000390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000394:	682b      	ldr	r3, [r5, #0]
 8000396:	8023      	strh	r3, [r4, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f812 	bl	80003c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f7ff ffce 	bl	800033c <MX_GPIO_Init>
  MX_CRC_Init();
 80003a0:	f7ff ff9a 	bl	80002d8 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80003a4:	f000 f8d2 	bl	800054c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80003a8:	f000 f8fa 	bl	80005a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  BL_Print_Message(start_message);
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff6c 	bl	800028c <BL_Print_Message>
	  BL_fetchHostCommand();
 80003b4:	f7ff feca 	bl	800014c <BL_fetchHostCommand>
	  BL_Print_Message(start_message);
 80003b8:	e7f8      	b.n	80003ac <main+0x2c>
 80003ba:	bf00      	nop
 80003bc:	08002498 	.word	0x08002498

080003c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b090      	sub	sp, #64	; 0x40
 80003c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c6:	f107 0318 	add.w	r3, r7, #24
 80003ca:	2228      	movs	r2, #40	; 0x28
 80003cc:	2100      	movs	r1, #0
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 fb3c 	bl	8001a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	601a      	str	r2, [r3, #0]
 80003da:	605a      	str	r2, [r3, #4]
 80003dc:	609a      	str	r2, [r3, #8]
 80003de:	60da      	str	r2, [r3, #12]
 80003e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003e6:	2301      	movs	r3, #1
 80003e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ea:	2310      	movs	r3, #16
 80003ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ee:	2300      	movs	r3, #0
 80003f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f2:	f107 0318 	add.w	r3, r7, #24
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fc8c 	bl	8000d14 <HAL_RCC_OscConfig>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000402:	f000 f818 	bl	8000436 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000406:	230f      	movs	r3, #15
 8000408:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800040a:	2300      	movs	r3, #0
 800040c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000412:	2300      	movs	r3, #0
 8000414:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000416:	2300      	movs	r3, #0
 8000418:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fefa 	bl	8001218 <HAL_RCC_ClockConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800042a:	f000 f804 	bl	8000436 <Error_Handler>
  }
}
 800042e:	bf00      	nop
 8000430:	3740      	adds	r7, #64	; 0x40
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043a:	b672      	cpsid	i
}
 800043c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043e:	e7fe      	b.n	800043e <Error_Handler+0x8>

08000440 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000446:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <HAL_MspInit+0x40>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a0d      	ldr	r2, [pc, #52]	; (8000480 <HAL_MspInit+0x40>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	6193      	str	r3, [r2, #24]
 8000452:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_MspInit+0x40>)
 8000454:	699b      	ldr	r3, [r3, #24]
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045e:	4b08      	ldr	r3, [pc, #32]	; (8000480 <HAL_MspInit+0x40>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	4a07      	ldr	r2, [pc, #28]	; (8000480 <HAL_MspInit+0x40>)
 8000464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000468:	61d3      	str	r3, [r2, #28]
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <HAL_MspInit+0x40>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <NMI_Handler+0x4>

0800048a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <MemManage_Handler+0x4>

08000496 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049a:	e7fe      	b.n	800049a <BusFault_Handler+0x4>

0800049c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <UsageFault_Handler+0x4>

080004a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr

080004ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr

080004ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c6:	b580      	push	{r7, lr}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ca:	f000 f983 	bl	80007d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b086      	sub	sp, #24
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004dc:	4a14      	ldr	r2, [pc, #80]	; (8000530 <_sbrk+0x5c>)
 80004de:	4b15      	ldr	r3, [pc, #84]	; (8000534 <_sbrk+0x60>)
 80004e0:	1ad3      	subs	r3, r2, r3
 80004e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004e8:	4b13      	ldr	r3, [pc, #76]	; (8000538 <_sbrk+0x64>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d102      	bne.n	80004f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <_sbrk+0x64>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <_sbrk+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <_sbrk+0x64>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	693a      	ldr	r2, [r7, #16]
 8000500:	429a      	cmp	r2, r3
 8000502:	d207      	bcs.n	8000514 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000504:	f001 fa78 	bl	80019f8 <__errno>
 8000508:	4603      	mov	r3, r0
 800050a:	220c      	movs	r2, #12
 800050c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800050e:	f04f 33ff 	mov.w	r3, #4294967295
 8000512:	e009      	b.n	8000528 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <_sbrk+0x64>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800051a:	4b07      	ldr	r3, [pc, #28]	; (8000538 <_sbrk+0x64>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	4a05      	ldr	r2, [pc, #20]	; (8000538 <_sbrk+0x64>)
 8000524:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000526:	68fb      	ldr	r3, [r7, #12]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20005000 	.word	0x20005000
 8000534:	00000400 	.word	0x00000400
 8000538:	200000f8 	.word	0x200000f8
 800053c:	200001a0 	.word	0x200001a0

08000540 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <MX_USART1_UART_Init+0x50>)
 8000554:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800055c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000572:	220c      	movs	r2, #12
 8000574:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000578:	2200      	movs	r2, #0
 800057a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 800057e:	2200      	movs	r2, #0
 8000580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_USART1_UART_Init+0x4c>)
 8000584:	f000 ffd6 	bl	8001534 <HAL_UART_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800058e:	f7ff ff52 	bl	8000436 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000fc 	.word	0x200000fc
 800059c:	40013800 	.word	0x40013800

080005a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005a6:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <MX_USART2_UART_Init+0x50>)
 80005a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	; (80005ec <MX_USART2_UART_Init+0x4c>)
 80005d8:	f000 ffac 	bl	8001534 <HAL_UART_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005e2:	f7ff ff28 	bl	8000436 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000144 	.word	0x20000144
 80005f0:	40004400 	.word	0x40004400

080005f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a37      	ldr	r2, [pc, #220]	; (80006ec <HAL_UART_MspInit+0xf8>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d132      	bne.n	800067a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000614:	4b36      	ldr	r3, [pc, #216]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a35      	ldr	r2, [pc, #212]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b33      	ldr	r3, [pc, #204]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062c:	4b30      	ldr	r3, [pc, #192]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a2f      	ldr	r2, [pc, #188]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f003 0304 	and.w	r3, r3, #4
 8000640:	613b      	str	r3, [r7, #16]
 8000642:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2302      	movs	r3, #2
 800064c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800064e:	2303      	movs	r3, #3
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000652:	f107 0318 	add.w	r3, r7, #24
 8000656:	4619      	mov	r1, r3
 8000658:	4826      	ldr	r0, [pc, #152]	; (80006f4 <HAL_UART_MspInit+0x100>)
 800065a:	f000 f9d7 	bl	8000a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800065e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4619      	mov	r1, r3
 8000672:	4820      	ldr	r0, [pc, #128]	; (80006f4 <HAL_UART_MspInit+0x100>)
 8000674:	f000 f9ca 	bl	8000a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000678:	e034      	b.n	80006e4 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <HAL_UART_MspInit+0x104>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d12f      	bne.n	80006e4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 800068a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800068e:	61d3      	str	r3, [r2, #28]
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 8000692:	69db      	ldr	r3, [r3, #28]
 8000694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_UART_MspInit+0xfc>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0304 	and.w	r3, r3, #4
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006b4:	2304      	movs	r3, #4
 80006b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c0:	f107 0318 	add.w	r3, r7, #24
 80006c4:	4619      	mov	r1, r3
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <HAL_UART_MspInit+0x100>)
 80006c8:	f000 f9a0 	bl	8000a0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006cc:	2308      	movs	r3, #8
 80006ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0318 	add.w	r3, r7, #24
 80006dc:	4619      	mov	r1, r3
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <HAL_UART_MspInit+0x100>)
 80006e0:	f000 f994 	bl	8000a0c <HAL_GPIO_Init>
}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40013800 	.word	0x40013800
 80006f0:	40021000 	.word	0x40021000
 80006f4:	40010800 	.word	0x40010800
 80006f8:	40004400 	.word	0x40004400

080006fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006fc:	f7ff ff20 	bl	8000540 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000702:	490c      	ldr	r1, [pc, #48]	; (8000734 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000704:	4a0c      	ldr	r2, [pc, #48]	; (8000738 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000708:	e002      	b.n	8000710 <LoopCopyDataInit>

0800070a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800070c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800070e:	3304      	adds	r3, #4

08000710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000714:	d3f9      	bcc.n	800070a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000716:	4a09      	ldr	r2, [pc, #36]	; (800073c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000718:	4c09      	ldr	r4, [pc, #36]	; (8000740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800071a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800071c:	e001      	b.n	8000722 <LoopFillZerobss>

0800071e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800071e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000720:	3204      	adds	r2, #4

08000722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000724:	d3fb      	bcc.n	800071e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000726:	f001 f96d 	bl	8001a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800072a:	f7ff fe29 	bl	8000380 <main>
  bx lr
 800072e:	4770      	bx	lr
  ldr r0, =_sdata
 8000730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000734:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000738:	08002514 	.word	0x08002514
  ldr r2, =_sbss
 800073c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000740:	200001a0 	.word	0x200001a0

08000744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000744:	e7fe      	b.n	8000744 <ADC1_2_IRQHandler>
	...

08000748 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <HAL_Init+0x28>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a07      	ldr	r2, [pc, #28]	; (8000770 <HAL_Init+0x28>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000758:	2003      	movs	r0, #3
 800075a:	f000 f907 	bl	800096c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075e:	200f      	movs	r0, #15
 8000760:	f000 f808 	bl	8000774 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000764:	f7ff fe6c 	bl	8000440 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40022000 	.word	0x40022000

08000774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x54>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <HAL_InitTick+0x58>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078a:	fbb3 f3f1 	udiv	r3, r3, r1
 800078e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	f000 f911 	bl	80009ba <HAL_SYSTICK_Config>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e00e      	b.n	80007c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b0f      	cmp	r3, #15
 80007a6:	d80a      	bhi.n	80007be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a8:	2200      	movs	r2, #0
 80007aa:	6879      	ldr	r1, [r7, #4]
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f000 f8e7 	bl	8000982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b4:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_InitTick+0x5c>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e000      	b.n	80007c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000004 	.word	0x20000004

080007d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x1c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	461a      	mov	r2, r3
 80007de:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <HAL_IncTick+0x20>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	4a03      	ldr	r2, [pc, #12]	; (80007f4 <HAL_IncTick+0x20>)
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	20000008 	.word	0x20000008
 80007f4:	2000018c 	.word	0x2000018c

080007f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return uwTick;
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <HAL_GetTick+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
}
 8000800:	4618      	mov	r0, r3
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	2000018c 	.word	0x2000018c

0800080c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_GetPriorityGrouping+0x18>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	f003 0307 	and.w	r3, r3, #7
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	6039      	str	r1, [r7, #0]
 800087a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db0a      	blt.n	800089a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2da      	uxtb	r2, r3
 8000888:	490c      	ldr	r1, [pc, #48]	; (80008bc <__NVIC_SetPriority+0x4c>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	0112      	lsls	r2, r2, #4
 8000890:	b2d2      	uxtb	r2, r2
 8000892:	440b      	add	r3, r1
 8000894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000898:	e00a      	b.n	80008b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	b2da      	uxtb	r2, r3
 800089e:	4908      	ldr	r1, [pc, #32]	; (80008c0 <__NVIC_SetPriority+0x50>)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	3b04      	subs	r3, #4
 80008a8:	0112      	lsls	r2, r2, #4
 80008aa:	b2d2      	uxtb	r2, r2
 80008ac:	440b      	add	r3, r1
 80008ae:	761a      	strb	r2, [r3, #24]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e100 	.word	0xe000e100
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b089      	sub	sp, #36	; 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	f1c3 0307 	rsb	r3, r3, #7
 80008de:	2b04      	cmp	r3, #4
 80008e0:	bf28      	it	cs
 80008e2:	2304      	movcs	r3, #4
 80008e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	3304      	adds	r3, #4
 80008ea:	2b06      	cmp	r3, #6
 80008ec:	d902      	bls.n	80008f4 <NVIC_EncodePriority+0x30>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	3b03      	subs	r3, #3
 80008f2:	e000      	b.n	80008f6 <NVIC_EncodePriority+0x32>
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f8:	f04f 32ff 	mov.w	r2, #4294967295
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43da      	mvns	r2, r3
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	401a      	ands	r2, r3
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800090c:	f04f 31ff 	mov.w	r1, #4294967295
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43d9      	mvns	r1, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	4313      	orrs	r3, r2
         );
}
 800091e:	4618      	mov	r0, r3
 8000920:	3724      	adds	r7, #36	; 0x24
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000938:	d301      	bcc.n	800093e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800093a:	2301      	movs	r3, #1
 800093c:	e00f      	b.n	800095e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800093e:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <SysTick_Config+0x40>)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000946:	210f      	movs	r1, #15
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	f7ff ff90 	bl	8000870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <SysTick_Config+0x40>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000956:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SysTick_Config+0x40>)
 8000958:	2207      	movs	r2, #7
 800095a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800095c:	2300      	movs	r3, #0
}
 800095e:	4618      	mov	r0, r3
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff ff49 	bl	800080c <__NVIC_SetPriorityGrouping>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000982:	b580      	push	{r7, lr}
 8000984:	b086      	sub	sp, #24
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
 800098e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000994:	f7ff ff5e 	bl	8000854 <__NVIC_GetPriorityGrouping>
 8000998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	68b9      	ldr	r1, [r7, #8]
 800099e:	6978      	ldr	r0, [r7, #20]
 80009a0:	f7ff ff90 	bl	80008c4 <NVIC_EncodePriority>
 80009a4:	4602      	mov	r2, r0
 80009a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009aa:	4611      	mov	r1, r2
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff5f 	bl	8000870 <__NVIC_SetPriority>
}
 80009b2:	bf00      	nop
 80009b4:	3718      	adds	r7, #24
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffb0 	bl	8000928 <SysTick_Config>
 80009c8:	4603      	mov	r3, r0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b082      	sub	sp, #8
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d101      	bne.n	80009e4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e00e      	b.n	8000a02 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	795b      	ldrb	r3, [r3, #5]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d105      	bne.n	80009fa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2200      	movs	r2, #0
 80009f2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff fc83 	bl	8000300 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2201      	movs	r2, #1
 80009fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1e:	e169      	b.n	8000cf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a20:	2201      	movs	r2, #1
 8000a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	69fa      	ldr	r2, [r7, #28]
 8000a30:	4013      	ands	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	f040 8158 	bne.w	8000cee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4a9a      	ldr	r2, [pc, #616]	; (8000cac <HAL_GPIO_Init+0x2a0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d05e      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a48:	4a98      	ldr	r2, [pc, #608]	; (8000cac <HAL_GPIO_Init+0x2a0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d875      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a4e:	4a98      	ldr	r2, [pc, #608]	; (8000cb0 <HAL_GPIO_Init+0x2a4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d058      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a54:	4a96      	ldr	r2, [pc, #600]	; (8000cb0 <HAL_GPIO_Init+0x2a4>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d86f      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a5a:	4a96      	ldr	r2, [pc, #600]	; (8000cb4 <HAL_GPIO_Init+0x2a8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d052      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a60:	4a94      	ldr	r2, [pc, #592]	; (8000cb4 <HAL_GPIO_Init+0x2a8>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d869      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a66:	4a94      	ldr	r2, [pc, #592]	; (8000cb8 <HAL_GPIO_Init+0x2ac>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d04c      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a6c:	4a92      	ldr	r2, [pc, #584]	; (8000cb8 <HAL_GPIO_Init+0x2ac>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d863      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a72:	4a92      	ldr	r2, [pc, #584]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d046      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a78:	4a90      	ldr	r2, [pc, #576]	; (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d85d      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a7e:	2b12      	cmp	r3, #18
 8000a80:	d82a      	bhi.n	8000ad8 <HAL_GPIO_Init+0xcc>
 8000a82:	2b12      	cmp	r3, #18
 8000a84:	d859      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a86:	a201      	add	r2, pc, #4	; (adr r2, 8000a8c <HAL_GPIO_Init+0x80>)
 8000a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8c:	08000b07 	.word	0x08000b07
 8000a90:	08000ae1 	.word	0x08000ae1
 8000a94:	08000af3 	.word	0x08000af3
 8000a98:	08000b35 	.word	0x08000b35
 8000a9c:	08000b3b 	.word	0x08000b3b
 8000aa0:	08000b3b 	.word	0x08000b3b
 8000aa4:	08000b3b 	.word	0x08000b3b
 8000aa8:	08000b3b 	.word	0x08000b3b
 8000aac:	08000b3b 	.word	0x08000b3b
 8000ab0:	08000b3b 	.word	0x08000b3b
 8000ab4:	08000b3b 	.word	0x08000b3b
 8000ab8:	08000b3b 	.word	0x08000b3b
 8000abc:	08000b3b 	.word	0x08000b3b
 8000ac0:	08000b3b 	.word	0x08000b3b
 8000ac4:	08000b3b 	.word	0x08000b3b
 8000ac8:	08000b3b 	.word	0x08000b3b
 8000acc:	08000b3b 	.word	0x08000b3b
 8000ad0:	08000ae9 	.word	0x08000ae9
 8000ad4:	08000afd 	.word	0x08000afd
 8000ad8:	4a79      	ldr	r2, [pc, #484]	; (8000cc0 <HAL_GPIO_Init+0x2b4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ade:	e02c      	b.n	8000b3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e029      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	3304      	adds	r3, #4
 8000aee:	623b      	str	r3, [r7, #32]
          break;
 8000af0:	e024      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	3308      	adds	r3, #8
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e01f      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	330c      	adds	r3, #12
 8000b02:	623b      	str	r3, [r7, #32]
          break;
 8000b04:	e01a      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	623b      	str	r3, [r7, #32]
          break;
 8000b12:	e013      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d105      	bne.n	8000b28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	611a      	str	r2, [r3, #16]
          break;
 8000b26:	e009      	b.n	8000b3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	615a      	str	r2, [r3, #20]
          break;
 8000b32:	e003      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
          break;
 8000b38:	e000      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          break;
 8000b3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	2bff      	cmp	r3, #255	; 0xff
 8000b40:	d801      	bhi.n	8000b46 <HAL_GPIO_Init+0x13a>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	e001      	b.n	8000b4a <HAL_GPIO_Init+0x13e>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	2bff      	cmp	r3, #255	; 0xff
 8000b50:	d802      	bhi.n	8000b58 <HAL_GPIO_Init+0x14c>
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x152>
 8000b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5a:	3b08      	subs	r3, #8
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	210f      	movs	r1, #15
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	401a      	ands	r2, r3
 8000b70:	6a39      	ldr	r1, [r7, #32]
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 80b1 	beq.w	8000cee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8c:	4b4d      	ldr	r3, [pc, #308]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a4c      	ldr	r2, [pc, #304]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b4a      	ldr	r3, [pc, #296]	; (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba4:	4a48      	ldr	r2, [pc, #288]	; (8000cc8 <HAL_GPIO_Init+0x2bc>)
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3302      	adds	r3, #2
 8000bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <HAL_GPIO_Init+0x2c0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d013      	beq.n	8000bf8 <HAL_GPIO_Init+0x1ec>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a3f      	ldr	r2, [pc, #252]	; (8000cd0 <HAL_GPIO_Init+0x2c4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d00d      	beq.n	8000bf4 <HAL_GPIO_Init+0x1e8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a3e      	ldr	r2, [pc, #248]	; (8000cd4 <HAL_GPIO_Init+0x2c8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e4>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a3d      	ldr	r2, [pc, #244]	; (8000cd8 <HAL_GPIO_Init+0x2cc>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d101      	bne.n	8000bec <HAL_GPIO_Init+0x1e0>
 8000be8:	2303      	movs	r3, #3
 8000bea:	e006      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e004      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bfc:	f002 0203 	and.w	r2, r2, #3
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c0a:	492f      	ldr	r1, [pc, #188]	; (8000cc8 <HAL_GPIO_Init+0x2bc>)
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3302      	adds	r3, #2
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c24:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	492c      	ldr	r1, [pc, #176]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	608b      	str	r3, [r1, #8]
 8000c30:	e006      	b.n	8000c40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	4928      	ldr	r1, [pc, #160]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	4922      	ldr	r1, [pc, #136]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60cb      	str	r3, [r1, #12]
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	491e      	ldr	r1, [pc, #120]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	4918      	ldr	r1, [pc, #96]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	604b      	str	r3, [r1, #4]
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4914      	ldr	r1, [pc, #80]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d021      	beq.n	8000ce0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	490e      	ldr	r1, [pc, #56]	; (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	600b      	str	r3, [r1, #0]
 8000ca8:	e021      	b.n	8000cee <HAL_GPIO_Init+0x2e2>
 8000caa:	bf00      	nop
 8000cac:	10320000 	.word	0x10320000
 8000cb0:	10310000 	.word	0x10310000
 8000cb4:	10220000 	.word	0x10220000
 8000cb8:	10210000 	.word	0x10210000
 8000cbc:	10120000 	.word	0x10120000
 8000cc0:	10110000 	.word	0x10110000
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40011400 	.word	0x40011400
 8000cdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <HAL_GPIO_Init+0x304>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4909      	ldr	r1, [pc, #36]	; (8000d10 <HAL_GPIO_Init+0x304>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f47f ae8e 	bne.w	8000a20 <HAL_GPIO_Init+0x14>
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	372c      	adds	r7, #44	; 0x2c
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40010400 	.word	0x40010400

08000d14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e272      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 8087 	beq.w	8000e42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d34:	4b92      	ldr	r3, [pc, #584]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d00c      	beq.n	8000d5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d40:	4b8f      	ldr	r3, [pc, #572]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 030c 	and.w	r3, r3, #12
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d112      	bne.n	8000d72 <HAL_RCC_OscConfig+0x5e>
 8000d4c:	4b8c      	ldr	r3, [pc, #560]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d58:	d10b      	bne.n	8000d72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5a:	4b89      	ldr	r3, [pc, #548]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d06c      	beq.n	8000e40 <HAL_RCC_OscConfig+0x12c>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d168      	bne.n	8000e40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e24c      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d7a:	d106      	bne.n	8000d8a <HAL_RCC_OscConfig+0x76>
 8000d7c:	4b80      	ldr	r3, [pc, #512]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a7f      	ldr	r2, [pc, #508]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	e02e      	b.n	8000de8 <HAL_RCC_OscConfig+0xd4>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10c      	bne.n	8000dac <HAL_RCC_OscConfig+0x98>
 8000d92:	4b7b      	ldr	r3, [pc, #492]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a7a      	ldr	r2, [pc, #488]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	4b78      	ldr	r3, [pc, #480]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a77      	ldr	r2, [pc, #476]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e01d      	b.n	8000de8 <HAL_RCC_OscConfig+0xd4>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000db4:	d10c      	bne.n	8000dd0 <HAL_RCC_OscConfig+0xbc>
 8000db6:	4b72      	ldr	r3, [pc, #456]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a71      	ldr	r2, [pc, #452]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	4b6f      	ldr	r3, [pc, #444]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a6e      	ldr	r2, [pc, #440]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e00b      	b.n	8000de8 <HAL_RCC_OscConfig+0xd4>
 8000dd0:	4b6b      	ldr	r3, [pc, #428]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a6a      	ldr	r2, [pc, #424]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b68      	ldr	r3, [pc, #416]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a67      	ldr	r2, [pc, #412]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000de6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d013      	beq.n	8000e18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df0:	f7ff fd02 	bl	80007f8 <HAL_GetTick>
 8000df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df6:	e008      	b.n	8000e0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df8:	f7ff fcfe 	bl	80007f8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	2b64      	cmp	r3, #100	; 0x64
 8000e04:	d901      	bls.n	8000e0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e200      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e0a:	4b5d      	ldr	r3, [pc, #372]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d0f0      	beq.n	8000df8 <HAL_RCC_OscConfig+0xe4>
 8000e16:	e014      	b.n	8000e42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fcee 	bl	80007f8 <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e20:	f7ff fcea 	bl	80007f8 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b64      	cmp	r3, #100	; 0x64
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e1ec      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e32:	4b53      	ldr	r3, [pc, #332]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f0      	bne.n	8000e20 <HAL_RCC_OscConfig+0x10c>
 8000e3e:	e000      	b.n	8000e42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d063      	beq.n	8000f16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e4e:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 030c 	and.w	r3, r3, #12
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00b      	beq.n	8000e72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e5a:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d11c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x18c>
 8000e66:	4b46      	ldr	r3, [pc, #280]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d116      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e72:	4b43      	ldr	r3, [pc, #268]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d005      	beq.n	8000e8a <HAL_RCC_OscConfig+0x176>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	691b      	ldr	r3, [r3, #16]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d001      	beq.n	8000e8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e1c0      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	4939      	ldr	r1, [pc, #228]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e9e:	e03a      	b.n	8000f16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d020      	beq.n	8000eea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ea8:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <HAL_RCC_OscConfig+0x270>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eae:	f7ff fca3 	bl	80007f8 <HAL_GetTick>
 8000eb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eb4:	e008      	b.n	8000ec8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb6:	f7ff fc9f 	bl	80007f8 <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e1a1      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ec8:	4b2d      	ldr	r3, [pc, #180]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d0f0      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	4927      	ldr	r1, [pc, #156]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	600b      	str	r3, [r1, #0]
 8000ee8:	e015      	b.n	8000f16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <HAL_RCC_OscConfig+0x270>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef0:	f7ff fc82 	bl	80007f8 <HAL_GetTick>
 8000ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef6:	e008      	b.n	8000f0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef8:	f7ff fc7e 	bl	80007f8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e180      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d1f0      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d03a      	beq.n	8000f98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d019      	beq.n	8000f5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <HAL_RCC_OscConfig+0x274>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f30:	f7ff fc62 	bl	80007f8 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f36:	e008      	b.n	8000f4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f38:	f7ff fc5e 	bl	80007f8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e160      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f000 face 	bl	80014f8 <RCC_Delay>
 8000f5c:	e01c      	b.n	8000f98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_RCC_OscConfig+0x274>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f64:	f7ff fc48 	bl	80007f8 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f6a:	e00f      	b.n	8000f8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f6c:	f7ff fc44 	bl	80007f8 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d908      	bls.n	8000f8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e146      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	42420000 	.word	0x42420000
 8000f88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f8c:	4b92      	ldr	r3, [pc, #584]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1e9      	bne.n	8000f6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	f000 80a6 	beq.w	80010f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000faa:	4b8b      	ldr	r3, [pc, #556]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10d      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	4b88      	ldr	r3, [pc, #544]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a87      	ldr	r2, [pc, #540]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]
 8000fc2:	4b85      	ldr	r3, [pc, #532]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd2:	4b82      	ldr	r3, [pc, #520]	; (80011dc <HAL_RCC_OscConfig+0x4c8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d118      	bne.n	8001010 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fde:	4b7f      	ldr	r3, [pc, #508]	; (80011dc <HAL_RCC_OscConfig+0x4c8>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a7e      	ldr	r2, [pc, #504]	; (80011dc <HAL_RCC_OscConfig+0x4c8>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fea:	f7ff fc05 	bl	80007f8 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ff2:	f7ff fc01 	bl	80007f8 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b64      	cmp	r3, #100	; 0x64
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e103      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001004:	4b75      	ldr	r3, [pc, #468]	; (80011dc <HAL_RCC_OscConfig+0x4c8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d106      	bne.n	8001026 <HAL_RCC_OscConfig+0x312>
 8001018:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4a6e      	ldr	r2, [pc, #440]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6213      	str	r3, [r2, #32]
 8001024:	e02d      	b.n	8001082 <HAL_RCC_OscConfig+0x36e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10c      	bne.n	8001048 <HAL_RCC_OscConfig+0x334>
 800102e:	4b6a      	ldr	r3, [pc, #424]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a69      	ldr	r2, [pc, #420]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	4b67      	ldr	r3, [pc, #412]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	4a66      	ldr	r2, [pc, #408]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	f023 0304 	bic.w	r3, r3, #4
 8001044:	6213      	str	r3, [r2, #32]
 8001046:	e01c      	b.n	8001082 <HAL_RCC_OscConfig+0x36e>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	2b05      	cmp	r3, #5
 800104e:	d10c      	bne.n	800106a <HAL_RCC_OscConfig+0x356>
 8001050:	4b61      	ldr	r3, [pc, #388]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	4a60      	ldr	r2, [pc, #384]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	6213      	str	r3, [r2, #32]
 800105c:	4b5e      	ldr	r3, [pc, #376]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800105e:	6a1b      	ldr	r3, [r3, #32]
 8001060:	4a5d      	ldr	r2, [pc, #372]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6213      	str	r3, [r2, #32]
 8001068:	e00b      	b.n	8001082 <HAL_RCC_OscConfig+0x36e>
 800106a:	4b5b      	ldr	r3, [pc, #364]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a5a      	ldr	r2, [pc, #360]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b58      	ldr	r3, [pc, #352]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a57      	ldr	r2, [pc, #348]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d015      	beq.n	80010b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fbb5 	bl	80007f8 <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff fbb1 	bl	80007f8 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e0b1      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010a8:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0ee      	beq.n	8001092 <HAL_RCC_OscConfig+0x37e>
 80010b4:	e014      	b.n	80010e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010b6:	f7ff fb9f 	bl	80007f8 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010bc:	e00a      	b.n	80010d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010be:	f7ff fb9b 	bl	80007f8 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e09b      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010d4:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	f003 0302 	and.w	r3, r3, #2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1ee      	bne.n	80010be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010e0:	7dfb      	ldrb	r3, [r7, #23]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d105      	bne.n	80010f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e6:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	4a3b      	ldr	r2, [pc, #236]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69db      	ldr	r3, [r3, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8087 	beq.w	800120a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010fc:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b08      	cmp	r3, #8
 8001106:	d061      	beq.n	80011cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d146      	bne.n	800119e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <HAL_RCC_OscConfig+0x4cc>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fb6f 	bl	80007f8 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111e:	f7ff fb6b 	bl	80007f8 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e06d      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001130:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f0      	bne.n	800111e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001144:	d108      	bne.n	8001158 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	4921      	ldr	r1, [pc, #132]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001154:	4313      	orrs	r3, r2
 8001156:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a19      	ldr	r1, [r3, #32]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	430b      	orrs	r3, r1
 800116a:	491b      	ldr	r1, [pc, #108]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <HAL_RCC_OscConfig+0x4cc>)
 8001172:	2201      	movs	r2, #1
 8001174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001176:	f7ff fb3f 	bl	80007f8 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800117c:	e008      	b.n	8001190 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117e:	f7ff fb3b 	bl	80007f8 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d901      	bls.n	8001190 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e03d      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f0      	beq.n	800117e <HAL_RCC_OscConfig+0x46a>
 800119c:	e035      	b.n	800120a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <HAL_RCC_OscConfig+0x4cc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fb28 	bl	80007f8 <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ac:	f7ff fb24 	bl	80007f8 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e026      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0x498>
 80011ca:	e01e      	b.n	800120a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d107      	bne.n	80011e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e019      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40007000 	.word	0x40007000
 80011e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_RCC_OscConfig+0x500>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001202:	429a      	cmp	r2, r3
 8001204:	d001      	beq.n	800120a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0d0      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800122c:	4b6a      	ldr	r3, [pc, #424]	; (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	429a      	cmp	r2, r3
 8001238:	d910      	bls.n	800125c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123a:	4b67      	ldr	r3, [pc, #412]	; (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 0207 	bic.w	r2, r3, #7
 8001242:	4965      	ldr	r1, [pc, #404]	; (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	4313      	orrs	r3, r2
 8001248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800124a:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d001      	beq.n	800125c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0b8      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d020      	beq.n	80012aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001274:	4b59      	ldr	r3, [pc, #356]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4a58      	ldr	r2, [pc, #352]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800127e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128c:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4a52      	ldr	r2, [pc, #328]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001296:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001298:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	494d      	ldr	r1, [pc, #308]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d040      	beq.n	8001338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d107      	bne.n	80012ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b47      	ldr	r3, [pc, #284]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d115      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e07f      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d107      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d6:	4b41      	ldr	r3, [pc, #260]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d109      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e073      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e6:	4b3d      	ldr	r3, [pc, #244]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e06b      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012f6:	4b39      	ldr	r3, [pc, #228]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f023 0203 	bic.w	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	4936      	ldr	r1, [pc, #216]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001308:	f7ff fa76 	bl	80007f8 <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130e:	e00a      	b.n	8001326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001310:	f7ff fa72 	bl	80007f8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f241 3288 	movw	r2, #5000	; 0x1388
 800131e:	4293      	cmp	r3, r2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e053      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 020c 	and.w	r2, r3, #12
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	429a      	cmp	r2, r3
 8001336:	d1eb      	bne.n	8001310 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001338:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	429a      	cmp	r2, r3
 8001344:	d210      	bcs.n	8001368 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 0207 	bic.w	r2, r3, #7
 800134e:	4922      	ldr	r1, [pc, #136]	; (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0307 	and.w	r3, r3, #7
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e032      	b.n	80013ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d008      	beq.n	8001386 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	4916      	ldr	r1, [pc, #88]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	4313      	orrs	r3, r2
 8001384:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d009      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	490e      	ldr	r1, [pc, #56]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013a6:	f000 f821 	bl	80013ec <HAL_RCC_GetSysClockFreq>
 80013aa:	4602      	mov	r2, r0
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_ClockConfig+0x1c4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	091b      	lsrs	r3, r3, #4
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	490a      	ldr	r1, [pc, #40]	; (80013e0 <HAL_RCC_ClockConfig+0x1c8>)
 80013b8:	5ccb      	ldrb	r3, [r1, r3]
 80013ba:	fa22 f303 	lsr.w	r3, r2, r3
 80013be:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_RCC_ClockConfig+0x1cc>)
 80013c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_RCC_ClockConfig+0x1d0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f9d4 	bl	8000774 <HAL_InitTick>

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40022000 	.word	0x40022000
 80013dc:	40021000 	.word	0x40021000
 80013e0:	080024ac 	.word	0x080024ac
 80013e4:	20000000 	.word	0x20000000
 80013e8:	20000004 	.word	0x20000004

080013ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001406:	4b1e      	ldr	r3, [pc, #120]	; (8001480 <HAL_RCC_GetSysClockFreq+0x94>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b04      	cmp	r3, #4
 8001414:	d002      	beq.n	800141c <HAL_RCC_GetSysClockFreq+0x30>
 8001416:	2b08      	cmp	r3, #8
 8001418:	d003      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0x36>
 800141a:	e027      	b.n	800146c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800141c:	4b19      	ldr	r3, [pc, #100]	; (8001484 <HAL_RCC_GetSysClockFreq+0x98>)
 800141e:	613b      	str	r3, [r7, #16]
      break;
 8001420:	e027      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	0c9b      	lsrs	r3, r3, #18
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	4a17      	ldr	r2, [pc, #92]	; (8001488 <HAL_RCC_GetSysClockFreq+0x9c>)
 800142c:	5cd3      	ldrb	r3, [r2, r3]
 800142e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d010      	beq.n	800145c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_RCC_GetSysClockFreq+0x94>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	0c5b      	lsrs	r3, r3, #17
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <HAL_RCC_GetSysClockFreq+0x98>)
 800144e:	fb03 f202 	mul.w	r2, r3, r2
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	fbb2 f3f3 	udiv	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e004      	b.n	8001466 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a0c      	ldr	r2, [pc, #48]	; (8001490 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	613b      	str	r3, [r7, #16]
      break;
 800146a:	e002      	b.n	8001472 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_RCC_GetSysClockFreq+0x98>)
 800146e:	613b      	str	r3, [r7, #16]
      break;
 8001470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001472:	693b      	ldr	r3, [r7, #16]
}
 8001474:	4618      	mov	r0, r3
 8001476:	371c      	adds	r7, #28
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40021000 	.word	0x40021000
 8001484:	007a1200 	.word	0x007a1200
 8001488:	080024c4 	.word	0x080024c4
 800148c:	080024d4 	.word	0x080024d4
 8001490:	003d0900 	.word	0x003d0900

08001494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001498:	4b02      	ldr	r3, [pc, #8]	; (80014a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000000 	.word	0x20000000

080014a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014ac:	f7ff fff2 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	4903      	ldr	r1, [pc, #12]	; (80014cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014be:	5ccb      	ldrb	r3, [r1, r3]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021000 	.word	0x40021000
 80014cc:	080024bc 	.word	0x080024bc

080014d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014d4:	f7ff ffde 	bl	8001494 <HAL_RCC_GetHCLKFreq>
 80014d8:	4602      	mov	r2, r0
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	0adb      	lsrs	r3, r3, #11
 80014e0:	f003 0307 	and.w	r3, r3, #7
 80014e4:	4903      	ldr	r1, [pc, #12]	; (80014f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014e6:	5ccb      	ldrb	r3, [r1, r3]
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40021000 	.word	0x40021000
 80014f4:	080024bc 	.word	0x080024bc

080014f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <RCC_Delay+0x34>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <RCC_Delay+0x38>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	0a5b      	lsrs	r3, r3, #9
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001514:	bf00      	nop
  }
  while (Delay --);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1e5a      	subs	r2, r3, #1
 800151a:	60fa      	str	r2, [r7, #12]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1f9      	bne.n	8001514 <RCC_Delay+0x1c>
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	20000000 	.word	0x20000000
 8001530:	10624dd3 	.word	0x10624dd3

08001534 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e042      	b.n	80015cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f7ff f84a 	bl	80005f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2224      	movs	r2, #36	; 0x24
 8001564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001576:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f9af 	bl	80018dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	691a      	ldr	r2, [r3, #16]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800158c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695a      	ldr	r2, [r3, #20]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800159c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2220      	movs	r2, #32
 80015c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af02      	add	r7, sp, #8
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	4613      	mov	r3, r2
 80015e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	d16d      	bne.n	80016d0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d002      	beq.n	8001600 <HAL_UART_Transmit+0x2c>
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e066      	b.n	80016d2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2221      	movs	r2, #33	; 0x21
 800160e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001612:	f7ff f8f1 	bl	80007f8 <HAL_GetTick>
 8001616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	88fa      	ldrh	r2, [r7, #6]
 800161c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	88fa      	ldrh	r2, [r7, #6]
 8001622:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800162c:	d108      	bne.n	8001640 <HAL_UART_Transmit+0x6c>
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d104      	bne.n	8001640 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	61bb      	str	r3, [r7, #24]
 800163e:	e003      	b.n	8001648 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001648:	e02a      	b.n	80016a0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2200      	movs	r2, #0
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 f8d2 	bl	80017fe <UART_WaitOnFlagUntilTimeout>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e036      	b.n	80016d2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10b      	bne.n	8001682 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001678:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	3302      	adds	r3, #2
 800167e:	61bb      	str	r3, [r7, #24]
 8001680:	e007      	b.n	8001692 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	781a      	ldrb	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	3301      	adds	r3, #1
 8001690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001696:	b29b      	uxth	r3, r3
 8001698:	3b01      	subs	r3, #1
 800169a:	b29a      	uxth	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1cf      	bne.n	800164a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2200      	movs	r2, #0
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f000 f8a2 	bl	80017fe <UART_WaitOnFlagUntilTimeout>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e006      	b.n	80016d2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2220      	movs	r2, #32
 80016c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	e000      	b.n	80016d2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80016d0:	2302      	movs	r3, #2
  }
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b08a      	sub	sp, #40	; 0x28
 80016de:	af02      	add	r7, sp, #8
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	603b      	str	r3, [r7, #0]
 80016e6:	4613      	mov	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b20      	cmp	r3, #32
 80016f8:	d17c      	bne.n	80017f4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d002      	beq.n	8001706 <HAL_UART_Receive+0x2c>
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e075      	b.n	80017f6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2222      	movs	r2, #34	; 0x22
 8001714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800171e:	f7ff f86b 	bl	80007f8 <HAL_GetTick>
 8001722:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	88fa      	ldrh	r2, [r7, #6]
 8001728:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	88fa      	ldrh	r2, [r7, #6]
 800172e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001738:	d108      	bne.n	800174c <HAL_UART_Receive+0x72>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d104      	bne.n	800174c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	61bb      	str	r3, [r7, #24]
 800174a:	e003      	b.n	8001754 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001754:	e043      	b.n	80017de <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	2120      	movs	r1, #32
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f000 f84c 	bl	80017fe <UART_WaitOnFlagUntilTimeout>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e042      	b.n	80017f6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	b29b      	uxth	r3, r3
 800177e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001782:	b29a      	uxth	r2, r3
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	3302      	adds	r3, #2
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	e01f      	b.n	80017d0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001798:	d007      	beq.n	80017aa <HAL_UART_Receive+0xd0>
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10a      	bne.n	80017b8 <HAL_UART_Receive+0xde>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	701a      	strb	r2, [r3, #0]
 80017b6:	e008      	b.n	80017ca <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3301      	adds	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	3b01      	subs	r3, #1
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1b6      	bne.n	8001756 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2220      	movs	r2, #32
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e000      	b.n	80017f6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80017f4:	2302      	movs	r3, #2
  }
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3720      	adds	r7, #32
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b090      	sub	sp, #64	; 0x40
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4613      	mov	r3, r2
 800180c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800180e:	e050      	b.n	80018b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001816:	d04c      	beq.n	80018b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <UART_WaitOnFlagUntilTimeout+0x30>
 800181e:	f7fe ffeb 	bl	80007f8 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800182a:	429a      	cmp	r2, r3
 800182c:	d241      	bcs.n	80018b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	330c      	adds	r3, #12
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001838:	e853 3f00 	ldrex	r3, [r3]
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001844:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	330c      	adds	r3, #12
 800184c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800184e:	637a      	str	r2, [r7, #52]	; 0x34
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001852:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001856:	e841 2300 	strex	r3, r2, [r1]
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1e5      	bne.n	800182e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	3314      	adds	r3, #20
 8001868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	e853 3f00 	ldrex	r3, [r3]
 8001870:	613b      	str	r3, [r7, #16]
   return(result);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3314      	adds	r3, #20
 8001880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001882:	623a      	str	r2, [r7, #32]
 8001884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001886:	69f9      	ldr	r1, [r7, #28]
 8001888:	6a3a      	ldr	r2, [r7, #32]
 800188a:	e841 2300 	strex	r3, r2, [r1]
 800188e:	61bb      	str	r3, [r7, #24]
   return(result);
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1e5      	bne.n	8001862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2220      	movs	r2, #32
 80018a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e00f      	b.n	80018d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4013      	ands	r3, r2
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	429a      	cmp	r2, r3
 80018c0:	bf0c      	ite	eq
 80018c2:	2301      	moveq	r3, #1
 80018c4:	2300      	movne	r3, #0
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d09f      	beq.n	8001810 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3740      	adds	r7, #64	; 0x40
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	68da      	ldr	r2, [r3, #12]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	4313      	orrs	r3, r2
 800190a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001916:	f023 030c 	bic.w	r3, r3, #12
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	430b      	orrs	r3, r1
 8001922:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699a      	ldr	r2, [r3, #24]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a2c      	ldr	r2, [pc, #176]	; (80019f0 <UART_SetConfig+0x114>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d103      	bne.n	800194c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001944:	f7ff fdc4 	bl	80014d0 <HAL_RCC_GetPCLK2Freq>
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	e002      	b.n	8001952 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800194c:	f7ff fdac 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 8001950:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	009a      	lsls	r2, r3, #2
 800195c:	441a      	add	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <UART_SetConfig+0x118>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	0119      	lsls	r1, r3, #4
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	009a      	lsls	r2, r3, #2
 800197c:	441a      	add	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fbb2 f2f3 	udiv	r2, r2, r3
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <UART_SetConfig+0x118>)
 800198a:	fba3 0302 	umull	r0, r3, r3, r2
 800198e:	095b      	lsrs	r3, r3, #5
 8001990:	2064      	movs	r0, #100	; 0x64
 8001992:	fb00 f303 	mul.w	r3, r0, r3
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	3332      	adds	r3, #50	; 0x32
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <UART_SetConfig+0x118>)
 800199e:	fba2 2303 	umull	r2, r3, r2, r3
 80019a2:	095b      	lsrs	r3, r3, #5
 80019a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a8:	4419      	add	r1, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009a      	lsls	r2, r3, #2
 80019b4:	441a      	add	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <UART_SetConfig+0x118>)
 80019c2:	fba3 0302 	umull	r0, r3, r3, r2
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2064      	movs	r0, #100	; 0x64
 80019ca:	fb00 f303 	mul.w	r3, r0, r3
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	3332      	adds	r3, #50	; 0x32
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <UART_SetConfig+0x118>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	f003 020f 	and.w	r2, r3, #15
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	440a      	add	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80019e8:	bf00      	nop
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40013800 	.word	0x40013800
 80019f4:	51eb851f 	.word	0x51eb851f

080019f8 <__errno>:
 80019f8:	4b01      	ldr	r3, [pc, #4]	; (8001a00 <__errno+0x8>)
 80019fa:	6818      	ldr	r0, [r3, #0]
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	2000000c 	.word	0x2000000c

08001a04 <__libc_init_array>:
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	2600      	movs	r6, #0
 8001a08:	4d0c      	ldr	r5, [pc, #48]	; (8001a3c <__libc_init_array+0x38>)
 8001a0a:	4c0d      	ldr	r4, [pc, #52]	; (8001a40 <__libc_init_array+0x3c>)
 8001a0c:	1b64      	subs	r4, r4, r5
 8001a0e:	10a4      	asrs	r4, r4, #2
 8001a10:	42a6      	cmp	r6, r4
 8001a12:	d109      	bne.n	8001a28 <__libc_init_array+0x24>
 8001a14:	f000 fc9c 	bl	8002350 <_init>
 8001a18:	2600      	movs	r6, #0
 8001a1a:	4d0a      	ldr	r5, [pc, #40]	; (8001a44 <__libc_init_array+0x40>)
 8001a1c:	4c0a      	ldr	r4, [pc, #40]	; (8001a48 <__libc_init_array+0x44>)
 8001a1e:	1b64      	subs	r4, r4, r5
 8001a20:	10a4      	asrs	r4, r4, #2
 8001a22:	42a6      	cmp	r6, r4
 8001a24:	d105      	bne.n	8001a32 <__libc_init_array+0x2e>
 8001a26:	bd70      	pop	{r4, r5, r6, pc}
 8001a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a2c:	4798      	blx	r3
 8001a2e:	3601      	adds	r6, #1
 8001a30:	e7ee      	b.n	8001a10 <__libc_init_array+0xc>
 8001a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a36:	4798      	blx	r3
 8001a38:	3601      	adds	r6, #1
 8001a3a:	e7f2      	b.n	8001a22 <__libc_init_array+0x1e>
 8001a3c:	0800250c 	.word	0x0800250c
 8001a40:	0800250c 	.word	0x0800250c
 8001a44:	0800250c 	.word	0x0800250c
 8001a48:	08002510 	.word	0x08002510

08001a4c <memset>:
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4402      	add	r2, r0
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d100      	bne.n	8001a56 <memset+0xa>
 8001a54:	4770      	bx	lr
 8001a56:	f803 1b01 	strb.w	r1, [r3], #1
 8001a5a:	e7f9      	b.n	8001a50 <memset+0x4>

08001a5c <_vsiprintf_r>:
 8001a5c:	b500      	push	{lr}
 8001a5e:	b09b      	sub	sp, #108	; 0x6c
 8001a60:	9100      	str	r1, [sp, #0]
 8001a62:	9104      	str	r1, [sp, #16]
 8001a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a68:	9105      	str	r1, [sp, #20]
 8001a6a:	9102      	str	r1, [sp, #8]
 8001a6c:	4905      	ldr	r1, [pc, #20]	; (8001a84 <_vsiprintf_r+0x28>)
 8001a6e:	9103      	str	r1, [sp, #12]
 8001a70:	4669      	mov	r1, sp
 8001a72:	f000 f86f 	bl	8001b54 <_svfiprintf_r>
 8001a76:	2200      	movs	r2, #0
 8001a78:	9b00      	ldr	r3, [sp, #0]
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	b01b      	add	sp, #108	; 0x6c
 8001a7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a82:	bf00      	nop
 8001a84:	ffff0208 	.word	0xffff0208

08001a88 <vsiprintf>:
 8001a88:	4613      	mov	r3, r2
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	4601      	mov	r1, r0
 8001a8e:	4802      	ldr	r0, [pc, #8]	; (8001a98 <vsiprintf+0x10>)
 8001a90:	6800      	ldr	r0, [r0, #0]
 8001a92:	f7ff bfe3 	b.w	8001a5c <_vsiprintf_r>
 8001a96:	bf00      	nop
 8001a98:	2000000c 	.word	0x2000000c

08001a9c <__ssputs_r>:
 8001a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001aa0:	688e      	ldr	r6, [r1, #8]
 8001aa2:	4682      	mov	sl, r0
 8001aa4:	429e      	cmp	r6, r3
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4690      	mov	r8, r2
 8001aaa:	461f      	mov	r7, r3
 8001aac:	d838      	bhi.n	8001b20 <__ssputs_r+0x84>
 8001aae:	898a      	ldrh	r2, [r1, #12]
 8001ab0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001ab4:	d032      	beq.n	8001b1c <__ssputs_r+0x80>
 8001ab6:	6825      	ldr	r5, [r4, #0]
 8001ab8:	6909      	ldr	r1, [r1, #16]
 8001aba:	3301      	adds	r3, #1
 8001abc:	eba5 0901 	sub.w	r9, r5, r1
 8001ac0:	6965      	ldr	r5, [r4, #20]
 8001ac2:	444b      	add	r3, r9
 8001ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001ac8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001acc:	106d      	asrs	r5, r5, #1
 8001ace:	429d      	cmp	r5, r3
 8001ad0:	bf38      	it	cc
 8001ad2:	461d      	movcc	r5, r3
 8001ad4:	0553      	lsls	r3, r2, #21
 8001ad6:	d531      	bpl.n	8001b3c <__ssputs_r+0xa0>
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f000 fb6f 	bl	80021bc <_malloc_r>
 8001ade:	4606      	mov	r6, r0
 8001ae0:	b950      	cbnz	r0, 8001af8 <__ssputs_r+0x5c>
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae8:	f8ca 3000 	str.w	r3, [sl]
 8001aec:	89a3      	ldrh	r3, [r4, #12]
 8001aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af2:	81a3      	strh	r3, [r4, #12]
 8001af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001af8:	464a      	mov	r2, r9
 8001afa:	6921      	ldr	r1, [r4, #16]
 8001afc:	f000 face 	bl	800209c <memcpy>
 8001b00:	89a3      	ldrh	r3, [r4, #12]
 8001b02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0a:	81a3      	strh	r3, [r4, #12]
 8001b0c:	6126      	str	r6, [r4, #16]
 8001b0e:	444e      	add	r6, r9
 8001b10:	6026      	str	r6, [r4, #0]
 8001b12:	463e      	mov	r6, r7
 8001b14:	6165      	str	r5, [r4, #20]
 8001b16:	eba5 0509 	sub.w	r5, r5, r9
 8001b1a:	60a5      	str	r5, [r4, #8]
 8001b1c:	42be      	cmp	r6, r7
 8001b1e:	d900      	bls.n	8001b22 <__ssputs_r+0x86>
 8001b20:	463e      	mov	r6, r7
 8001b22:	4632      	mov	r2, r6
 8001b24:	4641      	mov	r1, r8
 8001b26:	6820      	ldr	r0, [r4, #0]
 8001b28:	f000 fac6 	bl	80020b8 <memmove>
 8001b2c:	68a3      	ldr	r3, [r4, #8]
 8001b2e:	2000      	movs	r0, #0
 8001b30:	1b9b      	subs	r3, r3, r6
 8001b32:	60a3      	str	r3, [r4, #8]
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	4433      	add	r3, r6
 8001b38:	6023      	str	r3, [r4, #0]
 8001b3a:	e7db      	b.n	8001af4 <__ssputs_r+0x58>
 8001b3c:	462a      	mov	r2, r5
 8001b3e:	f000 fbb1 	bl	80022a4 <_realloc_r>
 8001b42:	4606      	mov	r6, r0
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d1e1      	bne.n	8001b0c <__ssputs_r+0x70>
 8001b48:	4650      	mov	r0, sl
 8001b4a:	6921      	ldr	r1, [r4, #16]
 8001b4c:	f000 face 	bl	80020ec <_free_r>
 8001b50:	e7c7      	b.n	8001ae2 <__ssputs_r+0x46>
	...

08001b54 <_svfiprintf_r>:
 8001b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b58:	4698      	mov	r8, r3
 8001b5a:	898b      	ldrh	r3, [r1, #12]
 8001b5c:	4607      	mov	r7, r0
 8001b5e:	061b      	lsls	r3, r3, #24
 8001b60:	460d      	mov	r5, r1
 8001b62:	4614      	mov	r4, r2
 8001b64:	b09d      	sub	sp, #116	; 0x74
 8001b66:	d50e      	bpl.n	8001b86 <_svfiprintf_r+0x32>
 8001b68:	690b      	ldr	r3, [r1, #16]
 8001b6a:	b963      	cbnz	r3, 8001b86 <_svfiprintf_r+0x32>
 8001b6c:	2140      	movs	r1, #64	; 0x40
 8001b6e:	f000 fb25 	bl	80021bc <_malloc_r>
 8001b72:	6028      	str	r0, [r5, #0]
 8001b74:	6128      	str	r0, [r5, #16]
 8001b76:	b920      	cbnz	r0, 8001b82 <_svfiprintf_r+0x2e>
 8001b78:	230c      	movs	r3, #12
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	e0d1      	b.n	8001d26 <_svfiprintf_r+0x1d2>
 8001b82:	2340      	movs	r3, #64	; 0x40
 8001b84:	616b      	str	r3, [r5, #20]
 8001b86:	2300      	movs	r3, #0
 8001b88:	9309      	str	r3, [sp, #36]	; 0x24
 8001b8a:	2320      	movs	r3, #32
 8001b8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001b90:	2330      	movs	r3, #48	; 0x30
 8001b92:	f04f 0901 	mov.w	r9, #1
 8001b96:	f8cd 800c 	str.w	r8, [sp, #12]
 8001b9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001d40 <_svfiprintf_r+0x1ec>
 8001b9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ba2:	4623      	mov	r3, r4
 8001ba4:	469a      	mov	sl, r3
 8001ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001baa:	b10a      	cbz	r2, 8001bb0 <_svfiprintf_r+0x5c>
 8001bac:	2a25      	cmp	r2, #37	; 0x25
 8001bae:	d1f9      	bne.n	8001ba4 <_svfiprintf_r+0x50>
 8001bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8001bb4:	d00b      	beq.n	8001bce <_svfiprintf_r+0x7a>
 8001bb6:	465b      	mov	r3, fp
 8001bb8:	4622      	mov	r2, r4
 8001bba:	4629      	mov	r1, r5
 8001bbc:	4638      	mov	r0, r7
 8001bbe:	f7ff ff6d 	bl	8001a9c <__ssputs_r>
 8001bc2:	3001      	adds	r0, #1
 8001bc4:	f000 80aa 	beq.w	8001d1c <_svfiprintf_r+0x1c8>
 8001bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001bca:	445a      	add	r2, fp
 8001bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8001bce:	f89a 3000 	ldrb.w	r3, [sl]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80a2 	beq.w	8001d1c <_svfiprintf_r+0x1c8>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f04f 32ff 	mov.w	r2, #4294967295
 8001bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001be2:	f10a 0a01 	add.w	sl, sl, #1
 8001be6:	9304      	str	r3, [sp, #16]
 8001be8:	9307      	str	r3, [sp, #28]
 8001bea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bee:	931a      	str	r3, [sp, #104]	; 0x68
 8001bf0:	4654      	mov	r4, sl
 8001bf2:	2205      	movs	r2, #5
 8001bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bf8:	4851      	ldr	r0, [pc, #324]	; (8001d40 <_svfiprintf_r+0x1ec>)
 8001bfa:	f000 fa41 	bl	8002080 <memchr>
 8001bfe:	9a04      	ldr	r2, [sp, #16]
 8001c00:	b9d8      	cbnz	r0, 8001c3a <_svfiprintf_r+0xe6>
 8001c02:	06d0      	lsls	r0, r2, #27
 8001c04:	bf44      	itt	mi
 8001c06:	2320      	movmi	r3, #32
 8001c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c0c:	0711      	lsls	r1, r2, #28
 8001c0e:	bf44      	itt	mi
 8001c10:	232b      	movmi	r3, #43	; 0x2b
 8001c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c16:	f89a 3000 	ldrb.w	r3, [sl]
 8001c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8001c1c:	d015      	beq.n	8001c4a <_svfiprintf_r+0xf6>
 8001c1e:	4654      	mov	r4, sl
 8001c20:	2000      	movs	r0, #0
 8001c22:	f04f 0c0a 	mov.w	ip, #10
 8001c26:	9a07      	ldr	r2, [sp, #28]
 8001c28:	4621      	mov	r1, r4
 8001c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c2e:	3b30      	subs	r3, #48	; 0x30
 8001c30:	2b09      	cmp	r3, #9
 8001c32:	d94e      	bls.n	8001cd2 <_svfiprintf_r+0x17e>
 8001c34:	b1b0      	cbz	r0, 8001c64 <_svfiprintf_r+0x110>
 8001c36:	9207      	str	r2, [sp, #28]
 8001c38:	e014      	b.n	8001c64 <_svfiprintf_r+0x110>
 8001c3a:	eba0 0308 	sub.w	r3, r0, r8
 8001c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8001c42:	4313      	orrs	r3, r2
 8001c44:	46a2      	mov	sl, r4
 8001c46:	9304      	str	r3, [sp, #16]
 8001c48:	e7d2      	b.n	8001bf0 <_svfiprintf_r+0x9c>
 8001c4a:	9b03      	ldr	r3, [sp, #12]
 8001c4c:	1d19      	adds	r1, r3, #4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	9103      	str	r1, [sp, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bfbb      	ittet	lt
 8001c56:	425b      	neglt	r3, r3
 8001c58:	f042 0202 	orrlt.w	r2, r2, #2
 8001c5c:	9307      	strge	r3, [sp, #28]
 8001c5e:	9307      	strlt	r3, [sp, #28]
 8001c60:	bfb8      	it	lt
 8001c62:	9204      	strlt	r2, [sp, #16]
 8001c64:	7823      	ldrb	r3, [r4, #0]
 8001c66:	2b2e      	cmp	r3, #46	; 0x2e
 8001c68:	d10c      	bne.n	8001c84 <_svfiprintf_r+0x130>
 8001c6a:	7863      	ldrb	r3, [r4, #1]
 8001c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8001c6e:	d135      	bne.n	8001cdc <_svfiprintf_r+0x188>
 8001c70:	9b03      	ldr	r3, [sp, #12]
 8001c72:	3402      	adds	r4, #2
 8001c74:	1d1a      	adds	r2, r3, #4
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	9203      	str	r2, [sp, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	bfb8      	it	lt
 8001c7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c82:	9305      	str	r3, [sp, #20]
 8001c84:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001d44 <_svfiprintf_r+0x1f0>
 8001c88:	2203      	movs	r2, #3
 8001c8a:	4650      	mov	r0, sl
 8001c8c:	7821      	ldrb	r1, [r4, #0]
 8001c8e:	f000 f9f7 	bl	8002080 <memchr>
 8001c92:	b140      	cbz	r0, 8001ca6 <_svfiprintf_r+0x152>
 8001c94:	2340      	movs	r3, #64	; 0x40
 8001c96:	eba0 000a 	sub.w	r0, r0, sl
 8001c9a:	fa03 f000 	lsl.w	r0, r3, r0
 8001c9e:	9b04      	ldr	r3, [sp, #16]
 8001ca0:	3401      	adds	r4, #1
 8001ca2:	4303      	orrs	r3, r0
 8001ca4:	9304      	str	r3, [sp, #16]
 8001ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001caa:	2206      	movs	r2, #6
 8001cac:	4826      	ldr	r0, [pc, #152]	; (8001d48 <_svfiprintf_r+0x1f4>)
 8001cae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cb2:	f000 f9e5 	bl	8002080 <memchr>
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d038      	beq.n	8001d2c <_svfiprintf_r+0x1d8>
 8001cba:	4b24      	ldr	r3, [pc, #144]	; (8001d4c <_svfiprintf_r+0x1f8>)
 8001cbc:	bb1b      	cbnz	r3, 8001d06 <_svfiprintf_r+0x1b2>
 8001cbe:	9b03      	ldr	r3, [sp, #12]
 8001cc0:	3307      	adds	r3, #7
 8001cc2:	f023 0307 	bic.w	r3, r3, #7
 8001cc6:	3308      	adds	r3, #8
 8001cc8:	9303      	str	r3, [sp, #12]
 8001cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ccc:	4433      	add	r3, r6
 8001cce:	9309      	str	r3, [sp, #36]	; 0x24
 8001cd0:	e767      	b.n	8001ba2 <_svfiprintf_r+0x4e>
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cda:	e7a5      	b.n	8001c28 <_svfiprintf_r+0xd4>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f04f 0c0a 	mov.w	ip, #10
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	3401      	adds	r4, #1
 8001ce6:	9305      	str	r3, [sp, #20]
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001cee:	3a30      	subs	r2, #48	; 0x30
 8001cf0:	2a09      	cmp	r2, #9
 8001cf2:	d903      	bls.n	8001cfc <_svfiprintf_r+0x1a8>
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0c5      	beq.n	8001c84 <_svfiprintf_r+0x130>
 8001cf8:	9105      	str	r1, [sp, #20]
 8001cfa:	e7c3      	b.n	8001c84 <_svfiprintf_r+0x130>
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	2301      	movs	r3, #1
 8001d00:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d04:	e7f0      	b.n	8001ce8 <_svfiprintf_r+0x194>
 8001d06:	ab03      	add	r3, sp, #12
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	462a      	mov	r2, r5
 8001d0c:	4638      	mov	r0, r7
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <_svfiprintf_r+0x1fc>)
 8001d10:	a904      	add	r1, sp, #16
 8001d12:	f3af 8000 	nop.w
 8001d16:	1c42      	adds	r2, r0, #1
 8001d18:	4606      	mov	r6, r0
 8001d1a:	d1d6      	bne.n	8001cca <_svfiprintf_r+0x176>
 8001d1c:	89ab      	ldrh	r3, [r5, #12]
 8001d1e:	065b      	lsls	r3, r3, #25
 8001d20:	f53f af2c 	bmi.w	8001b7c <_svfiprintf_r+0x28>
 8001d24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d26:	b01d      	add	sp, #116	; 0x74
 8001d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d2c:	ab03      	add	r3, sp, #12
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	462a      	mov	r2, r5
 8001d32:	4638      	mov	r0, r7
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <_svfiprintf_r+0x1fc>)
 8001d36:	a904      	add	r1, sp, #16
 8001d38:	f000 f87c 	bl	8001e34 <_printf_i>
 8001d3c:	e7eb      	b.n	8001d16 <_svfiprintf_r+0x1c2>
 8001d3e:	bf00      	nop
 8001d40:	080024d6 	.word	0x080024d6
 8001d44:	080024dc 	.word	0x080024dc
 8001d48:	080024e0 	.word	0x080024e0
 8001d4c:	00000000 	.word	0x00000000
 8001d50:	08001a9d 	.word	0x08001a9d

08001d54 <_printf_common>:
 8001d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d58:	4616      	mov	r6, r2
 8001d5a:	4699      	mov	r9, r3
 8001d5c:	688a      	ldr	r2, [r1, #8]
 8001d5e:	690b      	ldr	r3, [r1, #16]
 8001d60:	4607      	mov	r7, r0
 8001d62:	4293      	cmp	r3, r2
 8001d64:	bfb8      	it	lt
 8001d66:	4613      	movlt	r3, r2
 8001d68:	6033      	str	r3, [r6, #0]
 8001d6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d6e:	460c      	mov	r4, r1
 8001d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d74:	b10a      	cbz	r2, 8001d7a <_printf_common+0x26>
 8001d76:	3301      	adds	r3, #1
 8001d78:	6033      	str	r3, [r6, #0]
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	0699      	lsls	r1, r3, #26
 8001d7e:	bf42      	ittt	mi
 8001d80:	6833      	ldrmi	r3, [r6, #0]
 8001d82:	3302      	addmi	r3, #2
 8001d84:	6033      	strmi	r3, [r6, #0]
 8001d86:	6825      	ldr	r5, [r4, #0]
 8001d88:	f015 0506 	ands.w	r5, r5, #6
 8001d8c:	d106      	bne.n	8001d9c <_printf_common+0x48>
 8001d8e:	f104 0a19 	add.w	sl, r4, #25
 8001d92:	68e3      	ldr	r3, [r4, #12]
 8001d94:	6832      	ldr	r2, [r6, #0]
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	42ab      	cmp	r3, r5
 8001d9a:	dc28      	bgt.n	8001dee <_printf_common+0x9a>
 8001d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001da0:	1e13      	subs	r3, r2, #0
 8001da2:	6822      	ldr	r2, [r4, #0]
 8001da4:	bf18      	it	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	0692      	lsls	r2, r2, #26
 8001daa:	d42d      	bmi.n	8001e08 <_printf_common+0xb4>
 8001dac:	4649      	mov	r1, r9
 8001dae:	4638      	mov	r0, r7
 8001db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001db4:	47c0      	blx	r8
 8001db6:	3001      	adds	r0, #1
 8001db8:	d020      	beq.n	8001dfc <_printf_common+0xa8>
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	68e5      	ldr	r5, [r4, #12]
 8001dbe:	f003 0306 	and.w	r3, r3, #6
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf18      	it	ne
 8001dc6:	2500      	movne	r5, #0
 8001dc8:	6832      	ldr	r2, [r6, #0]
 8001dca:	f04f 0600 	mov.w	r6, #0
 8001dce:	68a3      	ldr	r3, [r4, #8]
 8001dd0:	bf08      	it	eq
 8001dd2:	1aad      	subeq	r5, r5, r2
 8001dd4:	6922      	ldr	r2, [r4, #16]
 8001dd6:	bf08      	it	eq
 8001dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	bfc4      	itt	gt
 8001de0:	1a9b      	subgt	r3, r3, r2
 8001de2:	18ed      	addgt	r5, r5, r3
 8001de4:	341a      	adds	r4, #26
 8001de6:	42b5      	cmp	r5, r6
 8001de8:	d11a      	bne.n	8001e20 <_printf_common+0xcc>
 8001dea:	2000      	movs	r0, #0
 8001dec:	e008      	b.n	8001e00 <_printf_common+0xac>
 8001dee:	2301      	movs	r3, #1
 8001df0:	4652      	mov	r2, sl
 8001df2:	4649      	mov	r1, r9
 8001df4:	4638      	mov	r0, r7
 8001df6:	47c0      	blx	r8
 8001df8:	3001      	adds	r0, #1
 8001dfa:	d103      	bne.n	8001e04 <_printf_common+0xb0>
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e04:	3501      	adds	r5, #1
 8001e06:	e7c4      	b.n	8001d92 <_printf_common+0x3e>
 8001e08:	2030      	movs	r0, #48	; 0x30
 8001e0a:	18e1      	adds	r1, r4, r3
 8001e0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e16:	4422      	add	r2, r4
 8001e18:	3302      	adds	r3, #2
 8001e1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e1e:	e7c5      	b.n	8001dac <_printf_common+0x58>
 8001e20:	2301      	movs	r3, #1
 8001e22:	4622      	mov	r2, r4
 8001e24:	4649      	mov	r1, r9
 8001e26:	4638      	mov	r0, r7
 8001e28:	47c0      	blx	r8
 8001e2a:	3001      	adds	r0, #1
 8001e2c:	d0e6      	beq.n	8001dfc <_printf_common+0xa8>
 8001e2e:	3601      	adds	r6, #1
 8001e30:	e7d9      	b.n	8001de6 <_printf_common+0x92>
	...

08001e34 <_printf_i>:
 8001e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e38:	7e0f      	ldrb	r7, [r1, #24]
 8001e3a:	4691      	mov	r9, r2
 8001e3c:	2f78      	cmp	r7, #120	; 0x78
 8001e3e:	4680      	mov	r8, r0
 8001e40:	460c      	mov	r4, r1
 8001e42:	469a      	mov	sl, r3
 8001e44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001e46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001e4a:	d807      	bhi.n	8001e5c <_printf_i+0x28>
 8001e4c:	2f62      	cmp	r7, #98	; 0x62
 8001e4e:	d80a      	bhi.n	8001e66 <_printf_i+0x32>
 8001e50:	2f00      	cmp	r7, #0
 8001e52:	f000 80d9 	beq.w	8002008 <_printf_i+0x1d4>
 8001e56:	2f58      	cmp	r7, #88	; 0x58
 8001e58:	f000 80a4 	beq.w	8001fa4 <_printf_i+0x170>
 8001e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e64:	e03a      	b.n	8001edc <_printf_i+0xa8>
 8001e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e6a:	2b15      	cmp	r3, #21
 8001e6c:	d8f6      	bhi.n	8001e5c <_printf_i+0x28>
 8001e6e:	a101      	add	r1, pc, #4	; (adr r1, 8001e74 <_printf_i+0x40>)
 8001e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001e74:	08001ecd 	.word	0x08001ecd
 8001e78:	08001ee1 	.word	0x08001ee1
 8001e7c:	08001e5d 	.word	0x08001e5d
 8001e80:	08001e5d 	.word	0x08001e5d
 8001e84:	08001e5d 	.word	0x08001e5d
 8001e88:	08001e5d 	.word	0x08001e5d
 8001e8c:	08001ee1 	.word	0x08001ee1
 8001e90:	08001e5d 	.word	0x08001e5d
 8001e94:	08001e5d 	.word	0x08001e5d
 8001e98:	08001e5d 	.word	0x08001e5d
 8001e9c:	08001e5d 	.word	0x08001e5d
 8001ea0:	08001fef 	.word	0x08001fef
 8001ea4:	08001f11 	.word	0x08001f11
 8001ea8:	08001fd1 	.word	0x08001fd1
 8001eac:	08001e5d 	.word	0x08001e5d
 8001eb0:	08001e5d 	.word	0x08001e5d
 8001eb4:	08002011 	.word	0x08002011
 8001eb8:	08001e5d 	.word	0x08001e5d
 8001ebc:	08001f11 	.word	0x08001f11
 8001ec0:	08001e5d 	.word	0x08001e5d
 8001ec4:	08001e5d 	.word	0x08001e5d
 8001ec8:	08001fd9 	.word	0x08001fd9
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	1d1a      	adds	r2, r3, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	602a      	str	r2, [r5, #0]
 8001ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0a4      	b.n	800202a <_printf_i+0x1f6>
 8001ee0:	6820      	ldr	r0, [r4, #0]
 8001ee2:	6829      	ldr	r1, [r5, #0]
 8001ee4:	0606      	lsls	r6, r0, #24
 8001ee6:	f101 0304 	add.w	r3, r1, #4
 8001eea:	d50a      	bpl.n	8001f02 <_printf_i+0xce>
 8001eec:	680e      	ldr	r6, [r1, #0]
 8001eee:	602b      	str	r3, [r5, #0]
 8001ef0:	2e00      	cmp	r6, #0
 8001ef2:	da03      	bge.n	8001efc <_printf_i+0xc8>
 8001ef4:	232d      	movs	r3, #45	; 0x2d
 8001ef6:	4276      	negs	r6, r6
 8001ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001efc:	230a      	movs	r3, #10
 8001efe:	485e      	ldr	r0, [pc, #376]	; (8002078 <_printf_i+0x244>)
 8001f00:	e019      	b.n	8001f36 <_printf_i+0x102>
 8001f02:	680e      	ldr	r6, [r1, #0]
 8001f04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001f08:	602b      	str	r3, [r5, #0]
 8001f0a:	bf18      	it	ne
 8001f0c:	b236      	sxthne	r6, r6
 8001f0e:	e7ef      	b.n	8001ef0 <_printf_i+0xbc>
 8001f10:	682b      	ldr	r3, [r5, #0]
 8001f12:	6820      	ldr	r0, [r4, #0]
 8001f14:	1d19      	adds	r1, r3, #4
 8001f16:	6029      	str	r1, [r5, #0]
 8001f18:	0601      	lsls	r1, r0, #24
 8001f1a:	d501      	bpl.n	8001f20 <_printf_i+0xec>
 8001f1c:	681e      	ldr	r6, [r3, #0]
 8001f1e:	e002      	b.n	8001f26 <_printf_i+0xf2>
 8001f20:	0646      	lsls	r6, r0, #25
 8001f22:	d5fb      	bpl.n	8001f1c <_printf_i+0xe8>
 8001f24:	881e      	ldrh	r6, [r3, #0]
 8001f26:	2f6f      	cmp	r7, #111	; 0x6f
 8001f28:	bf0c      	ite	eq
 8001f2a:	2308      	moveq	r3, #8
 8001f2c:	230a      	movne	r3, #10
 8001f2e:	4852      	ldr	r0, [pc, #328]	; (8002078 <_printf_i+0x244>)
 8001f30:	2100      	movs	r1, #0
 8001f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f36:	6865      	ldr	r5, [r4, #4]
 8001f38:	2d00      	cmp	r5, #0
 8001f3a:	bfa8      	it	ge
 8001f3c:	6821      	ldrge	r1, [r4, #0]
 8001f3e:	60a5      	str	r5, [r4, #8]
 8001f40:	bfa4      	itt	ge
 8001f42:	f021 0104 	bicge.w	r1, r1, #4
 8001f46:	6021      	strge	r1, [r4, #0]
 8001f48:	b90e      	cbnz	r6, 8001f4e <_printf_i+0x11a>
 8001f4a:	2d00      	cmp	r5, #0
 8001f4c:	d04d      	beq.n	8001fea <_printf_i+0x1b6>
 8001f4e:	4615      	mov	r5, r2
 8001f50:	fbb6 f1f3 	udiv	r1, r6, r3
 8001f54:	fb03 6711 	mls	r7, r3, r1, r6
 8001f58:	5dc7      	ldrb	r7, [r0, r7]
 8001f5a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001f5e:	4637      	mov	r7, r6
 8001f60:	42bb      	cmp	r3, r7
 8001f62:	460e      	mov	r6, r1
 8001f64:	d9f4      	bls.n	8001f50 <_printf_i+0x11c>
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d10b      	bne.n	8001f82 <_printf_i+0x14e>
 8001f6a:	6823      	ldr	r3, [r4, #0]
 8001f6c:	07de      	lsls	r6, r3, #31
 8001f6e:	d508      	bpl.n	8001f82 <_printf_i+0x14e>
 8001f70:	6923      	ldr	r3, [r4, #16]
 8001f72:	6861      	ldr	r1, [r4, #4]
 8001f74:	4299      	cmp	r1, r3
 8001f76:	bfde      	ittt	le
 8001f78:	2330      	movle	r3, #48	; 0x30
 8001f7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001f82:	1b52      	subs	r2, r2, r5
 8001f84:	6122      	str	r2, [r4, #16]
 8001f86:	464b      	mov	r3, r9
 8001f88:	4621      	mov	r1, r4
 8001f8a:	4640      	mov	r0, r8
 8001f8c:	f8cd a000 	str.w	sl, [sp]
 8001f90:	aa03      	add	r2, sp, #12
 8001f92:	f7ff fedf 	bl	8001d54 <_printf_common>
 8001f96:	3001      	adds	r0, #1
 8001f98:	d14c      	bne.n	8002034 <_printf_i+0x200>
 8001f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f9e:	b004      	add	sp, #16
 8001fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fa4:	4834      	ldr	r0, [pc, #208]	; (8002078 <_printf_i+0x244>)
 8001fa6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001faa:	6829      	ldr	r1, [r5, #0]
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	f851 6b04 	ldr.w	r6, [r1], #4
 8001fb2:	6029      	str	r1, [r5, #0]
 8001fb4:	061d      	lsls	r5, r3, #24
 8001fb6:	d514      	bpl.n	8001fe2 <_printf_i+0x1ae>
 8001fb8:	07df      	lsls	r7, r3, #31
 8001fba:	bf44      	itt	mi
 8001fbc:	f043 0320 	orrmi.w	r3, r3, #32
 8001fc0:	6023      	strmi	r3, [r4, #0]
 8001fc2:	b91e      	cbnz	r6, 8001fcc <_printf_i+0x198>
 8001fc4:	6823      	ldr	r3, [r4, #0]
 8001fc6:	f023 0320 	bic.w	r3, r3, #32
 8001fca:	6023      	str	r3, [r4, #0]
 8001fcc:	2310      	movs	r3, #16
 8001fce:	e7af      	b.n	8001f30 <_printf_i+0xfc>
 8001fd0:	6823      	ldr	r3, [r4, #0]
 8001fd2:	f043 0320 	orr.w	r3, r3, #32
 8001fd6:	6023      	str	r3, [r4, #0]
 8001fd8:	2378      	movs	r3, #120	; 0x78
 8001fda:	4828      	ldr	r0, [pc, #160]	; (800207c <_printf_i+0x248>)
 8001fdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001fe0:	e7e3      	b.n	8001faa <_printf_i+0x176>
 8001fe2:	0659      	lsls	r1, r3, #25
 8001fe4:	bf48      	it	mi
 8001fe6:	b2b6      	uxthmi	r6, r6
 8001fe8:	e7e6      	b.n	8001fb8 <_printf_i+0x184>
 8001fea:	4615      	mov	r5, r2
 8001fec:	e7bb      	b.n	8001f66 <_printf_i+0x132>
 8001fee:	682b      	ldr	r3, [r5, #0]
 8001ff0:	6826      	ldr	r6, [r4, #0]
 8001ff2:	1d18      	adds	r0, r3, #4
 8001ff4:	6961      	ldr	r1, [r4, #20]
 8001ff6:	6028      	str	r0, [r5, #0]
 8001ff8:	0635      	lsls	r5, r6, #24
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	d501      	bpl.n	8002002 <_printf_i+0x1ce>
 8001ffe:	6019      	str	r1, [r3, #0]
 8002000:	e002      	b.n	8002008 <_printf_i+0x1d4>
 8002002:	0670      	lsls	r0, r6, #25
 8002004:	d5fb      	bpl.n	8001ffe <_printf_i+0x1ca>
 8002006:	8019      	strh	r1, [r3, #0]
 8002008:	2300      	movs	r3, #0
 800200a:	4615      	mov	r5, r2
 800200c:	6123      	str	r3, [r4, #16]
 800200e:	e7ba      	b.n	8001f86 <_printf_i+0x152>
 8002010:	682b      	ldr	r3, [r5, #0]
 8002012:	2100      	movs	r1, #0
 8002014:	1d1a      	adds	r2, r3, #4
 8002016:	602a      	str	r2, [r5, #0]
 8002018:	681d      	ldr	r5, [r3, #0]
 800201a:	6862      	ldr	r2, [r4, #4]
 800201c:	4628      	mov	r0, r5
 800201e:	f000 f82f 	bl	8002080 <memchr>
 8002022:	b108      	cbz	r0, 8002028 <_printf_i+0x1f4>
 8002024:	1b40      	subs	r0, r0, r5
 8002026:	6060      	str	r0, [r4, #4]
 8002028:	6863      	ldr	r3, [r4, #4]
 800202a:	6123      	str	r3, [r4, #16]
 800202c:	2300      	movs	r3, #0
 800202e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002032:	e7a8      	b.n	8001f86 <_printf_i+0x152>
 8002034:	462a      	mov	r2, r5
 8002036:	4649      	mov	r1, r9
 8002038:	4640      	mov	r0, r8
 800203a:	6923      	ldr	r3, [r4, #16]
 800203c:	47d0      	blx	sl
 800203e:	3001      	adds	r0, #1
 8002040:	d0ab      	beq.n	8001f9a <_printf_i+0x166>
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	079b      	lsls	r3, r3, #30
 8002046:	d413      	bmi.n	8002070 <_printf_i+0x23c>
 8002048:	68e0      	ldr	r0, [r4, #12]
 800204a:	9b03      	ldr	r3, [sp, #12]
 800204c:	4298      	cmp	r0, r3
 800204e:	bfb8      	it	lt
 8002050:	4618      	movlt	r0, r3
 8002052:	e7a4      	b.n	8001f9e <_printf_i+0x16a>
 8002054:	2301      	movs	r3, #1
 8002056:	4632      	mov	r2, r6
 8002058:	4649      	mov	r1, r9
 800205a:	4640      	mov	r0, r8
 800205c:	47d0      	blx	sl
 800205e:	3001      	adds	r0, #1
 8002060:	d09b      	beq.n	8001f9a <_printf_i+0x166>
 8002062:	3501      	adds	r5, #1
 8002064:	68e3      	ldr	r3, [r4, #12]
 8002066:	9903      	ldr	r1, [sp, #12]
 8002068:	1a5b      	subs	r3, r3, r1
 800206a:	42ab      	cmp	r3, r5
 800206c:	dcf2      	bgt.n	8002054 <_printf_i+0x220>
 800206e:	e7eb      	b.n	8002048 <_printf_i+0x214>
 8002070:	2500      	movs	r5, #0
 8002072:	f104 0619 	add.w	r6, r4, #25
 8002076:	e7f5      	b.n	8002064 <_printf_i+0x230>
 8002078:	080024e7 	.word	0x080024e7
 800207c:	080024f8 	.word	0x080024f8

08002080 <memchr>:
 8002080:	4603      	mov	r3, r0
 8002082:	b510      	push	{r4, lr}
 8002084:	b2c9      	uxtb	r1, r1
 8002086:	4402      	add	r2, r0
 8002088:	4293      	cmp	r3, r2
 800208a:	4618      	mov	r0, r3
 800208c:	d101      	bne.n	8002092 <memchr+0x12>
 800208e:	2000      	movs	r0, #0
 8002090:	e003      	b.n	800209a <memchr+0x1a>
 8002092:	7804      	ldrb	r4, [r0, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	428c      	cmp	r4, r1
 8002098:	d1f6      	bne.n	8002088 <memchr+0x8>
 800209a:	bd10      	pop	{r4, pc}

0800209c <memcpy>:
 800209c:	440a      	add	r2, r1
 800209e:	4291      	cmp	r1, r2
 80020a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80020a4:	d100      	bne.n	80020a8 <memcpy+0xc>
 80020a6:	4770      	bx	lr
 80020a8:	b510      	push	{r4, lr}
 80020aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80020ae:	4291      	cmp	r1, r2
 80020b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80020b4:	d1f9      	bne.n	80020aa <memcpy+0xe>
 80020b6:	bd10      	pop	{r4, pc}

080020b8 <memmove>:
 80020b8:	4288      	cmp	r0, r1
 80020ba:	b510      	push	{r4, lr}
 80020bc:	eb01 0402 	add.w	r4, r1, r2
 80020c0:	d902      	bls.n	80020c8 <memmove+0x10>
 80020c2:	4284      	cmp	r4, r0
 80020c4:	4623      	mov	r3, r4
 80020c6:	d807      	bhi.n	80020d8 <memmove+0x20>
 80020c8:	1e43      	subs	r3, r0, #1
 80020ca:	42a1      	cmp	r1, r4
 80020cc:	d008      	beq.n	80020e0 <memmove+0x28>
 80020ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80020d6:	e7f8      	b.n	80020ca <memmove+0x12>
 80020d8:	4601      	mov	r1, r0
 80020da:	4402      	add	r2, r0
 80020dc:	428a      	cmp	r2, r1
 80020de:	d100      	bne.n	80020e2 <memmove+0x2a>
 80020e0:	bd10      	pop	{r4, pc}
 80020e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80020ea:	e7f7      	b.n	80020dc <memmove+0x24>

080020ec <_free_r>:
 80020ec:	b538      	push	{r3, r4, r5, lr}
 80020ee:	4605      	mov	r5, r0
 80020f0:	2900      	cmp	r1, #0
 80020f2:	d040      	beq.n	8002176 <_free_r+0x8a>
 80020f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020f8:	1f0c      	subs	r4, r1, #4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bfb8      	it	lt
 80020fe:	18e4      	addlt	r4, r4, r3
 8002100:	f000 f910 	bl	8002324 <__malloc_lock>
 8002104:	4a1c      	ldr	r2, [pc, #112]	; (8002178 <_free_r+0x8c>)
 8002106:	6813      	ldr	r3, [r2, #0]
 8002108:	b933      	cbnz	r3, 8002118 <_free_r+0x2c>
 800210a:	6063      	str	r3, [r4, #4]
 800210c:	6014      	str	r4, [r2, #0]
 800210e:	4628      	mov	r0, r5
 8002110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002114:	f000 b90c 	b.w	8002330 <__malloc_unlock>
 8002118:	42a3      	cmp	r3, r4
 800211a:	d908      	bls.n	800212e <_free_r+0x42>
 800211c:	6820      	ldr	r0, [r4, #0]
 800211e:	1821      	adds	r1, r4, r0
 8002120:	428b      	cmp	r3, r1
 8002122:	bf01      	itttt	eq
 8002124:	6819      	ldreq	r1, [r3, #0]
 8002126:	685b      	ldreq	r3, [r3, #4]
 8002128:	1809      	addeq	r1, r1, r0
 800212a:	6021      	streq	r1, [r4, #0]
 800212c:	e7ed      	b.n	800210a <_free_r+0x1e>
 800212e:	461a      	mov	r2, r3
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	b10b      	cbz	r3, 8002138 <_free_r+0x4c>
 8002134:	42a3      	cmp	r3, r4
 8002136:	d9fa      	bls.n	800212e <_free_r+0x42>
 8002138:	6811      	ldr	r1, [r2, #0]
 800213a:	1850      	adds	r0, r2, r1
 800213c:	42a0      	cmp	r0, r4
 800213e:	d10b      	bne.n	8002158 <_free_r+0x6c>
 8002140:	6820      	ldr	r0, [r4, #0]
 8002142:	4401      	add	r1, r0
 8002144:	1850      	adds	r0, r2, r1
 8002146:	4283      	cmp	r3, r0
 8002148:	6011      	str	r1, [r2, #0]
 800214a:	d1e0      	bne.n	800210e <_free_r+0x22>
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4401      	add	r1, r0
 8002152:	6011      	str	r1, [r2, #0]
 8002154:	6053      	str	r3, [r2, #4]
 8002156:	e7da      	b.n	800210e <_free_r+0x22>
 8002158:	d902      	bls.n	8002160 <_free_r+0x74>
 800215a:	230c      	movs	r3, #12
 800215c:	602b      	str	r3, [r5, #0]
 800215e:	e7d6      	b.n	800210e <_free_r+0x22>
 8002160:	6820      	ldr	r0, [r4, #0]
 8002162:	1821      	adds	r1, r4, r0
 8002164:	428b      	cmp	r3, r1
 8002166:	bf01      	itttt	eq
 8002168:	6819      	ldreq	r1, [r3, #0]
 800216a:	685b      	ldreq	r3, [r3, #4]
 800216c:	1809      	addeq	r1, r1, r0
 800216e:	6021      	streq	r1, [r4, #0]
 8002170:	6063      	str	r3, [r4, #4]
 8002172:	6054      	str	r4, [r2, #4]
 8002174:	e7cb      	b.n	800210e <_free_r+0x22>
 8002176:	bd38      	pop	{r3, r4, r5, pc}
 8002178:	20000190 	.word	0x20000190

0800217c <sbrk_aligned>:
 800217c:	b570      	push	{r4, r5, r6, lr}
 800217e:	4e0e      	ldr	r6, [pc, #56]	; (80021b8 <sbrk_aligned+0x3c>)
 8002180:	460c      	mov	r4, r1
 8002182:	6831      	ldr	r1, [r6, #0]
 8002184:	4605      	mov	r5, r0
 8002186:	b911      	cbnz	r1, 800218e <sbrk_aligned+0x12>
 8002188:	f000 f8bc 	bl	8002304 <_sbrk_r>
 800218c:	6030      	str	r0, [r6, #0]
 800218e:	4621      	mov	r1, r4
 8002190:	4628      	mov	r0, r5
 8002192:	f000 f8b7 	bl	8002304 <_sbrk_r>
 8002196:	1c43      	adds	r3, r0, #1
 8002198:	d00a      	beq.n	80021b0 <sbrk_aligned+0x34>
 800219a:	1cc4      	adds	r4, r0, #3
 800219c:	f024 0403 	bic.w	r4, r4, #3
 80021a0:	42a0      	cmp	r0, r4
 80021a2:	d007      	beq.n	80021b4 <sbrk_aligned+0x38>
 80021a4:	1a21      	subs	r1, r4, r0
 80021a6:	4628      	mov	r0, r5
 80021a8:	f000 f8ac 	bl	8002304 <_sbrk_r>
 80021ac:	3001      	adds	r0, #1
 80021ae:	d101      	bne.n	80021b4 <sbrk_aligned+0x38>
 80021b0:	f04f 34ff 	mov.w	r4, #4294967295
 80021b4:	4620      	mov	r0, r4
 80021b6:	bd70      	pop	{r4, r5, r6, pc}
 80021b8:	20000194 	.word	0x20000194

080021bc <_malloc_r>:
 80021bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c0:	1ccd      	adds	r5, r1, #3
 80021c2:	f025 0503 	bic.w	r5, r5, #3
 80021c6:	3508      	adds	r5, #8
 80021c8:	2d0c      	cmp	r5, #12
 80021ca:	bf38      	it	cc
 80021cc:	250c      	movcc	r5, #12
 80021ce:	2d00      	cmp	r5, #0
 80021d0:	4607      	mov	r7, r0
 80021d2:	db01      	blt.n	80021d8 <_malloc_r+0x1c>
 80021d4:	42a9      	cmp	r1, r5
 80021d6:	d905      	bls.n	80021e4 <_malloc_r+0x28>
 80021d8:	230c      	movs	r3, #12
 80021da:	2600      	movs	r6, #0
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4630      	mov	r0, r6
 80021e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021e4:	4e2e      	ldr	r6, [pc, #184]	; (80022a0 <_malloc_r+0xe4>)
 80021e6:	f000 f89d 	bl	8002324 <__malloc_lock>
 80021ea:	6833      	ldr	r3, [r6, #0]
 80021ec:	461c      	mov	r4, r3
 80021ee:	bb34      	cbnz	r4, 800223e <_malloc_r+0x82>
 80021f0:	4629      	mov	r1, r5
 80021f2:	4638      	mov	r0, r7
 80021f4:	f7ff ffc2 	bl	800217c <sbrk_aligned>
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	4604      	mov	r4, r0
 80021fc:	d14d      	bne.n	800229a <_malloc_r+0xde>
 80021fe:	6834      	ldr	r4, [r6, #0]
 8002200:	4626      	mov	r6, r4
 8002202:	2e00      	cmp	r6, #0
 8002204:	d140      	bne.n	8002288 <_malloc_r+0xcc>
 8002206:	6823      	ldr	r3, [r4, #0]
 8002208:	4631      	mov	r1, r6
 800220a:	4638      	mov	r0, r7
 800220c:	eb04 0803 	add.w	r8, r4, r3
 8002210:	f000 f878 	bl	8002304 <_sbrk_r>
 8002214:	4580      	cmp	r8, r0
 8002216:	d13a      	bne.n	800228e <_malloc_r+0xd2>
 8002218:	6821      	ldr	r1, [r4, #0]
 800221a:	3503      	adds	r5, #3
 800221c:	1a6d      	subs	r5, r5, r1
 800221e:	f025 0503 	bic.w	r5, r5, #3
 8002222:	3508      	adds	r5, #8
 8002224:	2d0c      	cmp	r5, #12
 8002226:	bf38      	it	cc
 8002228:	250c      	movcc	r5, #12
 800222a:	4638      	mov	r0, r7
 800222c:	4629      	mov	r1, r5
 800222e:	f7ff ffa5 	bl	800217c <sbrk_aligned>
 8002232:	3001      	adds	r0, #1
 8002234:	d02b      	beq.n	800228e <_malloc_r+0xd2>
 8002236:	6823      	ldr	r3, [r4, #0]
 8002238:	442b      	add	r3, r5
 800223a:	6023      	str	r3, [r4, #0]
 800223c:	e00e      	b.n	800225c <_malloc_r+0xa0>
 800223e:	6822      	ldr	r2, [r4, #0]
 8002240:	1b52      	subs	r2, r2, r5
 8002242:	d41e      	bmi.n	8002282 <_malloc_r+0xc6>
 8002244:	2a0b      	cmp	r2, #11
 8002246:	d916      	bls.n	8002276 <_malloc_r+0xba>
 8002248:	1961      	adds	r1, r4, r5
 800224a:	42a3      	cmp	r3, r4
 800224c:	6025      	str	r5, [r4, #0]
 800224e:	bf18      	it	ne
 8002250:	6059      	strne	r1, [r3, #4]
 8002252:	6863      	ldr	r3, [r4, #4]
 8002254:	bf08      	it	eq
 8002256:	6031      	streq	r1, [r6, #0]
 8002258:	5162      	str	r2, [r4, r5]
 800225a:	604b      	str	r3, [r1, #4]
 800225c:	4638      	mov	r0, r7
 800225e:	f104 060b 	add.w	r6, r4, #11
 8002262:	f000 f865 	bl	8002330 <__malloc_unlock>
 8002266:	f026 0607 	bic.w	r6, r6, #7
 800226a:	1d23      	adds	r3, r4, #4
 800226c:	1af2      	subs	r2, r6, r3
 800226e:	d0b6      	beq.n	80021de <_malloc_r+0x22>
 8002270:	1b9b      	subs	r3, r3, r6
 8002272:	50a3      	str	r3, [r4, r2]
 8002274:	e7b3      	b.n	80021de <_malloc_r+0x22>
 8002276:	6862      	ldr	r2, [r4, #4]
 8002278:	42a3      	cmp	r3, r4
 800227a:	bf0c      	ite	eq
 800227c:	6032      	streq	r2, [r6, #0]
 800227e:	605a      	strne	r2, [r3, #4]
 8002280:	e7ec      	b.n	800225c <_malloc_r+0xa0>
 8002282:	4623      	mov	r3, r4
 8002284:	6864      	ldr	r4, [r4, #4]
 8002286:	e7b2      	b.n	80021ee <_malloc_r+0x32>
 8002288:	4634      	mov	r4, r6
 800228a:	6876      	ldr	r6, [r6, #4]
 800228c:	e7b9      	b.n	8002202 <_malloc_r+0x46>
 800228e:	230c      	movs	r3, #12
 8002290:	4638      	mov	r0, r7
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	f000 f84c 	bl	8002330 <__malloc_unlock>
 8002298:	e7a1      	b.n	80021de <_malloc_r+0x22>
 800229a:	6025      	str	r5, [r4, #0]
 800229c:	e7de      	b.n	800225c <_malloc_r+0xa0>
 800229e:	bf00      	nop
 80022a0:	20000190 	.word	0x20000190

080022a4 <_realloc_r>:
 80022a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022a8:	4680      	mov	r8, r0
 80022aa:	4614      	mov	r4, r2
 80022ac:	460e      	mov	r6, r1
 80022ae:	b921      	cbnz	r1, 80022ba <_realloc_r+0x16>
 80022b0:	4611      	mov	r1, r2
 80022b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022b6:	f7ff bf81 	b.w	80021bc <_malloc_r>
 80022ba:	b92a      	cbnz	r2, 80022c8 <_realloc_r+0x24>
 80022bc:	f7ff ff16 	bl	80020ec <_free_r>
 80022c0:	4625      	mov	r5, r4
 80022c2:	4628      	mov	r0, r5
 80022c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022c8:	f000 f838 	bl	800233c <_malloc_usable_size_r>
 80022cc:	4284      	cmp	r4, r0
 80022ce:	4607      	mov	r7, r0
 80022d0:	d802      	bhi.n	80022d8 <_realloc_r+0x34>
 80022d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80022d6:	d812      	bhi.n	80022fe <_realloc_r+0x5a>
 80022d8:	4621      	mov	r1, r4
 80022da:	4640      	mov	r0, r8
 80022dc:	f7ff ff6e 	bl	80021bc <_malloc_r>
 80022e0:	4605      	mov	r5, r0
 80022e2:	2800      	cmp	r0, #0
 80022e4:	d0ed      	beq.n	80022c2 <_realloc_r+0x1e>
 80022e6:	42bc      	cmp	r4, r7
 80022e8:	4622      	mov	r2, r4
 80022ea:	4631      	mov	r1, r6
 80022ec:	bf28      	it	cs
 80022ee:	463a      	movcs	r2, r7
 80022f0:	f7ff fed4 	bl	800209c <memcpy>
 80022f4:	4631      	mov	r1, r6
 80022f6:	4640      	mov	r0, r8
 80022f8:	f7ff fef8 	bl	80020ec <_free_r>
 80022fc:	e7e1      	b.n	80022c2 <_realloc_r+0x1e>
 80022fe:	4635      	mov	r5, r6
 8002300:	e7df      	b.n	80022c2 <_realloc_r+0x1e>
	...

08002304 <_sbrk_r>:
 8002304:	b538      	push	{r3, r4, r5, lr}
 8002306:	2300      	movs	r3, #0
 8002308:	4d05      	ldr	r5, [pc, #20]	; (8002320 <_sbrk_r+0x1c>)
 800230a:	4604      	mov	r4, r0
 800230c:	4608      	mov	r0, r1
 800230e:	602b      	str	r3, [r5, #0]
 8002310:	f7fe f8e0 	bl	80004d4 <_sbrk>
 8002314:	1c43      	adds	r3, r0, #1
 8002316:	d102      	bne.n	800231e <_sbrk_r+0x1a>
 8002318:	682b      	ldr	r3, [r5, #0]
 800231a:	b103      	cbz	r3, 800231e <_sbrk_r+0x1a>
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	bd38      	pop	{r3, r4, r5, pc}
 8002320:	20000198 	.word	0x20000198

08002324 <__malloc_lock>:
 8002324:	4801      	ldr	r0, [pc, #4]	; (800232c <__malloc_lock+0x8>)
 8002326:	f000 b811 	b.w	800234c <__retarget_lock_acquire_recursive>
 800232a:	bf00      	nop
 800232c:	2000019c 	.word	0x2000019c

08002330 <__malloc_unlock>:
 8002330:	4801      	ldr	r0, [pc, #4]	; (8002338 <__malloc_unlock+0x8>)
 8002332:	f000 b80c 	b.w	800234e <__retarget_lock_release_recursive>
 8002336:	bf00      	nop
 8002338:	2000019c 	.word	0x2000019c

0800233c <_malloc_usable_size_r>:
 800233c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002340:	1f18      	subs	r0, r3, #4
 8002342:	2b00      	cmp	r3, #0
 8002344:	bfbc      	itt	lt
 8002346:	580b      	ldrlt	r3, [r1, r0]
 8002348:	18c0      	addlt	r0, r0, r3
 800234a:	4770      	bx	lr

0800234c <__retarget_lock_acquire_recursive>:
 800234c:	4770      	bx	lr

0800234e <__retarget_lock_release_recursive>:
 800234e:	4770      	bx	lr

08002350 <_init>:
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	bf00      	nop
 8002354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002356:	bc08      	pop	{r3}
 8002358:	469e      	mov	lr, r3
 800235a:	4770      	bx	lr

0800235c <_fini>:
 800235c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800235e:	bf00      	nop
 8002360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002362:	bc08      	pop	{r3}
 8002364:	469e      	mov	lr, r3
 8002366:	4770      	bx	lr

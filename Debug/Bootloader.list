
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f98  08002f98  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f98  08002f98  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f98  08002f98  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08002fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000080  0800301c  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  0800301c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b13  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e1d  00000000  00000000  00028bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000880  00000000  00000000  0002a9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000798  00000000  00000000  0002b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f9d  00000000  00000000  0002b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3ec  00000000  00000000  0004398d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008362d  00000000  00000000  0004ed79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d23a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c0  00000000  00000000  000d23f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e34 	.word	0x08002e34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	08002e34 	.word	0x08002e34

0800014c <test>:
/****************** Macros  ******************/

#define  TEST_BOOTLOADER     0x10


static void test(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <test+0x14>)
 8000156:	f001 fb37 	bl	80017c8 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <BL_fetchHostCommand>:

void BL_fetchHostCommand(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	b082      	sub	sp, #8
 8000168:	af00      	add	r7, sp, #0
	uint8_t dataLenght = 0 ;
 800016a:	2300      	movs	r3, #0
 800016c:	71fb      	strb	r3, [r7, #7]
	BL_Status status = BL_STATUS_NOK;
 800016e:	2301      	movs	r3, #1
 8000170:	71bb      	strb	r3, [r7, #6]
	memset(hostBuffer , 0 , MAX_HOST_COMMAND_LENGHT);
 8000172:	2264      	movs	r2, #100	; 0x64
 8000174:	2100      	movs	r1, #0
 8000176:	4855      	ldr	r0, [pc, #340]	; (80002cc <BL_fetchHostCommand+0x168>)
 8000178:	f002 f9da 	bl	8002530 <memset>
	HAL_UART_Receive(BL_hostCommunicationUART, hostBuffer, 1, HAL_MAX_DELAY);
 800017c:	f04f 33ff 	mov.w	r3, #4294967295
 8000180:	2201      	movs	r2, #1
 8000182:	4952      	ldr	r1, [pc, #328]	; (80002cc <BL_fetchHostCommand+0x168>)
 8000184:	4852      	ldr	r0, [pc, #328]	; (80002d0 <BL_fetchHostCommand+0x16c>)
 8000186:	f002 f81a 	bl	80021be <HAL_UART_Receive>
	/*get length of the command*/
	dataLenght = hostBuffer[0];
 800018a:	4b50      	ldr	r3, [pc, #320]	; (80002cc <BL_fetchHostCommand+0x168>)
 800018c:	781b      	ldrb	r3, [r3, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
	/*fetch the command from the user*/
	HAL_UART_Receive(BL_hostCommunicationUART, &hostBuffer[1], dataLenght, HAL_MAX_DELAY);
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	b29a      	uxth	r2, r3
 8000194:	f04f 33ff 	mov.w	r3, #4294967295
 8000198:	494e      	ldr	r1, [pc, #312]	; (80002d4 <BL_fetchHostCommand+0x170>)
 800019a:	484d      	ldr	r0, [pc, #308]	; (80002d0 <BL_fetchHostCommand+0x16c>)
 800019c:	f002 f80f 	bl	80021be <HAL_UART_Receive>
	switch(hostBuffer[1]){
 80001a0:	4b4a      	ldr	r3, [pc, #296]	; (80002cc <BL_fetchHostCommand+0x168>)
 80001a2:	785b      	ldrb	r3, [r3, #1]
 80001a4:	3b10      	subs	r3, #16
 80001a6:	2b11      	cmp	r3, #17
 80001a8:	d87e      	bhi.n	80002a8 <BL_fetchHostCommand+0x144>
 80001aa:	a201      	add	r2, pc, #4	; (adr r2, 80001b0 <BL_fetchHostCommand+0x4c>)
 80001ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001b0:	080001f9 	.word	0x080001f9
 80001b4:	08000211 	.word	0x08000211
 80001b8:	08000229 	.word	0x08000229
 80001bc:	08000241 	.word	0x08000241
 80001c0:	08000249 	.word	0x08000249
 80001c4:	08000261 	.word	0x08000261
 80001c8:	08000279 	.word	0x08000279
 80001cc:	08000281 	.word	0x08000281
 80001d0:	08000289 	.word	0x08000289
 80001d4:	08000291 	.word	0x08000291
 80001d8:	080002a9 	.word	0x080002a9
 80001dc:	080002a9 	.word	0x080002a9
 80001e0:	080002a9 	.word	0x080002a9
 80001e4:	080002a9 	.word	0x080002a9
 80001e8:	080002a9 	.word	0x080002a9
 80001ec:	080002a9 	.word	0x080002a9
 80001f0:	08000299 	.word	0x08000299
 80001f4:	080002a1 	.word	0x080002a1
		case BL_GET_VER_CMD:{
			status = Bootloader_Get_Version(hostBuffer);
 80001f8:	4834      	ldr	r0, [pc, #208]	; (80002cc <BL_fetchHostCommand+0x168>)
 80001fa:	f000 f913 	bl	8000424 <Bootloader_Get_Version>
 80001fe:	4603      	mov	r3, r0
 8000200:	71bb      	strb	r3, [r7, #6]
			if(status == BL_STATUS_NOK) BL_Print_Message("Error GET Version\r\n");
 8000202:	79bb      	ldrb	r3, [r7, #6]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d153      	bne.n	80002b0 <BL_fetchHostCommand+0x14c>
 8000208:	4833      	ldr	r0, [pc, #204]	; (80002d8 <BL_fetchHostCommand+0x174>)
 800020a:	f000 f877 	bl	80002fc <BL_Print_Message>
			break;
 800020e:	e04f      	b.n	80002b0 <BL_fetchHostCommand+0x14c>
		}
		case BL_GET_HELP_CMD:{
			status = Bootloader_Get_Help(hostBuffer);
 8000210:	482e      	ldr	r0, [pc, #184]	; (80002cc <BL_fetchHostCommand+0x168>)
 8000212:	f000 f93d 	bl	8000490 <Bootloader_Get_Help>
 8000216:	4603      	mov	r3, r0
 8000218:	71bb      	strb	r3, [r7, #6]
			if(status == BL_STATUS_NOK) BL_Print_Message("Error GET HELP CMD \r\n");
 800021a:	79bb      	ldrb	r3, [r7, #6]
 800021c:	2b01      	cmp	r3, #1
 800021e:	d149      	bne.n	80002b4 <BL_fetchHostCommand+0x150>
 8000220:	482e      	ldr	r0, [pc, #184]	; (80002dc <BL_fetchHostCommand+0x178>)
 8000222:	f000 f86b 	bl	80002fc <BL_Print_Message>
			break;
 8000226:	e045      	b.n	80002b4 <BL_fetchHostCommand+0x150>
		}
		case BL_GET_CID_CMD:{
			status = Bootloader_Get_Chip_Identification_Number(hostBuffer);
 8000228:	4828      	ldr	r0, [pc, #160]	; (80002cc <BL_fetchHostCommand+0x168>)
 800022a:	f000 f965 	bl	80004f8 <Bootloader_Get_Chip_Identification_Number>
 800022e:	4603      	mov	r3, r0
 8000230:	71bb      	strb	r3, [r7, #6]
			if(status == BL_STATUS_NOK) BL_Print_Message("Error GET HELP CMD \r\n");
 8000232:	79bb      	ldrb	r3, [r7, #6]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d13f      	bne.n	80002b8 <BL_fetchHostCommand+0x154>
 8000238:	4828      	ldr	r0, [pc, #160]	; (80002dc <BL_fetchHostCommand+0x178>)
 800023a:	f000 f85f 	bl	80002fc <BL_Print_Message>
			break;
 800023e:	e03b      	b.n	80002b8 <BL_fetchHostCommand+0x154>
		}
		case BL_GET_RDP_STATUS_CMD:{
			BL_Print_Message("CBL_GET_RDP_STATUS_CMD \r\n");
 8000240:	4827      	ldr	r0, [pc, #156]	; (80002e0 <BL_fetchHostCommand+0x17c>)
 8000242:	f000 f85b 	bl	80002fc <BL_Print_Message>
			break;
 8000246:	e03c      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
		}
		case BL_GO_TO_ADDR_CMD:{
			status = Bootloader_Jump_To_Address(hostBuffer);
 8000248:	4820      	ldr	r0, [pc, #128]	; (80002cc <BL_fetchHostCommand+0x168>)
 800024a:	f000 f9b9 	bl	80005c0 <Bootloader_Jump_To_Address>
 800024e:	4603      	mov	r3, r0
 8000250:	71bb      	strb	r3, [r7, #6]
			if(status == BL_STATUS_NOK) BL_Print_Message("Error GET HELP CMD \r\n");
 8000252:	79bb      	ldrb	r3, [r7, #6]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d131      	bne.n	80002bc <BL_fetchHostCommand+0x158>
 8000258:	4820      	ldr	r0, [pc, #128]	; (80002dc <BL_fetchHostCommand+0x178>)
 800025a:	f000 f84f 	bl	80002fc <BL_Print_Message>
			break;
 800025e:	e02d      	b.n	80002bc <BL_fetchHostCommand+0x158>
		}
		case BL_FLASH_ERASE_CMD:{
			status = Bootloader_Erase_Flash(hostBuffer);
 8000260:	481a      	ldr	r0, [pc, #104]	; (80002cc <BL_fetchHostCommand+0x168>)
 8000262:	f000 fa47 	bl	80006f4 <Bootloader_Erase_Flash>
 8000266:	4603      	mov	r3, r0
 8000268:	71bb      	strb	r3, [r7, #6]
			if(status == BL_STATUS_NOK) BL_Print_Message("Error GET HELP CMD \r\n");
 800026a:	79bb      	ldrb	r3, [r7, #6]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d127      	bne.n	80002c0 <BL_fetchHostCommand+0x15c>
 8000270:	481a      	ldr	r0, [pc, #104]	; (80002dc <BL_fetchHostCommand+0x178>)
 8000272:	f000 f843 	bl	80002fc <BL_Print_Message>
			break;
 8000276:	e023      	b.n	80002c0 <BL_fetchHostCommand+0x15c>
		}
		case BL_MEM_WRITE_CMD:{
			Bootloader_Write_Data(hostBuffer);
 8000278:	4814      	ldr	r0, [pc, #80]	; (80002cc <BL_fetchHostCommand+0x168>)
 800027a:	f000 fa85 	bl	8000788 <Bootloader_Write_Data>
			break;
 800027e:	e020      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
		}
		case BL_ED_W_PROTECT_CMD:{
			BL_Print_Message("CBL_ED_W_PROTECT_CMD \r\n");
 8000280:	4818      	ldr	r0, [pc, #96]	; (80002e4 <BL_fetchHostCommand+0x180>)
 8000282:	f000 f83b 	bl	80002fc <BL_Print_Message>
			break;
 8000286:	e01c      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
		}
		case BL_MEM_READ_CMD:{
			BL_Print_Message("CBL_MEM_READ_CMD \r\n");
 8000288:	4817      	ldr	r0, [pc, #92]	; (80002e8 <BL_fetchHostCommand+0x184>)
 800028a:	f000 f837 	bl	80002fc <BL_Print_Message>
			break;
 800028e:	e018      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
		}
		case BL_READ_SECTOR_STATUS_CMD:{
			BL_Print_Message("CBL_READ_SECTOR_STATUS_CMD \r\n");
 8000290:	4816      	ldr	r0, [pc, #88]	; (80002ec <BL_fetchHostCommand+0x188>)
 8000292:	f000 f833 	bl	80002fc <BL_Print_Message>
			break;
 8000296:	e014      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
				}
		case BL_OTP_READ_CMD:{
			BL_Print_Message("CBL_OTP_READ_CMD \r\n");
 8000298:	4815      	ldr	r0, [pc, #84]	; (80002f0 <BL_fetchHostCommand+0x18c>)
 800029a:	f000 f82f 	bl	80002fc <BL_Print_Message>
			break;
 800029e:	e010      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
				}
		case BL_CHANGE_ROP_Level_CMD:{
			BL_Print_Message("CBL_CHANGE_ROP_Level_CMD \r\n");
 80002a0:	4814      	ldr	r0, [pc, #80]	; (80002f4 <BL_fetchHostCommand+0x190>)
 80002a2:	f000 f82b 	bl	80002fc <BL_Print_Message>
			break;
 80002a6:	e00c      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
		}
		default:{
			BL_Print_Message("Invalid Command\r\n");
 80002a8:	4813      	ldr	r0, [pc, #76]	; (80002f8 <BL_fetchHostCommand+0x194>)
 80002aa:	f000 f827 	bl	80002fc <BL_Print_Message>
			break;
 80002ae:	e008      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
			break;
 80002b0:	bf00      	nop
 80002b2:	e006      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
			break;
 80002b4:	bf00      	nop
 80002b6:	e004      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
			break;
 80002b8:	bf00      	nop
 80002ba:	e002      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
			break;
 80002bc:	bf00      	nop
 80002be:	e000      	b.n	80002c2 <BL_fetchHostCommand+0x15e>
			break;
 80002c0:	bf00      	nop
		}
	}
}
 80002c2:	bf00      	nop
 80002c4:	3708      	adds	r7, #8
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	2000009c 	.word	0x2000009c
 80002d0:	2000010c 	.word	0x2000010c
 80002d4:	2000009d 	.word	0x2000009d
 80002d8:	08002e4c 	.word	0x08002e4c
 80002dc:	08002e60 	.word	0x08002e60
 80002e0:	08002e78 	.word	0x08002e78
 80002e4:	08002e94 	.word	0x08002e94
 80002e8:	08002eac 	.word	0x08002eac
 80002ec:	08002ec0 	.word	0x08002ec0
 80002f0:	08002ee0 	.word	0x08002ee0
 80002f4:	08002ef4 	.word	0x08002ef4
 80002f8:	08002f10 	.word	0x08002f10

080002fc <BL_Print_Message>:


void BL_Print_Message(char *format, ...){
 80002fc:	b40f      	push	{r0, r1, r2, r3}
 80002fe:	b580      	push	{r7, lr}
 8000300:	b09a      	sub	sp, #104	; 0x68
 8000302:	af00      	add	r7, sp, #0
	test();
 8000304:	f7ff ff22 	bl	800014c <test>
	char Messsage[100] = {0};
 8000308:	2300      	movs	r3, #0
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	f107 0308 	add.w	r3, r7, #8
 8000310:	2260      	movs	r2, #96	; 0x60
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f002 f90b 	bl	8002530 <memset>
	va_list args;
	va_start(args, format);
 800031a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800031e:	603b      	str	r3, [r7, #0]
	vsprintf(Messsage, format, args);
 8000320:	1d3b      	adds	r3, r7, #4
 8000322:	683a      	ldr	r2, [r7, #0]
 8000324:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8000326:	4618      	mov	r0, r3
 8000328:	f002 f920 	bl	800256c <vsiprintf>
	HAL_UART_Transmit(BL_hostCommunicationUART, (uint8_t *)Messsage, sizeof(Messsage), HAL_MAX_DELAY);
 800032c:	1d39      	adds	r1, r7, #4
 800032e:	f04f 33ff 	mov.w	r3, #4294967295
 8000332:	2264      	movs	r2, #100	; 0x64
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <BL_Print_Message+0x4c>)
 8000336:	f001 febf 	bl	80020b8 <HAL_UART_Transmit>
	va_end(args);
}
 800033a:	bf00      	nop
 800033c:	3768      	adds	r7, #104	; 0x68
 800033e:	46bd      	mov	sp, r7
 8000340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000344:	b004      	add	sp, #16
 8000346:	4770      	bx	lr
 8000348:	2000010c 	.word	0x2000010c

0800034c <Bootloader_Send_Data_To_Host>:

/************************************ Implement static functions*********************************/



static void Bootloader_Send_Data_To_Host(uint8_t *copy_Puint8_hostBuffer, uint32_t copy_uint32_dataLenght){
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(BL_hostCommunicationUART, copy_Puint8_hostBuffer, copy_uint32_dataLenght, HAL_MAX_DELAY);
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	b29a      	uxth	r2, r3
 800035a:	f04f 33ff 	mov.w	r3, #4294967295
 800035e:	6879      	ldr	r1, [r7, #4]
 8000360:	4803      	ldr	r0, [pc, #12]	; (8000370 <Bootloader_Send_Data_To_Host+0x24>)
 8000362:	f001 fea9 	bl	80020b8 <HAL_UART_Transmit>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	2000010c 	.word	0x2000010c

08000374 <Bootloader_Send_ACK>:

static void Bootloader_Send_ACK(uint8_t copy_uint8_replayLenght){
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	71fb      	strb	r3, [r7, #7]
	uint8_t sendACK[2];
	sendACK[0] = BL_ACK;
 800037e:	23ab      	movs	r3, #171	; 0xab
 8000380:	733b      	strb	r3, [r7, #12]
	sendACK[1] = copy_uint8_replayLenght;
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	737b      	strb	r3, [r7, #13]
	/*send ACK to the host then the number of bytes that host wait*/
	Bootloader_Send_Data_To_Host((uint8_t*)sendACK , 2);
 8000386:	f107 030c 	add.w	r3, r7, #12
 800038a:	2102      	movs	r1, #2
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ffdd 	bl	800034c <Bootloader_Send_Data_To_Host>
}
 8000392:	bf00      	nop
 8000394:	3710      	adds	r7, #16
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}

0800039a <Bootloader_Send_NACK>:

static void Bootloader_Send_NACK(void){
 800039a:	b580      	push	{r7, lr}
 800039c:	b082      	sub	sp, #8
 800039e:	af00      	add	r7, sp, #0
	uint8_t sendNack = BL_NACK;
 80003a0:	23cd      	movs	r3, #205	; 0xcd
 80003a2:	71fb      	strb	r3, [r7, #7]
	Bootloader_Send_Data_To_Host(&sendNack , 1);
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	2101      	movs	r1, #1
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ffcf 	bl	800034c <Bootloader_Send_Data_To_Host>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <Bootloader_CRC_Verify>:


static BL_Status Bootloader_CRC_Verify(uint8_t *copy_Puint8_Data, uint32_t copy_uint32_dataLenght,
		uint32_t copy_uint32_hostCRC){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0
 80003be:	60f8      	str	r0, [r7, #12]
 80003c0:	60b9      	str	r1, [r7, #8]
 80003c2:	607a      	str	r2, [r7, #4]
	BL_Status status = BL_CRC_NOK;
 80003c4:	2303      	movs	r3, #3
 80003c6:	77fb      	strb	r3, [r7, #31]
	uint32_t CRC_value = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61bb      	str	r3, [r7, #24]
	uint32_t bufferData;
	/*calculate CRC*/
	for(uint8_t counter = 0 ; counter < copy_uint32_dataLenght ; counter++){
 80003cc:	2300      	movs	r3, #0
 80003ce:	75fb      	strb	r3, [r7, #23]
 80003d0:	e00f      	b.n	80003f2 <Bootloader_CRC_Verify+0x3a>
		bufferData = (uint32_t)copy_Puint8_Data[counter];
 80003d2:	7dfb      	ldrb	r3, [r7, #23]
 80003d4:	68fa      	ldr	r2, [r7, #12]
 80003d6:	4413      	add	r3, r2
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	613b      	str	r3, [r7, #16]
		CRC_value = HAL_CRC_Accumulate(CRC_REG , &bufferData , 1);
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	2201      	movs	r2, #1
 80003e2:	4619      	mov	r1, r3
 80003e4:	480e      	ldr	r0, [pc, #56]	; (8000420 <Bootloader_CRC_Verify+0x68>)
 80003e6:	f000 fe40 	bl	800106a <HAL_CRC_Accumulate>
 80003ea:	61b8      	str	r0, [r7, #24]
	for(uint8_t counter = 0 ; counter < copy_uint32_dataLenght ; counter++){
 80003ec:	7dfb      	ldrb	r3, [r7, #23]
 80003ee:	3301      	adds	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
 80003f2:	7dfb      	ldrb	r3, [r7, #23]
 80003f4:	68ba      	ldr	r2, [r7, #8]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d8eb      	bhi.n	80003d2 <Bootloader_CRC_Verify+0x1a>
	}
	__HAL_CRC_DR_RESET(CRC_REG);
 80003fa:	4b09      	ldr	r3, [pc, #36]	; (8000420 <Bootloader_CRC_Verify+0x68>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	689a      	ldr	r2, [r3, #8]
 8000400:	4b07      	ldr	r3, [pc, #28]	; (8000420 <Bootloader_CRC_Verify+0x68>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f042 0201 	orr.w	r2, r2, #1
 8000408:	609a      	str	r2, [r3, #8]

	/*compare CRC calculated by CRC is send*/
	if(CRC_value == copy_uint32_hostCRC) status = BL_CRC_OK;
 800040a:	69ba      	ldr	r2, [r7, #24]
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	429a      	cmp	r2, r3
 8000410:	d101      	bne.n	8000416 <Bootloader_CRC_Verify+0x5e>
 8000412:	2302      	movs	r3, #2
 8000414:	77fb      	strb	r3, [r7, #31]
	return status;
 8000416:	7ffb      	ldrb	r3, [r7, #31]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3720      	adds	r7, #32
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000100 	.word	0x20000100

08000424 <Bootloader_Get_Version>:


static BL_Status Bootloader_Get_Version(uint8_t *copy_Puint8_hostBuffer){
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	BL_Status status = BL_STATUS_NOK;
 800042c:	2301      	movs	r3, #1
 800042e:	75fb      	strb	r3, [r7, #23]
	/*define array that include version data*/
	uint8_t BL_version[4] = {BL_VENDOR_ID , BL_MAJOR_VERSION , BL_MINOR_VERSION , BL_PATCH_VERSION};
 8000430:	f44f 73b2 	mov.w	r3, #356	; 0x164
 8000434:	60bb      	str	r3, [r7, #8]
	uint8_t commandLenght;
	uint32_t CRC_hostValue = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	613b      	str	r3, [r7, #16]
	commandLenght = copy_Puint8_hostBuffer[0] + 1;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	3301      	adds	r3, #1
 8000440:	73fb      	strb	r3, [r7, #15]
	CRC_hostValue = *(uint32_t*)(copy_Puint8_hostBuffer + commandLenght - CRC_SIZE_BYTES);
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	3b04      	subs	r3, #4
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	4413      	add	r3, r2
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	613b      	str	r3, [r7, #16]
	status = Bootloader_CRC_Verify(&copy_Puint8_hostBuffer[0], commandLenght - CRC_SIZE_BYTES
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	3b04      	subs	r3, #4
 8000452:	693a      	ldr	r2, [r7, #16]
 8000454:	4619      	mov	r1, r3
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff ffae 	bl	80003b8 <Bootloader_CRC_Verify>
 800045c:	4603      	mov	r3, r0
 800045e:	75fb      	strb	r3, [r7, #23]
			, CRC_hostValue);
	if(status == BL_CRC_OK){
 8000460:	7dfb      	ldrb	r3, [r7, #23]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d10b      	bne.n	800047e <Bootloader_Get_Version+0x5a>
		status = BL_STATUS_OK;
 8000466:	2300      	movs	r3, #0
 8000468:	75fb      	strb	r3, [r7, #23]
		/*send ACK to the host*/
		Bootloader_Send_ACK(4);
 800046a:	2004      	movs	r0, #4
 800046c:	f7ff ff82 	bl	8000374 <Bootloader_Send_ACK>
		/*send the data to the host*/
		Bootloader_Send_Data_To_Host((uint8_t *)&BL_version[0] , 4);
 8000470:	f107 0308 	add.w	r3, r7, #8
 8000474:	2104      	movs	r1, #4
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff68 	bl	800034c <Bootloader_Send_Data_To_Host>
 800047c:	e003      	b.n	8000486 <Bootloader_Get_Version+0x62>
	}else{
		status = BL_STATUS_NOK;
 800047e:	2301      	movs	r3, #1
 8000480:	75fb      	strb	r3, [r7, #23]
		Bootloader_Send_NACK();
 8000482:	f7ff ff8a 	bl	800039a <Bootloader_Send_NACK>
	}
	return status;
 8000486:	7dfb      	ldrb	r3, [r7, #23]
}
 8000488:	4618      	mov	r0, r3
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <Bootloader_Get_Help>:

static BL_Status Bootloader_Get_Help(uint8_t *copy_Puint8_hostBuffer){
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	BL_Status status = BL_STATUS_NOK;
 8000498:	2301      	movs	r3, #1
 800049a:	75fb      	strb	r3, [r7, #23]
	uint8_t commandLenght;
	uint32_t CRC_hostValue = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	613b      	str	r3, [r7, #16]
	commandLenght = copy_Puint8_hostBuffer[0] + 1;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	73fb      	strb	r3, [r7, #15]
	CRC_hostValue = *(uint32_t*)(copy_Puint8_hostBuffer + commandLenght - CRC_SIZE_BYTES);
 80004a8:	7bfb      	ldrb	r3, [r7, #15]
 80004aa:	3b04      	subs	r3, #4
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	4413      	add	r3, r2
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	613b      	str	r3, [r7, #16]
	status = Bootloader_CRC_Verify(&copy_Puint8_hostBuffer[0], commandLenght - CRC_SIZE_BYTES
 80004b4:	7bfb      	ldrb	r3, [r7, #15]
 80004b6:	3b04      	subs	r3, #4
 80004b8:	693a      	ldr	r2, [r7, #16]
 80004ba:	4619      	mov	r1, r3
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f7ff ff7b 	bl	80003b8 <Bootloader_CRC_Verify>
 80004c2:	4603      	mov	r3, r0
 80004c4:	75fb      	strb	r3, [r7, #23]
			, CRC_hostValue);
		if(status == BL_CRC_OK){
 80004c6:	7dfb      	ldrb	r3, [r7, #23]
 80004c8:	2b02      	cmp	r3, #2
 80004ca:	d109      	bne.n	80004e0 <Bootloader_Get_Help+0x50>
			status = BL_STATUS_OK;
 80004cc:	2300      	movs	r3, #0
 80004ce:	75fb      	strb	r3, [r7, #23]
			/*send ACK to the host*/
			Bootloader_Send_ACK(12);
 80004d0:	200c      	movs	r0, #12
 80004d2:	f7ff ff4f 	bl	8000374 <Bootloader_Send_ACK>
			Bootloader_Send_Data_To_Host((uint8_t *)&Bootloader_Supported_CMDs[0] , 12);
 80004d6:	210c      	movs	r1, #12
 80004d8:	4806      	ldr	r0, [pc, #24]	; (80004f4 <Bootloader_Get_Help+0x64>)
 80004da:	f7ff ff37 	bl	800034c <Bootloader_Send_Data_To_Host>
 80004de:	e003      	b.n	80004e8 <Bootloader_Get_Help+0x58>
		}else{
			status = BL_STATUS_NOK;
 80004e0:	2301      	movs	r3, #1
 80004e2:	75fb      	strb	r3, [r7, #23]
			Bootloader_Send_NACK();
 80004e4:	f7ff ff59 	bl	800039a <Bootloader_Send_NACK>
		}
	return status;
 80004e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3718      	adds	r7, #24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000000 	.word	0x20000000

080004f8 <Bootloader_Get_Chip_Identification_Number>:


static BL_Status Bootloader_Get_Chip_Identification_Number(uint8_t *copy_Puint8_hostBuffer){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	BL_Status status = BL_STATUS_NOK;
 8000500:	2301      	movs	r3, #1
 8000502:	75fb      	strb	r3, [r7, #23]
		uint8_t commandLenght;
		uint32_t CRC_hostValue = 0;
 8000504:	2300      	movs	r3, #0
 8000506:	613b      	str	r3, [r7, #16]
		uint16_t MCU_ID_Number = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	81bb      	strh	r3, [r7, #12]
		commandLenght = copy_Puint8_hostBuffer[0] + 1;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	73fb      	strb	r3, [r7, #15]
		CRC_hostValue = *(uint32_t*)(copy_Puint8_hostBuffer + commandLenght - CRC_SIZE_BYTES);
 8000514:	7bfb      	ldrb	r3, [r7, #15]
 8000516:	3b04      	subs	r3, #4
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4413      	add	r3, r2
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	613b      	str	r3, [r7, #16]
		status = Bootloader_CRC_Verify(&copy_Puint8_hostBuffer[0], commandLenght - CRC_SIZE_BYTES
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	3b04      	subs	r3, #4
 8000524:	693a      	ldr	r2, [r7, #16]
 8000526:	4619      	mov	r1, r3
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff ff45 	bl	80003b8 <Bootloader_CRC_Verify>
 800052e:	4603      	mov	r3, r0
 8000530:	75fb      	strb	r3, [r7, #23]
				, CRC_hostValue);
		MCU_ID_Number = (uint16_t)((DBGMCU->IDCODE) & 0x00000FFF);
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <Bootloader_Get_Chip_Identification_Number+0x78>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	b29b      	uxth	r3, r3
 8000538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800053c:	b29b      	uxth	r3, r3
 800053e:	81bb      	strh	r3, [r7, #12]
			if(status == BL_CRC_OK){
 8000540:	7dfb      	ldrb	r3, [r7, #23]
 8000542:	2b02      	cmp	r3, #2
 8000544:	d10b      	bne.n	800055e <Bootloader_Get_Chip_Identification_Number+0x66>
				status = BL_STATUS_OK;
 8000546:	2300      	movs	r3, #0
 8000548:	75fb      	strb	r3, [r7, #23]
				/*send ACK to the host*/
				Bootloader_Send_ACK(2);
 800054a:	2002      	movs	r0, #2
 800054c:	f7ff ff12 	bl	8000374 <Bootloader_Send_ACK>
				Bootloader_Send_Data_To_Host((uint8_t *)&MCU_ID_Number, 2);
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2102      	movs	r1, #2
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fef8 	bl	800034c <Bootloader_Send_Data_To_Host>
 800055c:	e003      	b.n	8000566 <Bootloader_Get_Chip_Identification_Number+0x6e>
			}else{
				status = BL_STATUS_NOK;
 800055e:	2301      	movs	r3, #1
 8000560:	75fb      	strb	r3, [r7, #23]
				Bootloader_Send_NACK();
 8000562:	f7ff ff1a 	bl	800039a <Bootloader_Send_NACK>
			}
		return status;
 8000566:	7dfb      	ldrb	r3, [r7, #23]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	e0042000 	.word	0xe0042000

08000574 <Host_Address_Verification>:


static uint8_t Host_Address_Verification(uint32_t copy_uint32_jumpAddress){
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	uint8_t address_verification = ADDRESS_IS_INVALID;
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
	if(copy_uint32_jumpAddress >= FLASH_LOWER && copy_uint32_jumpAddress <= FLASH_UPPER){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000586:	d306      	bcc.n	8000596 <Host_Address_Verification+0x22>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <Host_Address_Verification+0x44>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d802      	bhi.n	8000596 <Host_Address_Verification+0x22>
		address_verification = ADDRESS_IS_VALID;
 8000590:	2301      	movs	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	e009      	b.n	80005aa <Host_Address_Verification+0x36>
	}
	else if(copy_uint32_jumpAddress >= RAM_LOWER && copy_uint32_jumpAddress <= RAM_UPPER){
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800059c:	d305      	bcc.n	80005aa <Host_Address_Verification+0x36>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <Host_Address_Verification+0x48>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d801      	bhi.n	80005aa <Host_Address_Verification+0x36>
		address_verification = ADDRESS_IS_VALID;
 80005a6:	2301      	movs	r3, #1
 80005a8:	73fb      	strb	r3, [r7, #15]
	}
	return address_verification;
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	08020000 	.word	0x08020000
 80005bc:	20005000 	.word	0x20005000

080005c0 <Bootloader_Jump_To_Address>:


static BL_Status Bootloader_Jump_To_Address(uint8_t *copy_Puint8_hostBuffer){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	BL_Status status = BL_STATUS_NOK;
 80005c8:	2301      	movs	r3, #1
 80005ca:	77fb      	strb	r3, [r7, #31]
	uint8_t address_verification = ADDRESS_IS_INVALID;
 80005cc:	2300      	movs	r3, #0
 80005ce:	72fb      	strb	r3, [r7, #11]
	uint8_t commandLenght;
	uint32_t CRC_hostValue = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
	uint32_t jumpAddress = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
	commandLenght = copy_Puint8_hostBuffer[0] + 1;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	3301      	adds	r3, #1
 80005de:	74fb      	strb	r3, [r7, #19]
	CRC_hostValue = *(uint32_t*)(copy_Puint8_hostBuffer + commandLenght - CRC_SIZE_BYTES);
 80005e0:	7cfb      	ldrb	r3, [r7, #19]
 80005e2:	3b04      	subs	r3, #4
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	61bb      	str	r3, [r7, #24]
	status = Bootloader_CRC_Verify(&copy_Puint8_hostBuffer[0], commandLenght - CRC_SIZE_BYTES
 80005ec:	7cfb      	ldrb	r3, [r7, #19]
 80005ee:	3b04      	subs	r3, #4
 80005f0:	69ba      	ldr	r2, [r7, #24]
 80005f2:	4619      	mov	r1, r3
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff fedf 	bl	80003b8 <Bootloader_CRC_Verify>
 80005fa:	4603      	mov	r3, r0
 80005fc:	77fb      	strb	r3, [r7, #31]
				, CRC_hostValue);
	if(status == BL_CRC_OK){
 80005fe:	7ffb      	ldrb	r3, [r7, #31]
 8000600:	2b02      	cmp	r3, #2
 8000602:	d122      	bne.n	800064a <Bootloader_Jump_To_Address+0x8a>
		Bootloader_Send_ACK(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff feb5 	bl	8000374 <Bootloader_Send_ACK>
		jumpAddress = *((uint32_t *)&hostBuffer[2]);
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <Bootloader_Jump_To_Address+0x9c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	617b      	str	r3, [r7, #20]
		address_verification = Host_Address_Verification(jumpAddress);
 8000610:	6978      	ldr	r0, [r7, #20]
 8000612:	f7ff ffaf 	bl	8000574 <Host_Address_Verification>
 8000616:	4603      	mov	r3, r0
 8000618:	72fb      	strb	r3, [r7, #11]
		if(address_verification == ADDRESS_IS_VALID){
 800061a:	7afb      	ldrb	r3, [r7, #11]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d10d      	bne.n	800063c <Bootloader_Jump_To_Address+0x7c>
			Bootloader_Send_Data_To_Host( (uint8_t *)&address_verification , 1);
 8000620:	f107 030b 	add.w	r3, r7, #11
 8000624:	2101      	movs	r1, #1
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff fe90 	bl	800034c <Bootloader_Send_Data_To_Host>
			/*JUMP TO THE ADDRESS*/
			/*CASTING To pointer to function*/
			jumpAdressPtr addresToJumpPF = (jumpAdressPtr)(jumpAddress + 1);
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	3301      	adds	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
			addresToJumpPF();
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	4798      	blx	r3
			status = BL_STATUS_OK;
 8000636:	2300      	movs	r3, #0
 8000638:	77fb      	strb	r3, [r7, #31]
 800063a:	e00a      	b.n	8000652 <Bootloader_Jump_To_Address+0x92>
		}
		else{
			Bootloader_Send_Data_To_Host( (uint8_t *)&address_verification , 1);
 800063c:	f107 030b 	add.w	r3, r7, #11
 8000640:	2101      	movs	r1, #1
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fe82 	bl	800034c <Bootloader_Send_Data_To_Host>
 8000648:	e003      	b.n	8000652 <Bootloader_Jump_To_Address+0x92>
		}
	}
	else{
		status = BL_STATUS_NOK;
 800064a:	2301      	movs	r3, #1
 800064c:	77fb      	strb	r3, [r7, #31]
		Bootloader_Send_NACK();
 800064e:	f7ff fea4 	bl	800039a <Bootloader_Send_NACK>
	}
	return status;
 8000652:	7ffb      	ldrb	r3, [r7, #31]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000009e 	.word	0x2000009e

08000660 <Perform_Flash_Erase>:


static uint8_t Perform_Flash_Erase(uint32_t PageAddress, uint8_t page_Number)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
	FLASH_EraseInitTypeDef pEraseInit;
	HAL_StatusTypeDef Hal_status  = HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	77bb      	strb	r3, [r7, #30]
	uint32_t PageError =0;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
	uint8_t PageStatus=INVALID_PAGE_NUMBER;
 8000674:	2300      	movs	r3, #0
 8000676:	77fb      	strb	r3, [r7, #31]

	if(page_Number <= CBL_FLASH_MAX_PAGE_NUMBER)
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	2b0c      	cmp	r3, #12
 800067c:	d832      	bhi.n	80006e4 <Perform_Flash_Erase+0x84>
	{
		if(page_Number<= (CBL_FLASH_MAX_PAGE_NUMBER - 1) || PageAddress == CBL_FLASH_MASS_ERASE)
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	2b0b      	cmp	r3, #11
 8000682:	d902      	bls.n	800068a <Perform_Flash_Erase+0x2a>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2bff      	cmp	r3, #255	; 0xff
 8000688:	d12c      	bne.n	80006e4 <Perform_Flash_Erase+0x84>
		{
			PageStatus=VALID_PAGE_NUMBER;
 800068a:	2301      	movs	r3, #1
 800068c:	77fb      	strb	r3, [r7, #31]
			if(PageAddress ==CBL_FLASH_MASS_ERASE )
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2bff      	cmp	r3, #255	; 0xff
 8000692:	d108      	bne.n	80006a6 <Perform_Flash_Erase+0x46>
			{
				pEraseInit.TypeErase =FLASH_TYPEERASE_PAGES;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
				pEraseInit.Banks = FLASH_BANK_1;
 8000698:	2301      	movs	r3, #1
 800069a:	613b      	str	r3, [r7, #16]
				pEraseInit.PageAddress = 0x08008000;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <Perform_Flash_Erase+0x90>)
 800069e:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages =96;
 80006a0:	2360      	movs	r3, #96	; 0x60
 80006a2:	61bb      	str	r3, [r7, #24]
 80006a4:	e007      	b.n	80006b6 <Perform_Flash_Erase+0x56>
			}
			else{
				pEraseInit.TypeErase =FLASH_TYPEERASE_PAGES;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
				pEraseInit.Banks = FLASH_BANK_1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	613b      	str	r3, [r7, #16]
				pEraseInit.PageAddress = PageAddress;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	617b      	str	r3, [r7, #20]
				pEraseInit.NbPages =page_Number;
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	61bb      	str	r3, [r7, #24]
			}
			HAL_FLASH_Unlock();
 80006b6:	f000 fd73 	bl	80011a0 <HAL_FLASH_Unlock>
			Hal_status = HAL_FLASHEx_Erase(&pEraseInit,&PageError);
 80006ba:	f107 0208 	add.w	r2, r7, #8
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	4611      	mov	r1, r2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 fe53 	bl	8001370 <HAL_FLASHEx_Erase>
 80006ca:	4603      	mov	r3, r0
 80006cc:	77bb      	strb	r3, [r7, #30]
			HAL_FLASH_Lock();
 80006ce:	f000 fd8d 	bl	80011ec <HAL_FLASH_Lock>
			if(PageError == HAL_SUCCESSFUL_ERASE)
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006d8:	d102      	bne.n	80006e0 <Perform_Flash_Erase+0x80>
			{
				PageStatus=SUCCESSFUL_ERASE;
 80006da:	2303      	movs	r3, #3
 80006dc:	77fb      	strb	r3, [r7, #31]
 80006de:	e001      	b.n	80006e4 <Perform_Flash_Erase+0x84>
			}
			else{
				PageStatus=UNSUCCESSFUL_ERASE;
 80006e0:	2302      	movs	r3, #2
 80006e2:	77fb      	strb	r3, [r7, #31]
			}
		}

	}

return PageStatus;
 80006e4:	7ffb      	ldrb	r3, [r7, #31]

}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3720      	adds	r7, #32
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	08008000 	.word	0x08008000

080006f4 <Bootloader_Erase_Flash>:

static BL_Status Bootloader_Erase_Flash(uint8_t *copy_Puint8_hostBuffer){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	BL_Status status = BL_STATUS_NOK ;
 80006fc:	2301      	movs	r3, #1
 80006fe:	75fb      	strb	r3, [r7, #23]
	uint8_t commandLenght ;
	uint32_t CRC_hostValue = 0 ;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
	uint8_t eraseStatus = UNSUCCESSFUL_ERASE ;
 8000704:	2302      	movs	r3, #2
 8000706:	73bb      	strb	r3, [r7, #14]
	commandLenght = copy_Puint8_hostBuffer[0] + 1 ;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	3301      	adds	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
	CRC_hostValue = *(uint32_t*)(copy_Puint8_hostBuffer + commandLenght - CRC_SIZE_BYTES) ;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	3b04      	subs	r3, #4
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	613b      	str	r3, [r7, #16]
	status = Bootloader_CRC_Verify(&copy_Puint8_hostBuffer[0], commandLenght - CRC_SIZE_BYTES
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	3b04      	subs	r3, #4
 8000720:	693a      	ldr	r2, [r7, #16]
 8000722:	4619      	mov	r1, r3
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f7ff fe47 	bl	80003b8 <Bootloader_CRC_Verify>
 800072a:	4603      	mov	r3, r0
 800072c:	75fb      	strb	r3, [r7, #23]
				, CRC_hostValue) ;
	if(status == BL_CRC_OK){
 800072e:	7dfb      	ldrb	r3, [r7, #23]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d11b      	bne.n	800076c <Bootloader_Erase_Flash+0x78>
		Bootloader_Send_ACK(1);
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff fe1d 	bl	8000374 <Bootloader_Send_ACK>
		/*erase flash*/
		eraseStatus = Perform_Flash_Erase(*(uint32_t*)&hostBuffer[2] , hostBuffer[6]);
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <Bootloader_Erase_Flash+0x8c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <Bootloader_Erase_Flash+0x90>)
 8000740:	7992      	ldrb	r2, [r2, #6]
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff8b 	bl	8000660 <Perform_Flash_Erase>
 800074a:	4603      	mov	r3, r0
 800074c:	73bb      	strb	r3, [r7, #14]
		if(eraseStatus == SUCCESSFUL_ERASE)   status = BL_STATUS_OK;
 800074e:	7bbb      	ldrb	r3, [r7, #14]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d102      	bne.n	800075a <Bootloader_Erase_Flash+0x66>
 8000754:	2300      	movs	r3, #0
 8000756:	75fb      	strb	r3, [r7, #23]
 8000758:	e001      	b.n	800075e <Bootloader_Erase_Flash+0x6a>
	    else   status = BL_STATUS_NOK;
 800075a:	2301      	movs	r3, #1
 800075c:	75fb      	strb	r3, [r7, #23]
		 Bootloader_Send_Data_To_Host((uint8_t *)&eraseStatus , 1);
 800075e:	f107 030e 	add.w	r3, r7, #14
 8000762:	2101      	movs	r1, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fdf1 	bl	800034c <Bootloader_Send_Data_To_Host>
 800076a:	e003      	b.n	8000774 <Bootloader_Erase_Flash+0x80>
	}
	else{
		status = BL_STATUS_NOK;
 800076c:	2301      	movs	r3, #1
 800076e:	75fb      	strb	r3, [r7, #23]
		Bootloader_Send_NACK();
 8000770:	f7ff fe13 	bl	800039a <Bootloader_Send_NACK>
	}
	return status;
 8000774:	7dfb      	ldrb	r3, [r7, #23]
}
 8000776:	4618      	mov	r0, r3
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	2000009e 	.word	0x2000009e
 8000784:	2000009c 	.word	0x2000009c

08000788 <Bootloader_Write_Data>:



static BL_Status Bootloader_Write_Data(uint8_t *copy_Puint8_hostBuffer)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	BL_Status status = BL_STATUS_NOK ;
 8000790:	2301      	movs	r3, #1
 8000792:	75fb      	strb	r3, [r7, #23]
	uint8_t commandLenght ;
	uint32_t CRC_hostValue = 0 ;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
	uint32_t hostAddress = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]
	uint8_t Payload_Len = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	72fb      	strb	r3, [r7, #11]
	uint8_t addressVerification = ADDRESS_IS_INVALID;
 80007a0:	2300      	movs	r3, #0
 80007a2:	727b      	strb	r3, [r7, #9]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80007a4:	2300      	movs	r3, #0
 80007a6:	723b      	strb	r3, [r7, #8]
	commandLenght = copy_Puint8_hostBuffer[0] + 1 ;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3301      	adds	r3, #1
 80007ae:	72bb      	strb	r3, [r7, #10]
	CRC_hostValue = *(uint32_t*)(copy_Puint8_hostBuffer + commandLenght - CRC_SIZE_BYTES) ;
 80007b0:	7abb      	ldrb	r3, [r7, #10]
 80007b2:	3b04      	subs	r3, #4
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4413      	add	r3, r2
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	613b      	str	r3, [r7, #16]
	status = Bootloader_CRC_Verify(&copy_Puint8_hostBuffer[0], commandLenght - CRC_SIZE_BYTES
 80007bc:	7abb      	ldrb	r3, [r7, #10]
 80007be:	3b04      	subs	r3, #4
 80007c0:	693a      	ldr	r2, [r7, #16]
 80007c2:	4619      	mov	r1, r3
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff fdf7 	bl	80003b8 <Bootloader_CRC_Verify>
 80007ca:	4603      	mov	r3, r0
 80007cc:	75fb      	strb	r3, [r7, #23]
				, CRC_hostValue) ;

	/* CRC Verification */
	if(status == BL_CRC_OK)
 80007ce:	7dfb      	ldrb	r3, [r7, #23]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d12c      	bne.n	800082e <Bootloader_Write_Data+0xa6>
	{
		Bootloader_Send_ACK(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff fdcd 	bl	8000374 <Bootloader_Send_ACK>
		hostAddress = *((uint32_t *)(&copy_Puint8_hostBuffer[2]));
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80007e0:	60fb      	str	r3, [r7, #12]
		Payload_Len = copy_Puint8_hostBuffer[6];
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	799b      	ldrb	r3, [r3, #6]
 80007e6:	72fb      	strb	r3, [r7, #11]
		addressVerification = Host_Address_Verification(hostAddress);
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff fec3 	bl	8000574 <Host_Address_Verification>
 80007ee:	4603      	mov	r3, r0
 80007f0:	727b      	strb	r3, [r7, #9]
		if(ADDRESS_IS_VALID == addressVerification)
 80007f2:	7a7b      	ldrb	r3, [r7, #9]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d111      	bne.n	800081c <Bootloader_Write_Data+0x94>
		{

			Flash_Payload_Write_Status = FlashMemory_Paylaod_Write((uint8_t *)&copy_Puint8_hostBuffer[7],
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3307      	adds	r3, #7
 80007fc:	7afa      	ldrb	r2, [r7, #11]
 80007fe:	68f9      	ldr	r1, [r7, #12]
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f81d 	bl	8000840 <FlashMemory_Paylaod_Write>
 8000806:	4603      	mov	r3, r0
 8000808:	723b      	strb	r3, [r7, #8]
					hostAddress, Payload_Len);

			Bootloader_Send_Data_To_Host((uint8_t *)&Flash_Payload_Write_Status, 1);
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	2101      	movs	r1, #1
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff fd9b 	bl	800034c <Bootloader_Send_Data_To_Host>
			status = BL_STATUS_OK;
 8000816:	2300      	movs	r3, #0
 8000818:	75fb      	strb	r3, [r7, #23]
 800081a:	e00c      	b.n	8000836 <Bootloader_Write_Data+0xae>
		}
		else
		{
			addressVerification = ADDRESS_IS_INVALID;
 800081c:	2300      	movs	r3, #0
 800081e:	727b      	strb	r3, [r7, #9]
			Bootloader_Send_Data_To_Host((uint8_t *)&addressVerification, 1);
 8000820:	f107 0309 	add.w	r3, r7, #9
 8000824:	2101      	movs	r1, #1
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff fd90 	bl	800034c <Bootloader_Send_Data_To_Host>
 800082c:	e003      	b.n	8000836 <Bootloader_Write_Data+0xae>
		}
	}
	else
	{
		status = BL_STATUS_NOK;
 800082e:	2301      	movs	r3, #1
 8000830:	75fb      	strb	r3, [r7, #23]
		/* Send Not acknowledge to the HOST */
		Bootloader_Send_NACK();
 8000832:	f7ff fdb2 	bl	800039a <Bootloader_Send_NACK>
	}
	return status;
 8000836:	7dfb      	ldrb	r3, [r7, #23]
}
 8000838:	4618      	mov	r0, r3
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <FlashMemory_Paylaod_Write>:


static uint8_t FlashMemory_Paylaod_Write(uint16_t * pdata,uint32_t StartAddress,uint8_t Payloadlen)
{
 8000840:	b5b0      	push	{r4, r5, r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	4613      	mov	r3, r2
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef HAL_Status = HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	77fb      	strb	r3, [r7, #31]
	uint8_t Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000852:	2300      	movs	r3, #0
 8000854:	77bb      	strb	r3, [r7, #30]
	uint16_t Payload_Counter = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	83bb      	strh	r3, [r7, #28]

	uint32_t Address=0;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
	uint8_t UpdataAdress=0;
 800085e:	2300      	movs	r3, #0
 8000860:	76fb      	strb	r3, [r7, #27]

	/* Unlock the FLASH control register access */
	HAL_Status = HAL_FLASH_Unlock();
 8000862:	f000 fc9d 	bl	80011a0 <HAL_FLASH_Unlock>
 8000866:	4603      	mov	r3, r0
 8000868:	77fb      	strb	r3, [r7, #31]

	if(HAL_Status != HAL_OK)
 800086a:	7ffb      	ldrb	r3, [r7, #31]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d002      	beq.n	8000876 <FlashMemory_Paylaod_Write+0x36>
	{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 8000870:	2300      	movs	r3, #0
 8000872:	77bb      	strb	r3, [r7, #30]
 8000874:	e02e      	b.n	80008d4 <FlashMemory_Paylaod_Write+0x94>
	}
	else
	{
		for(Payload_Counter=0 , UpdataAdress=0 ; Payload_Counter < Payloadlen/2 ; Payload_Counter++ , UpdataAdress+=2)
 8000876:	2300      	movs	r3, #0
 8000878:	83bb      	strh	r3, [r7, #28]
 800087a:	2300      	movs	r3, #0
 800087c:	76fb      	strb	r3, [r7, #27]
 800087e:	e022      	b.n	80008c6 <FlashMemory_Paylaod_Write+0x86>
		{
			Address = StartAddress + UpdataAdress;
 8000880:	7efb      	ldrb	r3, [r7, #27]
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	4413      	add	r3, r2
 8000886:	617b      	str	r3, [r7, #20]

			/* Program a byte at a specified address */
			HAL_Status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address , pdata[Payload_Counter]);
 8000888:	8bbb      	ldrh	r3, [r7, #28]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	4413      	add	r3, r2
 8000890:	881b      	ldrh	r3, [r3, #0]
 8000892:	b29b      	uxth	r3, r3
 8000894:	2200      	movs	r2, #0
 8000896:	461c      	mov	r4, r3
 8000898:	4615      	mov	r5, r2
 800089a:	4622      	mov	r2, r4
 800089c:	462b      	mov	r3, r5
 800089e:	6979      	ldr	r1, [r7, #20]
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 fc0d 	bl	80010c0 <HAL_FLASH_Program>
 80008a6:	4603      	mov	r3, r0
 80008a8:	77fb      	strb	r3, [r7, #31]

			if(HAL_Status != HAL_OK)
 80008aa:	7ffb      	ldrb	r3, [r7, #31]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d002      	beq.n	80008b6 <FlashMemory_Paylaod_Write+0x76>
			{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80008b0:	2300      	movs	r3, #0
 80008b2:	77bb      	strb	r3, [r7, #30]
				break;
 80008b4:	e00e      	b.n	80008d4 <FlashMemory_Paylaod_Write+0x94>
			}
			else
			{
				Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 80008b6:	2301      	movs	r3, #1
 80008b8:	77bb      	strb	r3, [r7, #30]
		for(Payload_Counter=0 , UpdataAdress=0 ; Payload_Counter < Payloadlen/2 ; Payload_Counter++ , UpdataAdress+=2)
 80008ba:	8bbb      	ldrh	r3, [r7, #28]
 80008bc:	3301      	adds	r3, #1
 80008be:	83bb      	strh	r3, [r7, #28]
 80008c0:	7efb      	ldrb	r3, [r7, #27]
 80008c2:	3302      	adds	r3, #2
 80008c4:	76fb      	strb	r3, [r7, #27]
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	8bba      	ldrh	r2, [r7, #28]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d3d5      	bcc.n	8000880 <FlashMemory_Paylaod_Write+0x40>
			}
		}
	}

	if((FLASH_PAYLOAD_WRITE_PASSED == Flash_Payload_Write_Status) && (HAL_OK == HAL_Status))
 80008d4:	7fbb      	ldrb	r3, [r7, #30]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d10f      	bne.n	80008fa <FlashMemory_Paylaod_Write+0xba>
 80008da:	7ffb      	ldrb	r3, [r7, #31]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d10c      	bne.n	80008fa <FlashMemory_Paylaod_Write+0xba>
	{
		/* Locks the FLASH control register access */
		HAL_Status = HAL_FLASH_Lock();
 80008e0:	f000 fc84 	bl	80011ec <HAL_FLASH_Lock>
 80008e4:	4603      	mov	r3, r0
 80008e6:	77fb      	strb	r3, [r7, #31]

		if(HAL_Status != HAL_OK)
 80008e8:	7ffb      	ldrb	r3, [r7, #31]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d002      	beq.n	80008f4 <FlashMemory_Paylaod_Write+0xb4>
		{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80008ee:	2300      	movs	r3, #0
 80008f0:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status != HAL_OK)
 80008f2:	e004      	b.n	80008fe <FlashMemory_Paylaod_Write+0xbe>
		}
		else
		{
			Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_PASSED;
 80008f4:	2301      	movs	r3, #1
 80008f6:	77bb      	strb	r3, [r7, #30]
		if(HAL_Status != HAL_OK)
 80008f8:	e001      	b.n	80008fe <FlashMemory_Paylaod_Write+0xbe>
		}
	}
	else
	{
		Flash_Payload_Write_Status = FLASH_PAYLOAD_WRITE_FAILED;
 80008fa:	2300      	movs	r3, #0
 80008fc:	77bb      	strb	r3, [r7, #30]
	}
	return Flash_Payload_Write_Status;
 80008fe:	7fbb      	ldrb	r3, [r7, #30]
}
 8000900:	4618      	mov	r0, r3
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bdb0      	pop	{r4, r5, r7, pc}

08000908 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_CRC_Init+0x20>)
 800090e:	4a07      	ldr	r2, [pc, #28]	; (800092c <MX_CRC_Init+0x24>)
 8000910:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	; (8000928 <MX_CRC_Init+0x20>)
 8000914:	f000 fb8d 	bl	8001032 <HAL_CRC_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800091e:	f000 f8ba 	bl	8000a96 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000100 	.word	0x20000100
 800092c:	40023000 	.word	0x40023000

08000930 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a09      	ldr	r2, [pc, #36]	; (8000964 <HAL_CRC_MspInit+0x34>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d10b      	bne.n	800095a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_CRC_MspInit+0x38>)
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_CRC_MspInit+0x38>)
 8000948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800094c:	6153      	str	r3, [r2, #20]
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_CRC_MspInit+0x38>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	40023000 	.word	0x40023000
 8000968:	40021000 	.word	0x40021000

0800096c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_GPIO_Init+0x74>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a16      	ldr	r2, [pc, #88]	; (80009e0 <MX_GPIO_Init+0x74>)
 8000986:	f043 0320 	orr.w	r3, r3, #32
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_GPIO_Init+0x74>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0320 	and.w	r3, r3, #32
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_GPIO_Init+0x74>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <MX_GPIO_Init+0x74>)
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_GPIO_Init+0x74>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2101      	movs	r1, #1
 80009b4:	480b      	ldr	r0, [pc, #44]	; (80009e4 <MX_GPIO_Init+0x78>)
 80009b6:	f000 ff07 	bl	80017c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009ba:	2301      	movs	r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2302      	movs	r3, #2
 80009c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_GPIO_Init+0x78>)
 80009d2:	f000 fd75 	bl	80014c0 <HAL_GPIO_Init>

}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010800 	.word	0x40010800

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b5b0      	push	{r4, r5, r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ee:	f000 f9db 	bl	8000da8 <HAL_Init>

  /* USER CODE BEGIN Init */

  //HAL_StatusTypeDef status = HAL_OK;
  char  start_message[] = "Enter command: \r\n";
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <main+0x34>)
 80009f4:	1d3c      	adds	r4, r7, #4
 80009f6:	461d      	mov	r5, r3
 80009f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	8023      	strh	r3, [r4, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f80e 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f7ff ffb2 	bl	800096c <MX_GPIO_Init>
  MX_CRC_Init();
 8000a08:	f7ff ff7e 	bl	8000908 <MX_CRC_Init>
  MX_USART1_UART_Init();
 8000a0c:	f000 f8ce 	bl	8000bac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a10:	f000 f8f6 	bl	8000c00 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	//  BL_Print_Message(start_message);
   BL_fetchHostCommand();
 8000a14:	f7ff fba6 	bl	8000164 <BL_fetchHostCommand>
 8000a18:	e7fc      	b.n	8000a14 <main+0x2c>
 8000a1a:	bf00      	nop
 8000a1c:	08002f24 	.word	0x08002f24

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b090      	sub	sp, #64	; 0x40
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	2228      	movs	r2, #40	; 0x28
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fd7e 	bl	8002530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a46:	2301      	movs	r3, #1
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4a:	2310      	movs	r3, #16
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a52:	f107 0318 	add.w	r3, r7, #24
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fece 	bl	80017f8 <HAL_RCC_OscConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a62:	f000 f818 	bl	8000a96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	230f      	movs	r3, #15
 8000a68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f001 f93c 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a8a:	f000 f804 	bl	8000a96 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3740      	adds	r7, #64	; 0x40
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9a:	b672      	cpsid	i
}
 8000a9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_MspInit+0x40>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <HAL_MspInit+0x40>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6193      	str	r3, [r2, #24]
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_MspInit+0x40>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_MspInit+0x40>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_MspInit+0x40>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	61d3      	str	r3, [r2, #28]
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_MspInit+0x40>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr

08000b1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2a:	f000 f983 	bl	8000e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
	...

08000b34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b3c:	4a14      	ldr	r2, [pc, #80]	; (8000b90 <_sbrk+0x5c>)
 8000b3e:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <_sbrk+0x60>)
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b48:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <_sbrk+0x64>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d102      	bne.n	8000b56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <_sbrk+0x64>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <_sbrk+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d207      	bcs.n	8000b74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b64:	f001 fcba 	bl	80024dc <__errno>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b72:	e009      	b.n	8000b88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <_sbrk+0x64>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b7a:	4b07      	ldr	r3, [pc, #28]	; (8000b98 <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <_sbrk+0x64>)
 8000b84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b86:	68fb      	ldr	r3, [r7, #12]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20005000 	.word	0x20005000
 8000b94:	00000400 	.word	0x00000400
 8000b98:	20000108 	.word	0x20000108
 8000b9c:	200001d0 	.word	0x200001d0

08000ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_USART1_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f001 fa18 	bl	8002018 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f7ff ff52 	bl	8000a96 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000010c 	.word	0x2000010c
 8000bfc:	40013800 	.word	0x40013800

08000c00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART2_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c38:	f001 f9ee 	bl	8002018 <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f7ff ff28 	bl	8000a96 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000154 	.word	0x20000154
 8000c50:	40004400 	.word	0x40004400

08000c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a37      	ldr	r2, [pc, #220]	; (8000d4c <HAL_UART_MspInit+0xf8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d132      	bne.n	8000cda <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c74:	4b36      	ldr	r3, [pc, #216]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a35      	ldr	r2, [pc, #212]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a2f      	ldr	r2, [pc, #188]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c92:	f043 0304 	orr.w	r3, r3, #4
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4826      	ldr	r0, [pc, #152]	; (8000d54 <HAL_UART_MspInit+0x100>)
 8000cba:	f000 fc01 	bl	80014c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0318 	add.w	r3, r7, #24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4820      	ldr	r0, [pc, #128]	; (8000d54 <HAL_UART_MspInit+0x100>)
 8000cd4:	f000 fbf4 	bl	80014c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cd8:	e034      	b.n	8000d44 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a1e      	ldr	r2, [pc, #120]	; (8000d58 <HAL_UART_MspInit+0x104>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d12f      	bne.n	8000d44 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce4:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000ce6:	69db      	ldr	r3, [r3, #28]
 8000ce8:	4a19      	ldr	r2, [pc, #100]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cee:	61d3      	str	r3, [r2, #28]
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a13      	ldr	r2, [pc, #76]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000d02:	f043 0304 	orr.w	r3, r3, #4
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d14:	2304      	movs	r3, #4
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0318 	add.w	r3, r7, #24
 8000d24:	4619      	mov	r1, r3
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <HAL_UART_MspInit+0x100>)
 8000d28:	f000 fbca 	bl	80014c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0318 	add.w	r3, r7, #24
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0x100>)
 8000d40:	f000 fbbe 	bl	80014c0 <HAL_GPIO_Init>
}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40013800 	.word	0x40013800
 8000d50:	40021000 	.word	0x40021000
 8000d54:	40010800 	.word	0x40010800
 8000d58:	40004400 	.word	0x40004400

08000d5c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d5c:	f7ff ff20 	bl	8000ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d60:	480b      	ldr	r0, [pc, #44]	; (8000d90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d62:	490c      	ldr	r1, [pc, #48]	; (8000d94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d64:	4a0c      	ldr	r2, [pc, #48]	; (8000d98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d78:	4c09      	ldr	r4, [pc, #36]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d86:	f001 fbaf 	bl	80024e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d8a:	f7ff fe2d 	bl	80009e8 <main>
  bx lr
 8000d8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000d98:	08002fa0 	.word	0x08002fa0
  ldr r2, =_sbss
 8000d9c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000da0:	200001d0 	.word	0x200001d0

08000da4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC1_2_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_Init+0x28>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <HAL_Init+0x28>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f907 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dbe:	200f      	movs	r0, #15
 8000dc0:	f000 f808 	bl	8000dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc4:	f7ff fe6c 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc8:	2300      	movs	r3, #0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40022000 	.word	0x40022000

08000dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_InitTick+0x54>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_InitTick+0x58>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	4619      	mov	r1, r3
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f911 	bl	800101a <HAL_SYSTICK_Config>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00e      	b.n	8000e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d80a      	bhi.n	8000e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f000 f8e7 	bl	8000fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e14:	4a06      	ldr	r2, [pc, #24]	; (8000e30 <HAL_InitTick+0x5c>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e000      	b.n	8000e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	2000000c 	.word	0x2000000c
 8000e2c:	20000014 	.word	0x20000014
 8000e30:	20000010 	.word	0x20000010

08000e34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x1c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x20>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4413      	add	r3, r2
 8000e44:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <HAL_IncTick+0x20>)
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000014 	.word	0x20000014
 8000e54:	2000019c 	.word	0x2000019c

08000e58 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <HAL_GetTick+0x10>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	2000019c 	.word	0x2000019c

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f7ff ff90 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff49 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff4:	f7ff ff5e 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff90 	bl	8000f24 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5f 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffb0 	bl	8000f88 <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e00e      	b.n	8001062 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	795b      	ldrb	r3, [r3, #5]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	d105      	bne.n	800105a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff fc6b 	bl	8000930 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2201      	movs	r2, #1
 800105e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800106a:	b480      	push	{r7}
 800106c:	b087      	sub	sp, #28
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2202      	movs	r2, #2
 800107e:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e00a      	b.n	800109c <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	441a      	add	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d3f0      	bcc.n	8001086 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2201      	movs	r2, #1
 80010b0:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80010b2:	693b      	ldr	r3, [r7, #16]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
	...

080010c0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80010da:	4b2f      	ldr	r3, [pc, #188]	; (8001198 <HAL_FLASH_Program+0xd8>)
 80010dc:	7e1b      	ldrb	r3, [r3, #24]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d101      	bne.n	80010e6 <HAL_FLASH_Program+0x26>
 80010e2:	2302      	movs	r3, #2
 80010e4:	e054      	b.n	8001190 <HAL_FLASH_Program+0xd0>
 80010e6:	4b2c      	ldr	r3, [pc, #176]	; (8001198 <HAL_FLASH_Program+0xd8>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80010ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010f0:	f000 f8a8 	bl	8001244 <FLASH_WaitForLastOperation>
 80010f4:	4603      	mov	r3, r0
 80010f6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d144      	bne.n	8001188 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d102      	bne.n	800110a <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001104:	2301      	movs	r3, #1
 8001106:	757b      	strb	r3, [r7, #21]
 8001108:	e007      	b.n	800111a <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b02      	cmp	r3, #2
 800110e:	d102      	bne.n	8001116 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001110:	2302      	movs	r3, #2
 8001112:	757b      	strb	r3, [r7, #21]
 8001114:	e001      	b.n	800111a <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001116:	2304      	movs	r3, #4
 8001118:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800111a:	2300      	movs	r3, #0
 800111c:	75bb      	strb	r3, [r7, #22]
 800111e:	e02d      	b.n	800117c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001120:	7dbb      	ldrb	r3, [r7, #22]
 8001122:	005a      	lsls	r2, r3, #1
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	eb02 0c03 	add.w	ip, r2, r3
 800112a:	7dbb      	ldrb	r3, [r7, #22]
 800112c:	0119      	lsls	r1, r3, #4
 800112e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001132:	f1c1 0620 	rsb	r6, r1, #32
 8001136:	f1a1 0020 	sub.w	r0, r1, #32
 800113a:	fa22 f401 	lsr.w	r4, r2, r1
 800113e:	fa03 f606 	lsl.w	r6, r3, r6
 8001142:	4334      	orrs	r4, r6
 8001144:	fa23 f000 	lsr.w	r0, r3, r0
 8001148:	4304      	orrs	r4, r0
 800114a:	fa23 f501 	lsr.w	r5, r3, r1
 800114e:	b2a3      	uxth	r3, r4
 8001150:	4619      	mov	r1, r3
 8001152:	4660      	mov	r0, ip
 8001154:	f000 f85a 	bl	800120c <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001158:	f24c 3050 	movw	r0, #50000	; 0xc350
 800115c:	f000 f872 	bl	8001244 <FLASH_WaitForLastOperation>
 8001160:	4603      	mov	r3, r0
 8001162:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_FLASH_Program+0xdc>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	4a0c      	ldr	r2, [pc, #48]	; (800119c <HAL_FLASH_Program+0xdc>)
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d107      	bne.n	8001186 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001176:	7dbb      	ldrb	r3, [r7, #22]
 8001178:	3301      	adds	r3, #1
 800117a:	75bb      	strb	r3, [r7, #22]
 800117c:	7dba      	ldrb	r2, [r7, #22]
 800117e:	7d7b      	ldrb	r3, [r7, #21]
 8001180:	429a      	cmp	r2, r3
 8001182:	d3cd      	bcc.n	8001120 <HAL_FLASH_Program+0x60>
 8001184:	e000      	b.n	8001188 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001186:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_FLASH_Program+0xd8>)
 800118a:	2200      	movs	r2, #0
 800118c:	761a      	strb	r2, [r3, #24]

  return status;
 800118e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001190:	4618      	mov	r0, r3
 8001192:	371c      	adds	r7, #28
 8001194:	46bd      	mov	sp, r7
 8001196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001198:	200001a0 	.word	0x200001a0
 800119c:	40022000 	.word	0x40022000

080011a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HAL_FLASH_Unlock+0x40>)
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00d      	beq.n	80011d2 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_FLASH_Unlock+0x40>)
 80011b8:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_FLASH_Unlock+0x44>)
 80011ba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_FLASH_Unlock+0x40>)
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_FLASH_Unlock+0x48>)
 80011c0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <HAL_FLASH_Unlock+0x40>)
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000
 80011e4:	45670123 	.word	0x45670123
 80011e8:	cdef89ab 	.word	0xcdef89ab

080011ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_FLASH_Lock+0x1c>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	4a04      	ldr	r2, [pc, #16]	; (8001208 <HAL_FLASH_Lock+0x1c>)
 80011f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40022000 	.word	0x40022000

0800120c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <FLASH_Program_HalfWord+0x30>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <FLASH_Program_HalfWord+0x34>)
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	4a07      	ldr	r2, [pc, #28]	; (8001240 <FLASH_Program_HalfWord+0x34>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	887a      	ldrh	r2, [r7, #2]
 800122e:	801a      	strh	r2, [r3, #0]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	200001a0 	.word	0x200001a0
 8001240:	40022000 	.word	0x40022000

08001244 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff fe04 	bl	8000e58 <HAL_GetTick>
 8001250:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001252:	e010      	b.n	8001276 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800125a:	d00c      	beq.n	8001276 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <FLASH_WaitForLastOperation+0x2e>
 8001262:	f7ff fdf9 	bl	8000e58 <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	429a      	cmp	r2, r3
 8001270:	d201      	bcs.n	8001276 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e025      	b.n	80012c2 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <FLASH_WaitForLastOperation+0x88>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1e8      	bne.n	8001254 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <FLASH_WaitForLastOperation+0x88>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f003 0320 	and.w	r3, r3, #32
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <FLASH_WaitForLastOperation+0x88>)
 8001290:	2220      	movs	r2, #32
 8001292:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <FLASH_WaitForLastOperation+0x88>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10b      	bne.n	80012b8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <FLASH_WaitForLastOperation+0x88>)
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <FLASH_WaitForLastOperation+0x88>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80012b8:	f000 f80a 	bl	80012d0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40022000 	.word	0x40022000

080012d0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <FLASH_SetErrorCode+0x98>)
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	f003 0310 	and.w	r3, r3, #16
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d009      	beq.n	80012fa <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <FLASH_SetErrorCode+0x9c>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	4a1f      	ldr	r2, [pc, #124]	; (800136c <FLASH_SetErrorCode+0x9c>)
 80012f0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <FLASH_SetErrorCode+0x98>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d009      	beq.n	800131a <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <FLASH_SetErrorCode+0x9c>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f043 0301 	orr.w	r3, r3, #1
 800130e:	4a17      	ldr	r2, [pc, #92]	; (800136c <FLASH_SetErrorCode+0x9c>)
 8001310:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800131a:	4b13      	ldr	r3, [pc, #76]	; (8001368 <FLASH_SetErrorCode+0x98>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <FLASH_SetErrorCode+0x9c>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	4a0f      	ldr	r2, [pc, #60]	; (800136c <FLASH_SetErrorCode+0x9c>)
 8001330:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <FLASH_SetErrorCode+0x98>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <FLASH_SetErrorCode+0x98>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f240 1201 	movw	r2, #257	; 0x101
 8001344:	4293      	cmp	r3, r2
 8001346:	d106      	bne.n	8001356 <FLASH_SetErrorCode+0x86>
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <FLASH_SetErrorCode+0x98>)
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <FLASH_SetErrorCode+0x98>)
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	61d3      	str	r3, [r2, #28]
}  
 8001354:	e002      	b.n	800135c <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001356:	4a04      	ldr	r2, [pc, #16]	; (8001368 <FLASH_SetErrorCode+0x98>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	60d3      	str	r3, [r2, #12]
}  
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40022000 	.word	0x40022000
 800136c:	200001a0 	.word	0x200001a0

08001370 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001382:	4b2f      	ldr	r3, [pc, #188]	; (8001440 <HAL_FLASHEx_Erase+0xd0>)
 8001384:	7e1b      	ldrb	r3, [r3, #24]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_FLASHEx_Erase+0x1e>
 800138a:	2302      	movs	r3, #2
 800138c:	e053      	b.n	8001436 <HAL_FLASHEx_Erase+0xc6>
 800138e:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <HAL_FLASHEx_Erase+0xd0>)
 8001390:	2201      	movs	r2, #1
 8001392:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b02      	cmp	r3, #2
 800139a:	d116      	bne.n	80013ca <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800139c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013a0:	f7ff ff50 	bl	8001244 <FLASH_WaitForLastOperation>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d141      	bne.n	800142e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f000 f84c 	bl	8001448 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013b4:	f7ff ff46 	bl	8001244 <FLASH_WaitForLastOperation>
 80013b8:	4603      	mov	r3, r0
 80013ba:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <HAL_FLASHEx_Erase+0xd4>)
 80013be:	691b      	ldr	r3, [r3, #16]
 80013c0:	4a20      	ldr	r2, [pc, #128]	; (8001444 <HAL_FLASHEx_Erase+0xd4>)
 80013c2:	f023 0304 	bic.w	r3, r3, #4
 80013c6:	6113      	str	r3, [r2, #16]
 80013c8:	e031      	b.n	800142e <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80013ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013ce:	f7ff ff39 	bl	8001244 <FLASH_WaitForLastOperation>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d12a      	bne.n	800142e <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f04f 32ff 	mov.w	r2, #4294967295
 80013de:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	e019      	b.n	800141c <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80013e8:	68b8      	ldr	r0, [r7, #8]
 80013ea:	f000 f849 	bl	8001480 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013f2:	f7ff ff27 	bl	8001244 <FLASH_WaitForLastOperation>
 80013f6:	4603      	mov	r3, r0
 80013f8:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_FLASHEx_Erase+0xd4>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <HAL_FLASHEx_Erase+0xd4>)
 8001400:	f023 0302 	bic.w	r3, r3, #2
 8001404:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	601a      	str	r2, [r3, #0]
            break;
 8001412:	e00c      	b.n	800142e <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800141a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	029a      	lsls	r2, r3, #10
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	429a      	cmp	r2, r3
 800142c:	d3dc      	bcc.n	80013e8 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_FLASHEx_Erase+0xd0>)
 8001430:	2200      	movs	r2, #0
 8001432:	761a      	strb	r2, [r3, #24]

  return status;
 8001434:	7bfb      	ldrb	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200001a0 	.word	0x200001a0
 8001444:	40022000 	.word	0x40022000

08001448 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <FLASH_MassErase+0x30>)
 8001452:	2200      	movs	r2, #0
 8001454:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <FLASH_MassErase+0x34>)
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <FLASH_MassErase+0x34>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <FLASH_MassErase+0x34>)
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <FLASH_MassErase+0x34>)
 8001468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800146c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	200001a0 	.word	0x200001a0
 800147c:	40022000 	.word	0x40022000

08001480 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <FLASH_PageErase+0x38>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <FLASH_PageErase+0x3c>)
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <FLASH_PageErase+0x3c>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <FLASH_PageErase+0x3c>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <FLASH_PageErase+0x3c>)
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	4a05      	ldr	r2, [pc, #20]	; (80014bc <FLASH_PageErase+0x3c>)
 80014a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014aa:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	200001a0 	.word	0x200001a0
 80014bc:	40022000 	.word	0x40022000

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b08b      	sub	sp, #44	; 0x2c
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d2:	e169      	b.n	80017a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d4:	2201      	movs	r2, #1
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 8158 	bne.w	80017a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4a9a      	ldr	r2, [pc, #616]	; (8001760 <HAL_GPIO_Init+0x2a0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d05e      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 80014fc:	4a98      	ldr	r2, [pc, #608]	; (8001760 <HAL_GPIO_Init+0x2a0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d875      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001502:	4a98      	ldr	r2, [pc, #608]	; (8001764 <HAL_GPIO_Init+0x2a4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d058      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001508:	4a96      	ldr	r2, [pc, #600]	; (8001764 <HAL_GPIO_Init+0x2a4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d86f      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800150e:	4a96      	ldr	r2, [pc, #600]	; (8001768 <HAL_GPIO_Init+0x2a8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d052      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001514:	4a94      	ldr	r2, [pc, #592]	; (8001768 <HAL_GPIO_Init+0x2a8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d869      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800151a:	4a94      	ldr	r2, [pc, #592]	; (800176c <HAL_GPIO_Init+0x2ac>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d04c      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001520:	4a92      	ldr	r2, [pc, #584]	; (800176c <HAL_GPIO_Init+0x2ac>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d863      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001526:	4a92      	ldr	r2, [pc, #584]	; (8001770 <HAL_GPIO_Init+0x2b0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d046      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 800152c:	4a90      	ldr	r2, [pc, #576]	; (8001770 <HAL_GPIO_Init+0x2b0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d85d      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d82a      	bhi.n	800158c <HAL_GPIO_Init+0xcc>
 8001536:	2b12      	cmp	r3, #18
 8001538:	d859      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800153a:	a201      	add	r2, pc, #4	; (adr r2, 8001540 <HAL_GPIO_Init+0x80>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	080015bb 	.word	0x080015bb
 8001544:	08001595 	.word	0x08001595
 8001548:	080015a7 	.word	0x080015a7
 800154c:	080015e9 	.word	0x080015e9
 8001550:	080015ef 	.word	0x080015ef
 8001554:	080015ef 	.word	0x080015ef
 8001558:	080015ef 	.word	0x080015ef
 800155c:	080015ef 	.word	0x080015ef
 8001560:	080015ef 	.word	0x080015ef
 8001564:	080015ef 	.word	0x080015ef
 8001568:	080015ef 	.word	0x080015ef
 800156c:	080015ef 	.word	0x080015ef
 8001570:	080015ef 	.word	0x080015ef
 8001574:	080015ef 	.word	0x080015ef
 8001578:	080015ef 	.word	0x080015ef
 800157c:	080015ef 	.word	0x080015ef
 8001580:	080015ef 	.word	0x080015ef
 8001584:	0800159d 	.word	0x0800159d
 8001588:	080015b1 	.word	0x080015b1
 800158c:	4a79      	ldr	r2, [pc, #484]	; (8001774 <HAL_GPIO_Init+0x2b4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001592:	e02c      	b.n	80015ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e029      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e024      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	3308      	adds	r3, #8
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e01f      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	330c      	adds	r3, #12
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	e01a      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015c2:	2304      	movs	r3, #4
 80015c4:	623b      	str	r3, [r7, #32]
          break;
 80015c6:	e013      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d0:	2308      	movs	r3, #8
 80015d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	611a      	str	r2, [r3, #16]
          break;
 80015da:	e009      	b.n	80015f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	615a      	str	r2, [r3, #20]
          break;
 80015e6:	e003      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          break;
 80015ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2bff      	cmp	r3, #255	; 0xff
 80015f4:	d801      	bhi.n	80015fa <HAL_GPIO_Init+0x13a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	e001      	b.n	80015fe <HAL_GPIO_Init+0x13e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3304      	adds	r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d802      	bhi.n	800160c <HAL_GPIO_Init+0x14c>
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	e002      	b.n	8001612 <HAL_GPIO_Init+0x152>
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	3b08      	subs	r3, #8
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	210f      	movs	r1, #15
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	401a      	ands	r2, r3
 8001624:	6a39      	ldr	r1, [r7, #32]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	431a      	orrs	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80b1 	beq.w	80017a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001640:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a4c      	ldr	r2, [pc, #304]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_GPIO_Init+0x2b8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001658:	4a48      	ldr	r2, [pc, #288]	; (800177c <HAL_GPIO_Init+0x2bc>)
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a40      	ldr	r2, [pc, #256]	; (8001780 <HAL_GPIO_Init+0x2c0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d013      	beq.n	80016ac <HAL_GPIO_Init+0x1ec>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <HAL_GPIO_Init+0x2c4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d00d      	beq.n	80016a8 <HAL_GPIO_Init+0x1e8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a3e      	ldr	r2, [pc, #248]	; (8001788 <HAL_GPIO_Init+0x2c8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d007      	beq.n	80016a4 <HAL_GPIO_Init+0x1e4>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a3d      	ldr	r2, [pc, #244]	; (800178c <HAL_GPIO_Init+0x2cc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d101      	bne.n	80016a0 <HAL_GPIO_Init+0x1e0>
 800169c:	2303      	movs	r3, #3
 800169e:	e006      	b.n	80016ae <HAL_GPIO_Init+0x1ee>
 80016a0:	2304      	movs	r3, #4
 80016a2:	e004      	b.n	80016ae <HAL_GPIO_Init+0x1ee>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_Init+0x1ee>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_GPIO_Init+0x1ee>
 80016ac:	2300      	movs	r3, #0
 80016ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b0:	f002 0203 	and.w	r2, r2, #3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	4093      	lsls	r3, r2
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016be:	492f      	ldr	r1, [pc, #188]	; (800177c <HAL_GPIO_Init+0x2bc>)
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016d8:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	492c      	ldr	r1, [pc, #176]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4928      	ldr	r1, [pc, #160]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001700:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	4922      	ldr	r1, [pc, #136]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	491e      	ldr	r1, [pc, #120]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 8001718:	4013      	ands	r3, r2
 800171a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4918      	ldr	r1, [pc, #96]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	4914      	ldr	r1, [pc, #80]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 8001740:	4013      	ands	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d021      	beq.n	8001794 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	490e      	ldr	r1, [pc, #56]	; (8001790 <HAL_GPIO_Init+0x2d0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
 800175c:	e021      	b.n	80017a2 <HAL_GPIO_Init+0x2e2>
 800175e:	bf00      	nop
 8001760:	10320000 	.word	0x10320000
 8001764:	10310000 	.word	0x10310000
 8001768:	10220000 	.word	0x10220000
 800176c:	10210000 	.word	0x10210000
 8001770:	10120000 	.word	0x10120000
 8001774:	10110000 	.word	0x10110000
 8001778:	40021000 	.word	0x40021000
 800177c:	40010000 	.word	0x40010000
 8001780:	40010800 	.word	0x40010800
 8001784:	40010c00 	.word	0x40010c00
 8001788:	40011000 	.word	0x40011000
 800178c:	40011400 	.word	0x40011400
 8001790:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_GPIO_Init+0x304>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	43db      	mvns	r3, r3
 800179c:	4909      	ldr	r1, [pc, #36]	; (80017c4 <HAL_GPIO_Init+0x304>)
 800179e:	4013      	ands	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	3301      	adds	r3, #1
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f47f ae8e 	bne.w	80014d4 <HAL_GPIO_Init+0x14>
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	372c      	adds	r7, #44	; 0x2c
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	807b      	strh	r3, [r7, #2]
 80017d4:	4613      	mov	r3, r2
 80017d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d8:	787b      	ldrb	r3, [r7, #1]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017e4:	e003      	b.n	80017ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017e6:	887b      	ldrh	r3, [r7, #2]
 80017e8:	041a      	lsls	r2, r3, #16
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	611a      	str	r2, [r3, #16]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e272      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 8087 	beq.w	8001926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001818:	4b92      	ldr	r3, [pc, #584]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 030c 	and.w	r3, r3, #12
 8001820:	2b04      	cmp	r3, #4
 8001822:	d00c      	beq.n	800183e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001824:	4b8f      	ldr	r3, [pc, #572]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d112      	bne.n	8001856 <HAL_RCC_OscConfig+0x5e>
 8001830:	4b8c      	ldr	r3, [pc, #560]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d10b      	bne.n	8001856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183e:	4b89      	ldr	r3, [pc, #548]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d06c      	beq.n	8001924 <HAL_RCC_OscConfig+0x12c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d168      	bne.n	8001924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e24c      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x76>
 8001860:	4b80      	ldr	r3, [pc, #512]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a7f      	ldr	r2, [pc, #508]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	e02e      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x98>
 8001876:	4b7b      	ldr	r3, [pc, #492]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7a      	ldr	r2, [pc, #488]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b78      	ldr	r3, [pc, #480]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a77      	ldr	r2, [pc, #476]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xbc>
 800189a:	4b72      	ldr	r3, [pc, #456]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a71      	ldr	r2, [pc, #452]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b6f      	ldr	r3, [pc, #444]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6e      	ldr	r2, [pc, #440]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xd4>
 80018b4:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6a      	ldr	r2, [pc, #424]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a67      	ldr	r2, [pc, #412]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fac0 	bl	8000e58 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fabc 	bl	8000e58 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	; 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e200      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b5d      	ldr	r3, [pc, #372]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xe4>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fc:	f7ff faac 	bl	8000e58 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff faa8 	bl	8000e58 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	; 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e1ec      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b53      	ldr	r3, [pc, #332]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x10c>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d063      	beq.n	80019fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001932:	4b4c      	ldr	r3, [pc, #304]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800193e:	4b49      	ldr	r3, [pc, #292]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b08      	cmp	r3, #8
 8001948:	d11c      	bne.n	8001984 <HAL_RCC_OscConfig+0x18c>
 800194a:	4b46      	ldr	r3, [pc, #280]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001956:	4b43      	ldr	r3, [pc, #268]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1c0      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4939      	ldr	r1, [pc, #228]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	e03a      	b.n	80019fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800198c:	4b36      	ldr	r3, [pc, #216]	; (8001a68 <HAL_RCC_OscConfig+0x270>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fa61 	bl	8000e58 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff fa5d 	bl	8000e58 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e1a1      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4927      	ldr	r1, [pc, #156]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	600b      	str	r3, [r1, #0]
 80019cc:	e015      	b.n	80019fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b26      	ldr	r3, [pc, #152]	; (8001a68 <HAL_RCC_OscConfig+0x270>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d4:	f7ff fa40 	bl	8000e58 <HAL_GetTick>
 80019d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019dc:	f7ff fa3c 	bl	8000e58 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e180      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ee:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03a      	beq.n	8001a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d019      	beq.n	8001a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7ff fa20 	bl	8000e58 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fa1c 	bl	8000e58 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e160      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	; (8001a64 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f000 face 	bl	8001fdc <RCC_Delay>
 8001a40:	e01c      	b.n	8001a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <HAL_RCC_OscConfig+0x274>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7ff fa06 	bl	8000e58 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4e:	e00f      	b.n	8001a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a50:	f7ff fa02 	bl	8000e58 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d908      	bls.n	8001a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e146      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
 8001a62:	bf00      	nop
 8001a64:	40021000 	.word	0x40021000
 8001a68:	42420000 	.word	0x42420000
 8001a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a70:	4b92      	ldr	r3, [pc, #584]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e9      	bne.n	8001a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80a6 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b8b      	ldr	r3, [pc, #556]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b88      	ldr	r3, [pc, #544]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a87      	ldr	r2, [pc, #540]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]
 8001aa6:	4b85      	ldr	r3, [pc, #532]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4b82      	ldr	r3, [pc, #520]	; (8001cc0 <HAL_RCC_OscConfig+0x4c8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	4b7f      	ldr	r3, [pc, #508]	; (8001cc0 <HAL_RCC_OscConfig+0x4c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7e      	ldr	r2, [pc, #504]	; (8001cc0 <HAL_RCC_OscConfig+0x4c8>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff f9c3 	bl	8000e58 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff f9bf 	bl	8000e58 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	; 0x64
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e103      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <HAL_RCC_OscConfig+0x4c8>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x312>
 8001afc:	4b6f      	ldr	r3, [pc, #444]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4a6e      	ldr	r2, [pc, #440]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6213      	str	r3, [r2, #32]
 8001b08:	e02d      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x334>
 8001b12:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	4a69      	ldr	r2, [pc, #420]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6213      	str	r3, [r2, #32]
 8001b1e:	4b67      	ldr	r3, [pc, #412]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a66      	ldr	r2, [pc, #408]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	e01c      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x356>
 8001b34:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4a60      	ldr	r2, [pc, #384]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6213      	str	r3, [r2, #32]
 8001b40:	4b5e      	ldr	r3, [pc, #376]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a5d      	ldr	r2, [pc, #372]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x36e>
 8001b4e:	4b5b      	ldr	r3, [pc, #364]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4a5a      	ldr	r2, [pc, #360]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6213      	str	r3, [r2, #32]
 8001b5a:	4b58      	ldr	r3, [pc, #352]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a57      	ldr	r2, [pc, #348]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d015      	beq.n	8001b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f973 	bl	8000e58 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff f96f 	bl	8000e58 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0b1      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ee      	beq.n	8001b76 <HAL_RCC_OscConfig+0x37e>
 8001b98:	e014      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f95d 	bl	8000e58 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f959 	bl	8000e58 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e09b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	4b40      	ldr	r3, [pc, #256]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	4a3b      	ldr	r2, [pc, #236]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8087 	beq.w	8001cee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be0:	4b36      	ldr	r3, [pc, #216]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d061      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d146      	bne.n	8001c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f92d 	bl	8000e58 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c02:	f7ff f929 	bl	8000e58 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e06d      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c14:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c28:	d108      	bne.n	8001c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c2a:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4921      	ldr	r1, [pc, #132]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a19      	ldr	r1, [r3, #32]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	491b      	ldr	r1, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c54:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f8fd 	bl	8000e58 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff f8f9 	bl	8000e58 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e03d      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x46a>
 8001c80:	e035      	b.n	8001cee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_RCC_OscConfig+0x4cc>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c88:	f7ff f8e6 	bl	8000e58 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c90:	f7ff f8e2 	bl	8000e58 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e026      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x498>
 8001cae:	e01e      	b.n	8001cee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e019      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x500>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d106      	bne.n	8001cea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d001      	beq.n	8001cee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0d0      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b6a      	ldr	r3, [pc, #424]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d910      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b67      	ldr	r3, [pc, #412]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 0207 	bic.w	r2, r3, #7
 8001d26:	4965      	ldr	r1, [pc, #404]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b63      	ldr	r3, [pc, #396]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e0b8      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d58:	4b59      	ldr	r3, [pc, #356]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	4a58      	ldr	r2, [pc, #352]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d70:	4b53      	ldr	r3, [pc, #332]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	494d      	ldr	r1, [pc, #308]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d040      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d115      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e07f      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	4b41      	ldr	r3, [pc, #260]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e073      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	4b3d      	ldr	r3, [pc, #244]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e06b      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dda:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f023 0203 	bic.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4936      	ldr	r1, [pc, #216]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dec:	f7ff f834 	bl	8000e58 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7ff f830 	bl	8000e58 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e053      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 020c 	and.w	r2, r3, #12
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1eb      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d210      	bcs.n	8001e4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b24      	ldr	r3, [pc, #144]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 0207 	bic.w	r2, r3, #7
 8001e32:	4922      	ldr	r1, [pc, #136]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e032      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e58:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4916      	ldr	r1, [pc, #88]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0308 	and.w	r3, r3, #8
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d009      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	490e      	ldr	r1, [pc, #56]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e8a:	f000 f821 	bl	8001ed0 <HAL_RCC_GetSysClockFreq>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	490a      	ldr	r1, [pc, #40]	; (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9c:	5ccb      	ldrb	r3, [r1, r3]
 8001e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_ClockConfig+0x1d0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe ff92 	bl	8000dd4 <HAL_InitTick>

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08002f38 	.word	0x08002f38
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	20000010 	.word	0x20000010

08001ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x30>
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x36>
 8001efe:	e027      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f02:	613b      	str	r3, [r7, #16]
      break;
 8001f04:	e027      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	0c9b      	lsrs	r3, r3, #18
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f10:	5cd3      	ldrb	r3, [r2, r3]
 8001f12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d010      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	0c5b      	lsrs	r3, r3, #17
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f2a:	5cd3      	ldrb	r3, [r2, r3]
 8001f2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a0d      	ldr	r2, [pc, #52]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f32:	fb03 f202 	mul.w	r2, r3, r2
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	617b      	str	r3, [r7, #20]
 8001f3e:	e004      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f44:	fb02 f303 	mul.w	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	613b      	str	r3, [r7, #16]
      break;
 8001f4e:	e002      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f52:	613b      	str	r3, [r7, #16]
      break;
 8001f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f56:	693b      	ldr	r3, [r7, #16]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	007a1200 	.word	0x007a1200
 8001f6c:	08002f50 	.word	0x08002f50
 8001f70:	08002f60 	.word	0x08002f60
 8001f74:	003d0900 	.word	0x003d0900

08001f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f7c:	4b02      	ldr	r3, [pc, #8]	; (8001f88 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	2000000c 	.word	0x2000000c

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f90:	f7ff fff2 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001f94:	4602      	mov	r2, r0
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4903      	ldr	r1, [pc, #12]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa2:	5ccb      	ldrb	r3, [r1, r3]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	08002f48 	.word	0x08002f48

08001fb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fb8:	f7ff ffde 	bl	8001f78 <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	0adb      	lsrs	r3, r3, #11
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	; (8001fd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08002f48 	.word	0x08002f48

08001fdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fe4:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <RCC_Delay+0x34>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <RCC_Delay+0x38>)
 8001fea:	fba2 2303 	umull	r2, r3, r2, r3
 8001fee:	0a5b      	lsrs	r3, r3, #9
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
 8001ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ff8:	bf00      	nop
  }
  while (Delay --);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	60fa      	str	r2, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <RCC_Delay+0x1c>
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	2000000c 	.word	0x2000000c
 8002014:	10624dd3 	.word	0x10624dd3

08002018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e042      	b.n	80020b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7fe fe08 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2224      	movs	r2, #36	; 0x24
 8002048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800205a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f9af 	bl	80023c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695a      	ldr	r2, [r3, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2220      	movs	r2, #32
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af02      	add	r7, sp, #8
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	4613      	mov	r3, r2
 80020c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d16d      	bne.n	80021b4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <HAL_UART_Transmit+0x2c>
 80020de:	88fb      	ldrh	r3, [r7, #6]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e066      	b.n	80021b6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2221      	movs	r2, #33	; 0x21
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020f6:	f7fe feaf 	bl	8000e58 <HAL_GetTick>
 80020fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	88fa      	ldrh	r2, [r7, #6]
 8002100:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002110:	d108      	bne.n	8002124 <HAL_UART_Transmit+0x6c>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d104      	bne.n	8002124 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	e003      	b.n	800212c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800212c:	e02a      	b.n	8002184 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2200      	movs	r2, #0
 8002136:	2180      	movs	r1, #128	; 0x80
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f8d2 	bl	80022e2 <UART_WaitOnFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e036      	b.n	80021b6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10b      	bne.n	8002166 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800215c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	3302      	adds	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	e007      	b.n	8002176 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3301      	adds	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1cf      	bne.n	800212e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2200      	movs	r2, #0
 8002196:	2140      	movs	r1, #64	; 0x40
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 f8a2 	bl	80022e2 <UART_WaitOnFlagUntilTimeout>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e006      	b.n	80021b6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	e000      	b.n	80021b6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80021b4:	2302      	movs	r3, #2
  }
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	b08a      	sub	sp, #40	; 0x28
 80021c2:	af02      	add	r7, sp, #8
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	4613      	mov	r3, r2
 80021cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d17c      	bne.n	80022d8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_UART_Receive+0x2c>
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e075      	b.n	80022da <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2222      	movs	r2, #34	; 0x22
 80021f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002202:	f7fe fe29 	bl	8000e58 <HAL_GetTick>
 8002206:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	88fa      	ldrh	r2, [r7, #6]
 800220c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	88fa      	ldrh	r2, [r7, #6]
 8002212:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221c:	d108      	bne.n	8002230 <HAL_UART_Receive+0x72>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d104      	bne.n	8002230 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	e003      	b.n	8002238 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002238:	e043      	b.n	80022c2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2200      	movs	r2, #0
 8002242:	2120      	movs	r1, #32
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f000 f84c 	bl	80022e2 <UART_WaitOnFlagUntilTimeout>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e042      	b.n	80022da <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10c      	bne.n	8002274 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	b29b      	uxth	r3, r3
 8002262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002266:	b29a      	uxth	r2, r3
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	3302      	adds	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
 8002272:	e01f      	b.n	80022b4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800227c:	d007      	beq.n	800228e <HAL_UART_Receive+0xd0>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10a      	bne.n	800229c <HAL_UART_Receive+0xde>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d106      	bne.n	800229c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e008      	b.n	80022ae <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3301      	adds	r3, #1
 80022b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	3b01      	subs	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1b6      	bne.n	800223a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e000      	b.n	80022da <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
  }
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b090      	sub	sp, #64	; 0x40
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	603b      	str	r3, [r7, #0]
 80022ee:	4613      	mov	r3, r2
 80022f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022f2:	e050      	b.n	8002396 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fa:	d04c      	beq.n	8002396 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d007      	beq.n	8002312 <UART_WaitOnFlagUntilTimeout+0x30>
 8002302:	f7fe fda9 	bl	8000e58 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800230e:	429a      	cmp	r2, r3
 8002310:	d241      	bcs.n	8002396 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	330c      	adds	r3, #12
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	e853 3f00 	ldrex	r3, [r3]
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002332:	637a      	str	r2, [r7, #52]	; 0x34
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800233a:	e841 2300 	strex	r3, r2, [r1]
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1e5      	bne.n	8002312 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	3314      	adds	r3, #20
 800234c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	e853 3f00 	ldrex	r3, [r3]
 8002354:	613b      	str	r3, [r7, #16]
   return(result);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	63bb      	str	r3, [r7, #56]	; 0x38
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	3314      	adds	r3, #20
 8002364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002366:	623a      	str	r2, [r7, #32]
 8002368:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800236a:	69f9      	ldr	r1, [r7, #28]
 800236c:	6a3a      	ldr	r2, [r7, #32]
 800236e:	e841 2300 	strex	r3, r2, [r1]
 8002372:	61bb      	str	r3, [r7, #24]
   return(result);
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1e5      	bne.n	8002346 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2220      	movs	r2, #32
 800237e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e00f      	b.n	80023b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	4013      	ands	r3, r2
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	bf0c      	ite	eq
 80023a6:	2301      	moveq	r3, #1
 80023a8:	2300      	movne	r3, #0
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d09f      	beq.n	80022f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3740      	adds	r7, #64	; 0x40
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023fa:	f023 030c 	bic.w	r3, r3, #12
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	430b      	orrs	r3, r1
 8002406:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <UART_SetConfig+0x114>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d103      	bne.n	8002430 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002428:	f7ff fdc4 	bl	8001fb4 <HAL_RCC_GetPCLK2Freq>
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	e002      	b.n	8002436 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002430:	f7ff fdac 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8002434:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	441a      	add	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <UART_SetConfig+0x118>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	0119      	lsls	r1, r3, #4
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009a      	lsls	r2, r3, #2
 8002460:	441a      	add	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	fbb2 f2f3 	udiv	r2, r2, r3
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <UART_SetConfig+0x118>)
 800246e:	fba3 0302 	umull	r0, r3, r3, r2
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2064      	movs	r0, #100	; 0x64
 8002476:	fb00 f303 	mul.w	r3, r0, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	3332      	adds	r3, #50	; 0x32
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <UART_SetConfig+0x118>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248c:	4419      	add	r1, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009a      	lsls	r2, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <UART_SetConfig+0x118>)
 80024a6:	fba3 0302 	umull	r0, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2064      	movs	r0, #100	; 0x64
 80024ae:	fb00 f303 	mul.w	r3, r0, r3
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	3332      	adds	r3, #50	; 0x32
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <UART_SetConfig+0x118>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	f003 020f 	and.w	r2, r3, #15
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	440a      	add	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40013800 	.word	0x40013800
 80024d8:	51eb851f 	.word	0x51eb851f

080024dc <__errno>:
 80024dc:	4b01      	ldr	r3, [pc, #4]	; (80024e4 <__errno+0x8>)
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000018 	.word	0x20000018

080024e8 <__libc_init_array>:
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	2600      	movs	r6, #0
 80024ec:	4d0c      	ldr	r5, [pc, #48]	; (8002520 <__libc_init_array+0x38>)
 80024ee:	4c0d      	ldr	r4, [pc, #52]	; (8002524 <__libc_init_array+0x3c>)
 80024f0:	1b64      	subs	r4, r4, r5
 80024f2:	10a4      	asrs	r4, r4, #2
 80024f4:	42a6      	cmp	r6, r4
 80024f6:	d109      	bne.n	800250c <__libc_init_array+0x24>
 80024f8:	f000 fc9c 	bl	8002e34 <_init>
 80024fc:	2600      	movs	r6, #0
 80024fe:	4d0a      	ldr	r5, [pc, #40]	; (8002528 <__libc_init_array+0x40>)
 8002500:	4c0a      	ldr	r4, [pc, #40]	; (800252c <__libc_init_array+0x44>)
 8002502:	1b64      	subs	r4, r4, r5
 8002504:	10a4      	asrs	r4, r4, #2
 8002506:	42a6      	cmp	r6, r4
 8002508:	d105      	bne.n	8002516 <__libc_init_array+0x2e>
 800250a:	bd70      	pop	{r4, r5, r6, pc}
 800250c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002510:	4798      	blx	r3
 8002512:	3601      	adds	r6, #1
 8002514:	e7ee      	b.n	80024f4 <__libc_init_array+0xc>
 8002516:	f855 3b04 	ldr.w	r3, [r5], #4
 800251a:	4798      	blx	r3
 800251c:	3601      	adds	r6, #1
 800251e:	e7f2      	b.n	8002506 <__libc_init_array+0x1e>
 8002520:	08002f98 	.word	0x08002f98
 8002524:	08002f98 	.word	0x08002f98
 8002528:	08002f98 	.word	0x08002f98
 800252c:	08002f9c 	.word	0x08002f9c

08002530 <memset>:
 8002530:	4603      	mov	r3, r0
 8002532:	4402      	add	r2, r0
 8002534:	4293      	cmp	r3, r2
 8002536:	d100      	bne.n	800253a <memset+0xa>
 8002538:	4770      	bx	lr
 800253a:	f803 1b01 	strb.w	r1, [r3], #1
 800253e:	e7f9      	b.n	8002534 <memset+0x4>

08002540 <_vsiprintf_r>:
 8002540:	b500      	push	{lr}
 8002542:	b09b      	sub	sp, #108	; 0x6c
 8002544:	9100      	str	r1, [sp, #0]
 8002546:	9104      	str	r1, [sp, #16]
 8002548:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800254c:	9105      	str	r1, [sp, #20]
 800254e:	9102      	str	r1, [sp, #8]
 8002550:	4905      	ldr	r1, [pc, #20]	; (8002568 <_vsiprintf_r+0x28>)
 8002552:	9103      	str	r1, [sp, #12]
 8002554:	4669      	mov	r1, sp
 8002556:	f000 f86f 	bl	8002638 <_svfiprintf_r>
 800255a:	2200      	movs	r2, #0
 800255c:	9b00      	ldr	r3, [sp, #0]
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	b01b      	add	sp, #108	; 0x6c
 8002562:	f85d fb04 	ldr.w	pc, [sp], #4
 8002566:	bf00      	nop
 8002568:	ffff0208 	.word	0xffff0208

0800256c <vsiprintf>:
 800256c:	4613      	mov	r3, r2
 800256e:	460a      	mov	r2, r1
 8002570:	4601      	mov	r1, r0
 8002572:	4802      	ldr	r0, [pc, #8]	; (800257c <vsiprintf+0x10>)
 8002574:	6800      	ldr	r0, [r0, #0]
 8002576:	f7ff bfe3 	b.w	8002540 <_vsiprintf_r>
 800257a:	bf00      	nop
 800257c:	20000018 	.word	0x20000018

08002580 <__ssputs_r>:
 8002580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002584:	688e      	ldr	r6, [r1, #8]
 8002586:	4682      	mov	sl, r0
 8002588:	429e      	cmp	r6, r3
 800258a:	460c      	mov	r4, r1
 800258c:	4690      	mov	r8, r2
 800258e:	461f      	mov	r7, r3
 8002590:	d838      	bhi.n	8002604 <__ssputs_r+0x84>
 8002592:	898a      	ldrh	r2, [r1, #12]
 8002594:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002598:	d032      	beq.n	8002600 <__ssputs_r+0x80>
 800259a:	6825      	ldr	r5, [r4, #0]
 800259c:	6909      	ldr	r1, [r1, #16]
 800259e:	3301      	adds	r3, #1
 80025a0:	eba5 0901 	sub.w	r9, r5, r1
 80025a4:	6965      	ldr	r5, [r4, #20]
 80025a6:	444b      	add	r3, r9
 80025a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80025ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80025b0:	106d      	asrs	r5, r5, #1
 80025b2:	429d      	cmp	r5, r3
 80025b4:	bf38      	it	cc
 80025b6:	461d      	movcc	r5, r3
 80025b8:	0553      	lsls	r3, r2, #21
 80025ba:	d531      	bpl.n	8002620 <__ssputs_r+0xa0>
 80025bc:	4629      	mov	r1, r5
 80025be:	f000 fb6f 	bl	8002ca0 <_malloc_r>
 80025c2:	4606      	mov	r6, r0
 80025c4:	b950      	cbnz	r0, 80025dc <__ssputs_r+0x5c>
 80025c6:	230c      	movs	r3, #12
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f8ca 3000 	str.w	r3, [sl]
 80025d0:	89a3      	ldrh	r3, [r4, #12]
 80025d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d6:	81a3      	strh	r3, [r4, #12]
 80025d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025dc:	464a      	mov	r2, r9
 80025de:	6921      	ldr	r1, [r4, #16]
 80025e0:	f000 face 	bl	8002b80 <memcpy>
 80025e4:	89a3      	ldrh	r3, [r4, #12]
 80025e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80025ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ee:	81a3      	strh	r3, [r4, #12]
 80025f0:	6126      	str	r6, [r4, #16]
 80025f2:	444e      	add	r6, r9
 80025f4:	6026      	str	r6, [r4, #0]
 80025f6:	463e      	mov	r6, r7
 80025f8:	6165      	str	r5, [r4, #20]
 80025fa:	eba5 0509 	sub.w	r5, r5, r9
 80025fe:	60a5      	str	r5, [r4, #8]
 8002600:	42be      	cmp	r6, r7
 8002602:	d900      	bls.n	8002606 <__ssputs_r+0x86>
 8002604:	463e      	mov	r6, r7
 8002606:	4632      	mov	r2, r6
 8002608:	4641      	mov	r1, r8
 800260a:	6820      	ldr	r0, [r4, #0]
 800260c:	f000 fac6 	bl	8002b9c <memmove>
 8002610:	68a3      	ldr	r3, [r4, #8]
 8002612:	2000      	movs	r0, #0
 8002614:	1b9b      	subs	r3, r3, r6
 8002616:	60a3      	str	r3, [r4, #8]
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	4433      	add	r3, r6
 800261c:	6023      	str	r3, [r4, #0]
 800261e:	e7db      	b.n	80025d8 <__ssputs_r+0x58>
 8002620:	462a      	mov	r2, r5
 8002622:	f000 fbb1 	bl	8002d88 <_realloc_r>
 8002626:	4606      	mov	r6, r0
 8002628:	2800      	cmp	r0, #0
 800262a:	d1e1      	bne.n	80025f0 <__ssputs_r+0x70>
 800262c:	4650      	mov	r0, sl
 800262e:	6921      	ldr	r1, [r4, #16]
 8002630:	f000 face 	bl	8002bd0 <_free_r>
 8002634:	e7c7      	b.n	80025c6 <__ssputs_r+0x46>
	...

08002638 <_svfiprintf_r>:
 8002638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800263c:	4698      	mov	r8, r3
 800263e:	898b      	ldrh	r3, [r1, #12]
 8002640:	4607      	mov	r7, r0
 8002642:	061b      	lsls	r3, r3, #24
 8002644:	460d      	mov	r5, r1
 8002646:	4614      	mov	r4, r2
 8002648:	b09d      	sub	sp, #116	; 0x74
 800264a:	d50e      	bpl.n	800266a <_svfiprintf_r+0x32>
 800264c:	690b      	ldr	r3, [r1, #16]
 800264e:	b963      	cbnz	r3, 800266a <_svfiprintf_r+0x32>
 8002650:	2140      	movs	r1, #64	; 0x40
 8002652:	f000 fb25 	bl	8002ca0 <_malloc_r>
 8002656:	6028      	str	r0, [r5, #0]
 8002658:	6128      	str	r0, [r5, #16]
 800265a:	b920      	cbnz	r0, 8002666 <_svfiprintf_r+0x2e>
 800265c:	230c      	movs	r3, #12
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	f04f 30ff 	mov.w	r0, #4294967295
 8002664:	e0d1      	b.n	800280a <_svfiprintf_r+0x1d2>
 8002666:	2340      	movs	r3, #64	; 0x40
 8002668:	616b      	str	r3, [r5, #20]
 800266a:	2300      	movs	r3, #0
 800266c:	9309      	str	r3, [sp, #36]	; 0x24
 800266e:	2320      	movs	r3, #32
 8002670:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002674:	2330      	movs	r3, #48	; 0x30
 8002676:	f04f 0901 	mov.w	r9, #1
 800267a:	f8cd 800c 	str.w	r8, [sp, #12]
 800267e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002824 <_svfiprintf_r+0x1ec>
 8002682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002686:	4623      	mov	r3, r4
 8002688:	469a      	mov	sl, r3
 800268a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800268e:	b10a      	cbz	r2, 8002694 <_svfiprintf_r+0x5c>
 8002690:	2a25      	cmp	r2, #37	; 0x25
 8002692:	d1f9      	bne.n	8002688 <_svfiprintf_r+0x50>
 8002694:	ebba 0b04 	subs.w	fp, sl, r4
 8002698:	d00b      	beq.n	80026b2 <_svfiprintf_r+0x7a>
 800269a:	465b      	mov	r3, fp
 800269c:	4622      	mov	r2, r4
 800269e:	4629      	mov	r1, r5
 80026a0:	4638      	mov	r0, r7
 80026a2:	f7ff ff6d 	bl	8002580 <__ssputs_r>
 80026a6:	3001      	adds	r0, #1
 80026a8:	f000 80aa 	beq.w	8002800 <_svfiprintf_r+0x1c8>
 80026ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80026ae:	445a      	add	r2, fp
 80026b0:	9209      	str	r2, [sp, #36]	; 0x24
 80026b2:	f89a 3000 	ldrb.w	r3, [sl]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80a2 	beq.w	8002800 <_svfiprintf_r+0x1c8>
 80026bc:	2300      	movs	r3, #0
 80026be:	f04f 32ff 	mov.w	r2, #4294967295
 80026c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80026c6:	f10a 0a01 	add.w	sl, sl, #1
 80026ca:	9304      	str	r3, [sp, #16]
 80026cc:	9307      	str	r3, [sp, #28]
 80026ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026d2:	931a      	str	r3, [sp, #104]	; 0x68
 80026d4:	4654      	mov	r4, sl
 80026d6:	2205      	movs	r2, #5
 80026d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026dc:	4851      	ldr	r0, [pc, #324]	; (8002824 <_svfiprintf_r+0x1ec>)
 80026de:	f000 fa41 	bl	8002b64 <memchr>
 80026e2:	9a04      	ldr	r2, [sp, #16]
 80026e4:	b9d8      	cbnz	r0, 800271e <_svfiprintf_r+0xe6>
 80026e6:	06d0      	lsls	r0, r2, #27
 80026e8:	bf44      	itt	mi
 80026ea:	2320      	movmi	r3, #32
 80026ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026f0:	0711      	lsls	r1, r2, #28
 80026f2:	bf44      	itt	mi
 80026f4:	232b      	movmi	r3, #43	; 0x2b
 80026f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026fa:	f89a 3000 	ldrb.w	r3, [sl]
 80026fe:	2b2a      	cmp	r3, #42	; 0x2a
 8002700:	d015      	beq.n	800272e <_svfiprintf_r+0xf6>
 8002702:	4654      	mov	r4, sl
 8002704:	2000      	movs	r0, #0
 8002706:	f04f 0c0a 	mov.w	ip, #10
 800270a:	9a07      	ldr	r2, [sp, #28]
 800270c:	4621      	mov	r1, r4
 800270e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002712:	3b30      	subs	r3, #48	; 0x30
 8002714:	2b09      	cmp	r3, #9
 8002716:	d94e      	bls.n	80027b6 <_svfiprintf_r+0x17e>
 8002718:	b1b0      	cbz	r0, 8002748 <_svfiprintf_r+0x110>
 800271a:	9207      	str	r2, [sp, #28]
 800271c:	e014      	b.n	8002748 <_svfiprintf_r+0x110>
 800271e:	eba0 0308 	sub.w	r3, r0, r8
 8002722:	fa09 f303 	lsl.w	r3, r9, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	46a2      	mov	sl, r4
 800272a:	9304      	str	r3, [sp, #16]
 800272c:	e7d2      	b.n	80026d4 <_svfiprintf_r+0x9c>
 800272e:	9b03      	ldr	r3, [sp, #12]
 8002730:	1d19      	adds	r1, r3, #4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	9103      	str	r1, [sp, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	bfbb      	ittet	lt
 800273a:	425b      	neglt	r3, r3
 800273c:	f042 0202 	orrlt.w	r2, r2, #2
 8002740:	9307      	strge	r3, [sp, #28]
 8002742:	9307      	strlt	r3, [sp, #28]
 8002744:	bfb8      	it	lt
 8002746:	9204      	strlt	r2, [sp, #16]
 8002748:	7823      	ldrb	r3, [r4, #0]
 800274a:	2b2e      	cmp	r3, #46	; 0x2e
 800274c:	d10c      	bne.n	8002768 <_svfiprintf_r+0x130>
 800274e:	7863      	ldrb	r3, [r4, #1]
 8002750:	2b2a      	cmp	r3, #42	; 0x2a
 8002752:	d135      	bne.n	80027c0 <_svfiprintf_r+0x188>
 8002754:	9b03      	ldr	r3, [sp, #12]
 8002756:	3402      	adds	r4, #2
 8002758:	1d1a      	adds	r2, r3, #4
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	9203      	str	r2, [sp, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	bfb8      	it	lt
 8002762:	f04f 33ff 	movlt.w	r3, #4294967295
 8002766:	9305      	str	r3, [sp, #20]
 8002768:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002828 <_svfiprintf_r+0x1f0>
 800276c:	2203      	movs	r2, #3
 800276e:	4650      	mov	r0, sl
 8002770:	7821      	ldrb	r1, [r4, #0]
 8002772:	f000 f9f7 	bl	8002b64 <memchr>
 8002776:	b140      	cbz	r0, 800278a <_svfiprintf_r+0x152>
 8002778:	2340      	movs	r3, #64	; 0x40
 800277a:	eba0 000a 	sub.w	r0, r0, sl
 800277e:	fa03 f000 	lsl.w	r0, r3, r0
 8002782:	9b04      	ldr	r3, [sp, #16]
 8002784:	3401      	adds	r4, #1
 8002786:	4303      	orrs	r3, r0
 8002788:	9304      	str	r3, [sp, #16]
 800278a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800278e:	2206      	movs	r2, #6
 8002790:	4826      	ldr	r0, [pc, #152]	; (800282c <_svfiprintf_r+0x1f4>)
 8002792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002796:	f000 f9e5 	bl	8002b64 <memchr>
 800279a:	2800      	cmp	r0, #0
 800279c:	d038      	beq.n	8002810 <_svfiprintf_r+0x1d8>
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <_svfiprintf_r+0x1f8>)
 80027a0:	bb1b      	cbnz	r3, 80027ea <_svfiprintf_r+0x1b2>
 80027a2:	9b03      	ldr	r3, [sp, #12]
 80027a4:	3307      	adds	r3, #7
 80027a6:	f023 0307 	bic.w	r3, r3, #7
 80027aa:	3308      	adds	r3, #8
 80027ac:	9303      	str	r3, [sp, #12]
 80027ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027b0:	4433      	add	r3, r6
 80027b2:	9309      	str	r3, [sp, #36]	; 0x24
 80027b4:	e767      	b.n	8002686 <_svfiprintf_r+0x4e>
 80027b6:	460c      	mov	r4, r1
 80027b8:	2001      	movs	r0, #1
 80027ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80027be:	e7a5      	b.n	800270c <_svfiprintf_r+0xd4>
 80027c0:	2300      	movs	r3, #0
 80027c2:	f04f 0c0a 	mov.w	ip, #10
 80027c6:	4619      	mov	r1, r3
 80027c8:	3401      	adds	r4, #1
 80027ca:	9305      	str	r3, [sp, #20]
 80027cc:	4620      	mov	r0, r4
 80027ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80027d2:	3a30      	subs	r2, #48	; 0x30
 80027d4:	2a09      	cmp	r2, #9
 80027d6:	d903      	bls.n	80027e0 <_svfiprintf_r+0x1a8>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0c5      	beq.n	8002768 <_svfiprintf_r+0x130>
 80027dc:	9105      	str	r1, [sp, #20]
 80027de:	e7c3      	b.n	8002768 <_svfiprintf_r+0x130>
 80027e0:	4604      	mov	r4, r0
 80027e2:	2301      	movs	r3, #1
 80027e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80027e8:	e7f0      	b.n	80027cc <_svfiprintf_r+0x194>
 80027ea:	ab03      	add	r3, sp, #12
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	462a      	mov	r2, r5
 80027f0:	4638      	mov	r0, r7
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <_svfiprintf_r+0x1fc>)
 80027f4:	a904      	add	r1, sp, #16
 80027f6:	f3af 8000 	nop.w
 80027fa:	1c42      	adds	r2, r0, #1
 80027fc:	4606      	mov	r6, r0
 80027fe:	d1d6      	bne.n	80027ae <_svfiprintf_r+0x176>
 8002800:	89ab      	ldrh	r3, [r5, #12]
 8002802:	065b      	lsls	r3, r3, #25
 8002804:	f53f af2c 	bmi.w	8002660 <_svfiprintf_r+0x28>
 8002808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800280a:	b01d      	add	sp, #116	; 0x74
 800280c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002810:	ab03      	add	r3, sp, #12
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	462a      	mov	r2, r5
 8002816:	4638      	mov	r0, r7
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <_svfiprintf_r+0x1fc>)
 800281a:	a904      	add	r1, sp, #16
 800281c:	f000 f87c 	bl	8002918 <_printf_i>
 8002820:	e7eb      	b.n	80027fa <_svfiprintf_r+0x1c2>
 8002822:	bf00      	nop
 8002824:	08002f62 	.word	0x08002f62
 8002828:	08002f68 	.word	0x08002f68
 800282c:	08002f6c 	.word	0x08002f6c
 8002830:	00000000 	.word	0x00000000
 8002834:	08002581 	.word	0x08002581

08002838 <_printf_common>:
 8002838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800283c:	4616      	mov	r6, r2
 800283e:	4699      	mov	r9, r3
 8002840:	688a      	ldr	r2, [r1, #8]
 8002842:	690b      	ldr	r3, [r1, #16]
 8002844:	4607      	mov	r7, r0
 8002846:	4293      	cmp	r3, r2
 8002848:	bfb8      	it	lt
 800284a:	4613      	movlt	r3, r2
 800284c:	6033      	str	r3, [r6, #0]
 800284e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002852:	460c      	mov	r4, r1
 8002854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002858:	b10a      	cbz	r2, 800285e <_printf_common+0x26>
 800285a:	3301      	adds	r3, #1
 800285c:	6033      	str	r3, [r6, #0]
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	0699      	lsls	r1, r3, #26
 8002862:	bf42      	ittt	mi
 8002864:	6833      	ldrmi	r3, [r6, #0]
 8002866:	3302      	addmi	r3, #2
 8002868:	6033      	strmi	r3, [r6, #0]
 800286a:	6825      	ldr	r5, [r4, #0]
 800286c:	f015 0506 	ands.w	r5, r5, #6
 8002870:	d106      	bne.n	8002880 <_printf_common+0x48>
 8002872:	f104 0a19 	add.w	sl, r4, #25
 8002876:	68e3      	ldr	r3, [r4, #12]
 8002878:	6832      	ldr	r2, [r6, #0]
 800287a:	1a9b      	subs	r3, r3, r2
 800287c:	42ab      	cmp	r3, r5
 800287e:	dc28      	bgt.n	80028d2 <_printf_common+0x9a>
 8002880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002884:	1e13      	subs	r3, r2, #0
 8002886:	6822      	ldr	r2, [r4, #0]
 8002888:	bf18      	it	ne
 800288a:	2301      	movne	r3, #1
 800288c:	0692      	lsls	r2, r2, #26
 800288e:	d42d      	bmi.n	80028ec <_printf_common+0xb4>
 8002890:	4649      	mov	r1, r9
 8002892:	4638      	mov	r0, r7
 8002894:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002898:	47c0      	blx	r8
 800289a:	3001      	adds	r0, #1
 800289c:	d020      	beq.n	80028e0 <_printf_common+0xa8>
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	68e5      	ldr	r5, [r4, #12]
 80028a2:	f003 0306 	and.w	r3, r3, #6
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	bf18      	it	ne
 80028aa:	2500      	movne	r5, #0
 80028ac:	6832      	ldr	r2, [r6, #0]
 80028ae:	f04f 0600 	mov.w	r6, #0
 80028b2:	68a3      	ldr	r3, [r4, #8]
 80028b4:	bf08      	it	eq
 80028b6:	1aad      	subeq	r5, r5, r2
 80028b8:	6922      	ldr	r2, [r4, #16]
 80028ba:	bf08      	it	eq
 80028bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80028c0:	4293      	cmp	r3, r2
 80028c2:	bfc4      	itt	gt
 80028c4:	1a9b      	subgt	r3, r3, r2
 80028c6:	18ed      	addgt	r5, r5, r3
 80028c8:	341a      	adds	r4, #26
 80028ca:	42b5      	cmp	r5, r6
 80028cc:	d11a      	bne.n	8002904 <_printf_common+0xcc>
 80028ce:	2000      	movs	r0, #0
 80028d0:	e008      	b.n	80028e4 <_printf_common+0xac>
 80028d2:	2301      	movs	r3, #1
 80028d4:	4652      	mov	r2, sl
 80028d6:	4649      	mov	r1, r9
 80028d8:	4638      	mov	r0, r7
 80028da:	47c0      	blx	r8
 80028dc:	3001      	adds	r0, #1
 80028de:	d103      	bne.n	80028e8 <_printf_common+0xb0>
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028e8:	3501      	adds	r5, #1
 80028ea:	e7c4      	b.n	8002876 <_printf_common+0x3e>
 80028ec:	2030      	movs	r0, #48	; 0x30
 80028ee:	18e1      	adds	r1, r4, r3
 80028f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028fa:	4422      	add	r2, r4
 80028fc:	3302      	adds	r3, #2
 80028fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002902:	e7c5      	b.n	8002890 <_printf_common+0x58>
 8002904:	2301      	movs	r3, #1
 8002906:	4622      	mov	r2, r4
 8002908:	4649      	mov	r1, r9
 800290a:	4638      	mov	r0, r7
 800290c:	47c0      	blx	r8
 800290e:	3001      	adds	r0, #1
 8002910:	d0e6      	beq.n	80028e0 <_printf_common+0xa8>
 8002912:	3601      	adds	r6, #1
 8002914:	e7d9      	b.n	80028ca <_printf_common+0x92>
	...

08002918 <_printf_i>:
 8002918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800291c:	7e0f      	ldrb	r7, [r1, #24]
 800291e:	4691      	mov	r9, r2
 8002920:	2f78      	cmp	r7, #120	; 0x78
 8002922:	4680      	mov	r8, r0
 8002924:	460c      	mov	r4, r1
 8002926:	469a      	mov	sl, r3
 8002928:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800292a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800292e:	d807      	bhi.n	8002940 <_printf_i+0x28>
 8002930:	2f62      	cmp	r7, #98	; 0x62
 8002932:	d80a      	bhi.n	800294a <_printf_i+0x32>
 8002934:	2f00      	cmp	r7, #0
 8002936:	f000 80d9 	beq.w	8002aec <_printf_i+0x1d4>
 800293a:	2f58      	cmp	r7, #88	; 0x58
 800293c:	f000 80a4 	beq.w	8002a88 <_printf_i+0x170>
 8002940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002944:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002948:	e03a      	b.n	80029c0 <_printf_i+0xa8>
 800294a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800294e:	2b15      	cmp	r3, #21
 8002950:	d8f6      	bhi.n	8002940 <_printf_i+0x28>
 8002952:	a101      	add	r1, pc, #4	; (adr r1, 8002958 <_printf_i+0x40>)
 8002954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002958:	080029b1 	.word	0x080029b1
 800295c:	080029c5 	.word	0x080029c5
 8002960:	08002941 	.word	0x08002941
 8002964:	08002941 	.word	0x08002941
 8002968:	08002941 	.word	0x08002941
 800296c:	08002941 	.word	0x08002941
 8002970:	080029c5 	.word	0x080029c5
 8002974:	08002941 	.word	0x08002941
 8002978:	08002941 	.word	0x08002941
 800297c:	08002941 	.word	0x08002941
 8002980:	08002941 	.word	0x08002941
 8002984:	08002ad3 	.word	0x08002ad3
 8002988:	080029f5 	.word	0x080029f5
 800298c:	08002ab5 	.word	0x08002ab5
 8002990:	08002941 	.word	0x08002941
 8002994:	08002941 	.word	0x08002941
 8002998:	08002af5 	.word	0x08002af5
 800299c:	08002941 	.word	0x08002941
 80029a0:	080029f5 	.word	0x080029f5
 80029a4:	08002941 	.word	0x08002941
 80029a8:	08002941 	.word	0x08002941
 80029ac:	08002abd 	.word	0x08002abd
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	1d1a      	adds	r2, r3, #4
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	602a      	str	r2, [r5, #0]
 80029b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0a4      	b.n	8002b0e <_printf_i+0x1f6>
 80029c4:	6820      	ldr	r0, [r4, #0]
 80029c6:	6829      	ldr	r1, [r5, #0]
 80029c8:	0606      	lsls	r6, r0, #24
 80029ca:	f101 0304 	add.w	r3, r1, #4
 80029ce:	d50a      	bpl.n	80029e6 <_printf_i+0xce>
 80029d0:	680e      	ldr	r6, [r1, #0]
 80029d2:	602b      	str	r3, [r5, #0]
 80029d4:	2e00      	cmp	r6, #0
 80029d6:	da03      	bge.n	80029e0 <_printf_i+0xc8>
 80029d8:	232d      	movs	r3, #45	; 0x2d
 80029da:	4276      	negs	r6, r6
 80029dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e0:	230a      	movs	r3, #10
 80029e2:	485e      	ldr	r0, [pc, #376]	; (8002b5c <_printf_i+0x244>)
 80029e4:	e019      	b.n	8002a1a <_printf_i+0x102>
 80029e6:	680e      	ldr	r6, [r1, #0]
 80029e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80029ec:	602b      	str	r3, [r5, #0]
 80029ee:	bf18      	it	ne
 80029f0:	b236      	sxthne	r6, r6
 80029f2:	e7ef      	b.n	80029d4 <_printf_i+0xbc>
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	6820      	ldr	r0, [r4, #0]
 80029f8:	1d19      	adds	r1, r3, #4
 80029fa:	6029      	str	r1, [r5, #0]
 80029fc:	0601      	lsls	r1, r0, #24
 80029fe:	d501      	bpl.n	8002a04 <_printf_i+0xec>
 8002a00:	681e      	ldr	r6, [r3, #0]
 8002a02:	e002      	b.n	8002a0a <_printf_i+0xf2>
 8002a04:	0646      	lsls	r6, r0, #25
 8002a06:	d5fb      	bpl.n	8002a00 <_printf_i+0xe8>
 8002a08:	881e      	ldrh	r6, [r3, #0]
 8002a0a:	2f6f      	cmp	r7, #111	; 0x6f
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2308      	moveq	r3, #8
 8002a10:	230a      	movne	r3, #10
 8002a12:	4852      	ldr	r0, [pc, #328]	; (8002b5c <_printf_i+0x244>)
 8002a14:	2100      	movs	r1, #0
 8002a16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002a1a:	6865      	ldr	r5, [r4, #4]
 8002a1c:	2d00      	cmp	r5, #0
 8002a1e:	bfa8      	it	ge
 8002a20:	6821      	ldrge	r1, [r4, #0]
 8002a22:	60a5      	str	r5, [r4, #8]
 8002a24:	bfa4      	itt	ge
 8002a26:	f021 0104 	bicge.w	r1, r1, #4
 8002a2a:	6021      	strge	r1, [r4, #0]
 8002a2c:	b90e      	cbnz	r6, 8002a32 <_printf_i+0x11a>
 8002a2e:	2d00      	cmp	r5, #0
 8002a30:	d04d      	beq.n	8002ace <_printf_i+0x1b6>
 8002a32:	4615      	mov	r5, r2
 8002a34:	fbb6 f1f3 	udiv	r1, r6, r3
 8002a38:	fb03 6711 	mls	r7, r3, r1, r6
 8002a3c:	5dc7      	ldrb	r7, [r0, r7]
 8002a3e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002a42:	4637      	mov	r7, r6
 8002a44:	42bb      	cmp	r3, r7
 8002a46:	460e      	mov	r6, r1
 8002a48:	d9f4      	bls.n	8002a34 <_printf_i+0x11c>
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d10b      	bne.n	8002a66 <_printf_i+0x14e>
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	07de      	lsls	r6, r3, #31
 8002a52:	d508      	bpl.n	8002a66 <_printf_i+0x14e>
 8002a54:	6923      	ldr	r3, [r4, #16]
 8002a56:	6861      	ldr	r1, [r4, #4]
 8002a58:	4299      	cmp	r1, r3
 8002a5a:	bfde      	ittt	le
 8002a5c:	2330      	movle	r3, #48	; 0x30
 8002a5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a66:	1b52      	subs	r2, r2, r5
 8002a68:	6122      	str	r2, [r4, #16]
 8002a6a:	464b      	mov	r3, r9
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	4640      	mov	r0, r8
 8002a70:	f8cd a000 	str.w	sl, [sp]
 8002a74:	aa03      	add	r2, sp, #12
 8002a76:	f7ff fedf 	bl	8002838 <_printf_common>
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	d14c      	bne.n	8002b18 <_printf_i+0x200>
 8002a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a82:	b004      	add	sp, #16
 8002a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a88:	4834      	ldr	r0, [pc, #208]	; (8002b5c <_printf_i+0x244>)
 8002a8a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002a8e:	6829      	ldr	r1, [r5, #0]
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a96:	6029      	str	r1, [r5, #0]
 8002a98:	061d      	lsls	r5, r3, #24
 8002a9a:	d514      	bpl.n	8002ac6 <_printf_i+0x1ae>
 8002a9c:	07df      	lsls	r7, r3, #31
 8002a9e:	bf44      	itt	mi
 8002aa0:	f043 0320 	orrmi.w	r3, r3, #32
 8002aa4:	6023      	strmi	r3, [r4, #0]
 8002aa6:	b91e      	cbnz	r6, 8002ab0 <_printf_i+0x198>
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	f023 0320 	bic.w	r3, r3, #32
 8002aae:	6023      	str	r3, [r4, #0]
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	e7af      	b.n	8002a14 <_printf_i+0xfc>
 8002ab4:	6823      	ldr	r3, [r4, #0]
 8002ab6:	f043 0320 	orr.w	r3, r3, #32
 8002aba:	6023      	str	r3, [r4, #0]
 8002abc:	2378      	movs	r3, #120	; 0x78
 8002abe:	4828      	ldr	r0, [pc, #160]	; (8002b60 <_printf_i+0x248>)
 8002ac0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ac4:	e7e3      	b.n	8002a8e <_printf_i+0x176>
 8002ac6:	0659      	lsls	r1, r3, #25
 8002ac8:	bf48      	it	mi
 8002aca:	b2b6      	uxthmi	r6, r6
 8002acc:	e7e6      	b.n	8002a9c <_printf_i+0x184>
 8002ace:	4615      	mov	r5, r2
 8002ad0:	e7bb      	b.n	8002a4a <_printf_i+0x132>
 8002ad2:	682b      	ldr	r3, [r5, #0]
 8002ad4:	6826      	ldr	r6, [r4, #0]
 8002ad6:	1d18      	adds	r0, r3, #4
 8002ad8:	6961      	ldr	r1, [r4, #20]
 8002ada:	6028      	str	r0, [r5, #0]
 8002adc:	0635      	lsls	r5, r6, #24
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	d501      	bpl.n	8002ae6 <_printf_i+0x1ce>
 8002ae2:	6019      	str	r1, [r3, #0]
 8002ae4:	e002      	b.n	8002aec <_printf_i+0x1d4>
 8002ae6:	0670      	lsls	r0, r6, #25
 8002ae8:	d5fb      	bpl.n	8002ae2 <_printf_i+0x1ca>
 8002aea:	8019      	strh	r1, [r3, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	4615      	mov	r5, r2
 8002af0:	6123      	str	r3, [r4, #16]
 8002af2:	e7ba      	b.n	8002a6a <_printf_i+0x152>
 8002af4:	682b      	ldr	r3, [r5, #0]
 8002af6:	2100      	movs	r1, #0
 8002af8:	1d1a      	adds	r2, r3, #4
 8002afa:	602a      	str	r2, [r5, #0]
 8002afc:	681d      	ldr	r5, [r3, #0]
 8002afe:	6862      	ldr	r2, [r4, #4]
 8002b00:	4628      	mov	r0, r5
 8002b02:	f000 f82f 	bl	8002b64 <memchr>
 8002b06:	b108      	cbz	r0, 8002b0c <_printf_i+0x1f4>
 8002b08:	1b40      	subs	r0, r0, r5
 8002b0a:	6060      	str	r0, [r4, #4]
 8002b0c:	6863      	ldr	r3, [r4, #4]
 8002b0e:	6123      	str	r3, [r4, #16]
 8002b10:	2300      	movs	r3, #0
 8002b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b16:	e7a8      	b.n	8002a6a <_printf_i+0x152>
 8002b18:	462a      	mov	r2, r5
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	4640      	mov	r0, r8
 8002b1e:	6923      	ldr	r3, [r4, #16]
 8002b20:	47d0      	blx	sl
 8002b22:	3001      	adds	r0, #1
 8002b24:	d0ab      	beq.n	8002a7e <_printf_i+0x166>
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	079b      	lsls	r3, r3, #30
 8002b2a:	d413      	bmi.n	8002b54 <_printf_i+0x23c>
 8002b2c:	68e0      	ldr	r0, [r4, #12]
 8002b2e:	9b03      	ldr	r3, [sp, #12]
 8002b30:	4298      	cmp	r0, r3
 8002b32:	bfb8      	it	lt
 8002b34:	4618      	movlt	r0, r3
 8002b36:	e7a4      	b.n	8002a82 <_printf_i+0x16a>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	4632      	mov	r2, r6
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	4640      	mov	r0, r8
 8002b40:	47d0      	blx	sl
 8002b42:	3001      	adds	r0, #1
 8002b44:	d09b      	beq.n	8002a7e <_printf_i+0x166>
 8002b46:	3501      	adds	r5, #1
 8002b48:	68e3      	ldr	r3, [r4, #12]
 8002b4a:	9903      	ldr	r1, [sp, #12]
 8002b4c:	1a5b      	subs	r3, r3, r1
 8002b4e:	42ab      	cmp	r3, r5
 8002b50:	dcf2      	bgt.n	8002b38 <_printf_i+0x220>
 8002b52:	e7eb      	b.n	8002b2c <_printf_i+0x214>
 8002b54:	2500      	movs	r5, #0
 8002b56:	f104 0619 	add.w	r6, r4, #25
 8002b5a:	e7f5      	b.n	8002b48 <_printf_i+0x230>
 8002b5c:	08002f73 	.word	0x08002f73
 8002b60:	08002f84 	.word	0x08002f84

08002b64 <memchr>:
 8002b64:	4603      	mov	r3, r0
 8002b66:	b510      	push	{r4, lr}
 8002b68:	b2c9      	uxtb	r1, r1
 8002b6a:	4402      	add	r2, r0
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	d101      	bne.n	8002b76 <memchr+0x12>
 8002b72:	2000      	movs	r0, #0
 8002b74:	e003      	b.n	8002b7e <memchr+0x1a>
 8002b76:	7804      	ldrb	r4, [r0, #0]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	428c      	cmp	r4, r1
 8002b7c:	d1f6      	bne.n	8002b6c <memchr+0x8>
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <memcpy>:
 8002b80:	440a      	add	r2, r1
 8002b82:	4291      	cmp	r1, r2
 8002b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b88:	d100      	bne.n	8002b8c <memcpy+0xc>
 8002b8a:	4770      	bx	lr
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b92:	4291      	cmp	r1, r2
 8002b94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b98:	d1f9      	bne.n	8002b8e <memcpy+0xe>
 8002b9a:	bd10      	pop	{r4, pc}

08002b9c <memmove>:
 8002b9c:	4288      	cmp	r0, r1
 8002b9e:	b510      	push	{r4, lr}
 8002ba0:	eb01 0402 	add.w	r4, r1, r2
 8002ba4:	d902      	bls.n	8002bac <memmove+0x10>
 8002ba6:	4284      	cmp	r4, r0
 8002ba8:	4623      	mov	r3, r4
 8002baa:	d807      	bhi.n	8002bbc <memmove+0x20>
 8002bac:	1e43      	subs	r3, r0, #1
 8002bae:	42a1      	cmp	r1, r4
 8002bb0:	d008      	beq.n	8002bc4 <memmove+0x28>
 8002bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002bba:	e7f8      	b.n	8002bae <memmove+0x12>
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	4402      	add	r2, r0
 8002bc0:	428a      	cmp	r2, r1
 8002bc2:	d100      	bne.n	8002bc6 <memmove+0x2a>
 8002bc4:	bd10      	pop	{r4, pc}
 8002bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002bce:	e7f7      	b.n	8002bc0 <memmove+0x24>

08002bd0 <_free_r>:
 8002bd0:	b538      	push	{r3, r4, r5, lr}
 8002bd2:	4605      	mov	r5, r0
 8002bd4:	2900      	cmp	r1, #0
 8002bd6:	d040      	beq.n	8002c5a <_free_r+0x8a>
 8002bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bdc:	1f0c      	subs	r4, r1, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bfb8      	it	lt
 8002be2:	18e4      	addlt	r4, r4, r3
 8002be4:	f000 f910 	bl	8002e08 <__malloc_lock>
 8002be8:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <_free_r+0x8c>)
 8002bea:	6813      	ldr	r3, [r2, #0]
 8002bec:	b933      	cbnz	r3, 8002bfc <_free_r+0x2c>
 8002bee:	6063      	str	r3, [r4, #4]
 8002bf0:	6014      	str	r4, [r2, #0]
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bf8:	f000 b90c 	b.w	8002e14 <__malloc_unlock>
 8002bfc:	42a3      	cmp	r3, r4
 8002bfe:	d908      	bls.n	8002c12 <_free_r+0x42>
 8002c00:	6820      	ldr	r0, [r4, #0]
 8002c02:	1821      	adds	r1, r4, r0
 8002c04:	428b      	cmp	r3, r1
 8002c06:	bf01      	itttt	eq
 8002c08:	6819      	ldreq	r1, [r3, #0]
 8002c0a:	685b      	ldreq	r3, [r3, #4]
 8002c0c:	1809      	addeq	r1, r1, r0
 8002c0e:	6021      	streq	r1, [r4, #0]
 8002c10:	e7ed      	b.n	8002bee <_free_r+0x1e>
 8002c12:	461a      	mov	r2, r3
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	b10b      	cbz	r3, 8002c1c <_free_r+0x4c>
 8002c18:	42a3      	cmp	r3, r4
 8002c1a:	d9fa      	bls.n	8002c12 <_free_r+0x42>
 8002c1c:	6811      	ldr	r1, [r2, #0]
 8002c1e:	1850      	adds	r0, r2, r1
 8002c20:	42a0      	cmp	r0, r4
 8002c22:	d10b      	bne.n	8002c3c <_free_r+0x6c>
 8002c24:	6820      	ldr	r0, [r4, #0]
 8002c26:	4401      	add	r1, r0
 8002c28:	1850      	adds	r0, r2, r1
 8002c2a:	4283      	cmp	r3, r0
 8002c2c:	6011      	str	r1, [r2, #0]
 8002c2e:	d1e0      	bne.n	8002bf2 <_free_r+0x22>
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4401      	add	r1, r0
 8002c36:	6011      	str	r1, [r2, #0]
 8002c38:	6053      	str	r3, [r2, #4]
 8002c3a:	e7da      	b.n	8002bf2 <_free_r+0x22>
 8002c3c:	d902      	bls.n	8002c44 <_free_r+0x74>
 8002c3e:	230c      	movs	r3, #12
 8002c40:	602b      	str	r3, [r5, #0]
 8002c42:	e7d6      	b.n	8002bf2 <_free_r+0x22>
 8002c44:	6820      	ldr	r0, [r4, #0]
 8002c46:	1821      	adds	r1, r4, r0
 8002c48:	428b      	cmp	r3, r1
 8002c4a:	bf01      	itttt	eq
 8002c4c:	6819      	ldreq	r1, [r3, #0]
 8002c4e:	685b      	ldreq	r3, [r3, #4]
 8002c50:	1809      	addeq	r1, r1, r0
 8002c52:	6021      	streq	r1, [r4, #0]
 8002c54:	6063      	str	r3, [r4, #4]
 8002c56:	6054      	str	r4, [r2, #4]
 8002c58:	e7cb      	b.n	8002bf2 <_free_r+0x22>
 8002c5a:	bd38      	pop	{r3, r4, r5, pc}
 8002c5c:	200001c0 	.word	0x200001c0

08002c60 <sbrk_aligned>:
 8002c60:	b570      	push	{r4, r5, r6, lr}
 8002c62:	4e0e      	ldr	r6, [pc, #56]	; (8002c9c <sbrk_aligned+0x3c>)
 8002c64:	460c      	mov	r4, r1
 8002c66:	6831      	ldr	r1, [r6, #0]
 8002c68:	4605      	mov	r5, r0
 8002c6a:	b911      	cbnz	r1, 8002c72 <sbrk_aligned+0x12>
 8002c6c:	f000 f8bc 	bl	8002de8 <_sbrk_r>
 8002c70:	6030      	str	r0, [r6, #0]
 8002c72:	4621      	mov	r1, r4
 8002c74:	4628      	mov	r0, r5
 8002c76:	f000 f8b7 	bl	8002de8 <_sbrk_r>
 8002c7a:	1c43      	adds	r3, r0, #1
 8002c7c:	d00a      	beq.n	8002c94 <sbrk_aligned+0x34>
 8002c7e:	1cc4      	adds	r4, r0, #3
 8002c80:	f024 0403 	bic.w	r4, r4, #3
 8002c84:	42a0      	cmp	r0, r4
 8002c86:	d007      	beq.n	8002c98 <sbrk_aligned+0x38>
 8002c88:	1a21      	subs	r1, r4, r0
 8002c8a:	4628      	mov	r0, r5
 8002c8c:	f000 f8ac 	bl	8002de8 <_sbrk_r>
 8002c90:	3001      	adds	r0, #1
 8002c92:	d101      	bne.n	8002c98 <sbrk_aligned+0x38>
 8002c94:	f04f 34ff 	mov.w	r4, #4294967295
 8002c98:	4620      	mov	r0, r4
 8002c9a:	bd70      	pop	{r4, r5, r6, pc}
 8002c9c:	200001c4 	.word	0x200001c4

08002ca0 <_malloc_r>:
 8002ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca4:	1ccd      	adds	r5, r1, #3
 8002ca6:	f025 0503 	bic.w	r5, r5, #3
 8002caa:	3508      	adds	r5, #8
 8002cac:	2d0c      	cmp	r5, #12
 8002cae:	bf38      	it	cc
 8002cb0:	250c      	movcc	r5, #12
 8002cb2:	2d00      	cmp	r5, #0
 8002cb4:	4607      	mov	r7, r0
 8002cb6:	db01      	blt.n	8002cbc <_malloc_r+0x1c>
 8002cb8:	42a9      	cmp	r1, r5
 8002cba:	d905      	bls.n	8002cc8 <_malloc_r+0x28>
 8002cbc:	230c      	movs	r3, #12
 8002cbe:	2600      	movs	r6, #0
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	4630      	mov	r0, r6
 8002cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cc8:	4e2e      	ldr	r6, [pc, #184]	; (8002d84 <_malloc_r+0xe4>)
 8002cca:	f000 f89d 	bl	8002e08 <__malloc_lock>
 8002cce:	6833      	ldr	r3, [r6, #0]
 8002cd0:	461c      	mov	r4, r3
 8002cd2:	bb34      	cbnz	r4, 8002d22 <_malloc_r+0x82>
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	4638      	mov	r0, r7
 8002cd8:	f7ff ffc2 	bl	8002c60 <sbrk_aligned>
 8002cdc:	1c43      	adds	r3, r0, #1
 8002cde:	4604      	mov	r4, r0
 8002ce0:	d14d      	bne.n	8002d7e <_malloc_r+0xde>
 8002ce2:	6834      	ldr	r4, [r6, #0]
 8002ce4:	4626      	mov	r6, r4
 8002ce6:	2e00      	cmp	r6, #0
 8002ce8:	d140      	bne.n	8002d6c <_malloc_r+0xcc>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	4631      	mov	r1, r6
 8002cee:	4638      	mov	r0, r7
 8002cf0:	eb04 0803 	add.w	r8, r4, r3
 8002cf4:	f000 f878 	bl	8002de8 <_sbrk_r>
 8002cf8:	4580      	cmp	r8, r0
 8002cfa:	d13a      	bne.n	8002d72 <_malloc_r+0xd2>
 8002cfc:	6821      	ldr	r1, [r4, #0]
 8002cfe:	3503      	adds	r5, #3
 8002d00:	1a6d      	subs	r5, r5, r1
 8002d02:	f025 0503 	bic.w	r5, r5, #3
 8002d06:	3508      	adds	r5, #8
 8002d08:	2d0c      	cmp	r5, #12
 8002d0a:	bf38      	it	cc
 8002d0c:	250c      	movcc	r5, #12
 8002d0e:	4638      	mov	r0, r7
 8002d10:	4629      	mov	r1, r5
 8002d12:	f7ff ffa5 	bl	8002c60 <sbrk_aligned>
 8002d16:	3001      	adds	r0, #1
 8002d18:	d02b      	beq.n	8002d72 <_malloc_r+0xd2>
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	442b      	add	r3, r5
 8002d1e:	6023      	str	r3, [r4, #0]
 8002d20:	e00e      	b.n	8002d40 <_malloc_r+0xa0>
 8002d22:	6822      	ldr	r2, [r4, #0]
 8002d24:	1b52      	subs	r2, r2, r5
 8002d26:	d41e      	bmi.n	8002d66 <_malloc_r+0xc6>
 8002d28:	2a0b      	cmp	r2, #11
 8002d2a:	d916      	bls.n	8002d5a <_malloc_r+0xba>
 8002d2c:	1961      	adds	r1, r4, r5
 8002d2e:	42a3      	cmp	r3, r4
 8002d30:	6025      	str	r5, [r4, #0]
 8002d32:	bf18      	it	ne
 8002d34:	6059      	strne	r1, [r3, #4]
 8002d36:	6863      	ldr	r3, [r4, #4]
 8002d38:	bf08      	it	eq
 8002d3a:	6031      	streq	r1, [r6, #0]
 8002d3c:	5162      	str	r2, [r4, r5]
 8002d3e:	604b      	str	r3, [r1, #4]
 8002d40:	4638      	mov	r0, r7
 8002d42:	f104 060b 	add.w	r6, r4, #11
 8002d46:	f000 f865 	bl	8002e14 <__malloc_unlock>
 8002d4a:	f026 0607 	bic.w	r6, r6, #7
 8002d4e:	1d23      	adds	r3, r4, #4
 8002d50:	1af2      	subs	r2, r6, r3
 8002d52:	d0b6      	beq.n	8002cc2 <_malloc_r+0x22>
 8002d54:	1b9b      	subs	r3, r3, r6
 8002d56:	50a3      	str	r3, [r4, r2]
 8002d58:	e7b3      	b.n	8002cc2 <_malloc_r+0x22>
 8002d5a:	6862      	ldr	r2, [r4, #4]
 8002d5c:	42a3      	cmp	r3, r4
 8002d5e:	bf0c      	ite	eq
 8002d60:	6032      	streq	r2, [r6, #0]
 8002d62:	605a      	strne	r2, [r3, #4]
 8002d64:	e7ec      	b.n	8002d40 <_malloc_r+0xa0>
 8002d66:	4623      	mov	r3, r4
 8002d68:	6864      	ldr	r4, [r4, #4]
 8002d6a:	e7b2      	b.n	8002cd2 <_malloc_r+0x32>
 8002d6c:	4634      	mov	r4, r6
 8002d6e:	6876      	ldr	r6, [r6, #4]
 8002d70:	e7b9      	b.n	8002ce6 <_malloc_r+0x46>
 8002d72:	230c      	movs	r3, #12
 8002d74:	4638      	mov	r0, r7
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	f000 f84c 	bl	8002e14 <__malloc_unlock>
 8002d7c:	e7a1      	b.n	8002cc2 <_malloc_r+0x22>
 8002d7e:	6025      	str	r5, [r4, #0]
 8002d80:	e7de      	b.n	8002d40 <_malloc_r+0xa0>
 8002d82:	bf00      	nop
 8002d84:	200001c0 	.word	0x200001c0

08002d88 <_realloc_r>:
 8002d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d8c:	4680      	mov	r8, r0
 8002d8e:	4614      	mov	r4, r2
 8002d90:	460e      	mov	r6, r1
 8002d92:	b921      	cbnz	r1, 8002d9e <_realloc_r+0x16>
 8002d94:	4611      	mov	r1, r2
 8002d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d9a:	f7ff bf81 	b.w	8002ca0 <_malloc_r>
 8002d9e:	b92a      	cbnz	r2, 8002dac <_realloc_r+0x24>
 8002da0:	f7ff ff16 	bl	8002bd0 <_free_r>
 8002da4:	4625      	mov	r5, r4
 8002da6:	4628      	mov	r0, r5
 8002da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dac:	f000 f838 	bl	8002e20 <_malloc_usable_size_r>
 8002db0:	4284      	cmp	r4, r0
 8002db2:	4607      	mov	r7, r0
 8002db4:	d802      	bhi.n	8002dbc <_realloc_r+0x34>
 8002db6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002dba:	d812      	bhi.n	8002de2 <_realloc_r+0x5a>
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	4640      	mov	r0, r8
 8002dc0:	f7ff ff6e 	bl	8002ca0 <_malloc_r>
 8002dc4:	4605      	mov	r5, r0
 8002dc6:	2800      	cmp	r0, #0
 8002dc8:	d0ed      	beq.n	8002da6 <_realloc_r+0x1e>
 8002dca:	42bc      	cmp	r4, r7
 8002dcc:	4622      	mov	r2, r4
 8002dce:	4631      	mov	r1, r6
 8002dd0:	bf28      	it	cs
 8002dd2:	463a      	movcs	r2, r7
 8002dd4:	f7ff fed4 	bl	8002b80 <memcpy>
 8002dd8:	4631      	mov	r1, r6
 8002dda:	4640      	mov	r0, r8
 8002ddc:	f7ff fef8 	bl	8002bd0 <_free_r>
 8002de0:	e7e1      	b.n	8002da6 <_realloc_r+0x1e>
 8002de2:	4635      	mov	r5, r6
 8002de4:	e7df      	b.n	8002da6 <_realloc_r+0x1e>
	...

08002de8 <_sbrk_r>:
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	2300      	movs	r3, #0
 8002dec:	4d05      	ldr	r5, [pc, #20]	; (8002e04 <_sbrk_r+0x1c>)
 8002dee:	4604      	mov	r4, r0
 8002df0:	4608      	mov	r0, r1
 8002df2:	602b      	str	r3, [r5, #0]
 8002df4:	f7fd fe9e 	bl	8000b34 <_sbrk>
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	d102      	bne.n	8002e02 <_sbrk_r+0x1a>
 8002dfc:	682b      	ldr	r3, [r5, #0]
 8002dfe:	b103      	cbz	r3, 8002e02 <_sbrk_r+0x1a>
 8002e00:	6023      	str	r3, [r4, #0]
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	200001c8 	.word	0x200001c8

08002e08 <__malloc_lock>:
 8002e08:	4801      	ldr	r0, [pc, #4]	; (8002e10 <__malloc_lock+0x8>)
 8002e0a:	f000 b811 	b.w	8002e30 <__retarget_lock_acquire_recursive>
 8002e0e:	bf00      	nop
 8002e10:	200001cc 	.word	0x200001cc

08002e14 <__malloc_unlock>:
 8002e14:	4801      	ldr	r0, [pc, #4]	; (8002e1c <__malloc_unlock+0x8>)
 8002e16:	f000 b80c 	b.w	8002e32 <__retarget_lock_release_recursive>
 8002e1a:	bf00      	nop
 8002e1c:	200001cc 	.word	0x200001cc

08002e20 <_malloc_usable_size_r>:
 8002e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e24:	1f18      	subs	r0, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bfbc      	itt	lt
 8002e2a:	580b      	ldrlt	r3, [r1, r0]
 8002e2c:	18c0      	addlt	r0, r0, r3
 8002e2e:	4770      	bx	lr

08002e30 <__retarget_lock_acquire_recursive>:
 8002e30:	4770      	bx	lr

08002e32 <__retarget_lock_release_recursive>:
 8002e32:	4770      	bx	lr

08002e34 <_init>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	bf00      	nop
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr

08002e40 <_fini>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	bf00      	nop
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr
